var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Activity.html",[0,0.236,1,3.376]],["body/classes/Activity.html",[0,0.275,1,5.094,2,1.019,3,0.099,4,0.09,5,0.09,6,4.48,7,0.251,8,1.024,9,3.146,10,0.489,11,3.653,12,4.1,13,0.007,14,0.592,15,1.46,16,3.05,17,1.929,18,0.627,19,5.497,20,5.497,21,2.838,22,5.497,23,5.497,24,0.285,25,3.291,26,1.846,27,2.095,28,1,29,2.433,30,1.323,31,2.245,32,0.127,33,2.004,34,2.197,35,4.48,36,5.497,37,5.497,38,4.883,39,7.112,40,1.664,41,2.357,42,1,43,4.178,44,4.883,45,0.005,46,0.005]],["title/controllers/ActivityController.html",[47,1.346,48,3.583]],["body/controllers/ActivityController.html",[0,0.229,3,0.082,4,0.075,5,0.075,7,0.209,10,0.411,13,0.007,14,0.559,15,1.422,18,0.611,24,0.311,32,0.082,45,0.005,46,0.005,47,1.308,48,4.786,49,1.443,50,4.069,51,2.181,52,4.581,53,1.355,54,2.769,55,2.067,56,3.909,57,4.083,58,3.085,59,3.275,60,4.069,61,5.706,62,3.086,63,4.581,64,1.764,65,0.828,66,1.05,67,1.716,68,3.764,69,4.581,70,2.97,71,4.28,72,4.581,73,2.397,74,2.543,75,3.621,76,4.581,77,2.634,78,6.273,79,4.786,80,4.581,81,1.36,82,1.283,83,1.473,84,2.455,85,2.181,86,1.917,87,3.113,88,0.772,89,4.891,90,4.069,91,1.964,92,5.132,93,2.634,94,4.581,95,1.746,96,1.235,97,2.845,98,1.815,99,4.581,100,4.581,101,3.481,102,4.581,103,3.481,104,4.581,105,2.845,106,4.581]],["title/modules/ActivityModule.html",[107,1.346,108,3.583]],["body/modules/ActivityModule.html",[0,0.3,1,4.295,3,0.107,4,0.098,5,0.098,13,0.007,24,0.356,26,1.556,28,1.091,32,0.107,43,5.714,45,0.006,46,0.006,48,6.241,49,2.369,65,0.641,81,1.78,82,1.68,83,1.928,88,1.011,89,6.149,90,5.328,107,2.345,108,6.876,109,2.45,110,2.393,111,2.706,112,2.706,113,2.571,114,3.611,115,2.571,116,5.328,117,5.328,118,3.392,119,2.338,120,2.637,121,5.997,122,2.706,123,5.997,124,5.328,125,2.637,126,2.779,127,5.997]],["title/injectables/ActivityService.html",[89,3.204,128,0.959]],["body/injectables/ActivityService.html",[0,0.212,1,5.37,3,0.076,4,0.069,5,0.069,7,0.193,10,0.419,13,0.007,14,0.549,17,0.948,18,0.616,24,0.329,28,0.772,30,1.022,32,0.076,42,1.364,45,0.004,46,0.004,53,1.285,54,2.74,55,1.96,56,3.782,57,3.872,58,2.925,59,3.106,60,5.305,61,5.371,64,1.798,65,0.845,66,1.071,67,1.669,70,3.872,73,2.529,74,3.315,77,3.433,78,6.157,88,0.715,89,4.059,91,1.82,92,4.866,93,2.44,98,1.675,124,3.77,128,1.215,129,1.547,130,3.77,131,2,132,4.244,133,3.215,134,4.244,135,5.971,136,4.244,137,3.029,138,4.244,139,4.244,140,4.244,141,4.244,142,2.636,143,1.866,144,4.244,145,1.514,146,4.244,147,2.441,148,4.244,149,4.244,150,4.244,151,2.363,152,4.244,153,3.118,154,6.909,155,3.709,156,6.909,157,4.244,158,4.277,159,4.244]],["title/classes/AddMemberDto.html",[0,0.236,160,3.376]],["body/classes/AddMemberDto.html",[0,0.325,2,1.205,3,0.117,4,0.106,5,0.106,7,0.296,8,1.138,10,0.452,11,3.945,13,0.007,14,0.557,18,0.64,32,0.117,45,0.006,46,0.006,66,1.071,160,5.661,161,7.218,162,4.606,163,5.778,164,3.174,165,5.521,166,6.503,167,6.503,168,3.476,169,6.503]],["title/classes/AddMemberDto-1.html",[0,0.197,160,2.823,170,1.438]],["body/classes/AddMemberDto-1.html",[0,0.329,2,1.219,3,0.118,4,0.107,5,0.107,7,0.3,8,1.146,10,0.454,11,3.965,13,0.007,14,0.559,18,0.643,32,0.118,45,0.006,46,0.006,66,1.079,160,5.7,161,7.246,164,3.189,165,5.549,168,3.499,171,5.844,172,6.578,173,6.578,174,6.578]],["title/guards/ApiKeyGuard.html",[175,3.842,176,3.842]],["body/guards/ApiKeyGuard.html",[0,0.266,3,0.096,4,0.087,5,0.087,7,0.243,10,0.437,13,0.007,14,0.438,18,0.524,24,0.331,32,0.096,42,1.413,45,0.005,46,0.005,53,1.501,64,1.587,65,0.745,66,0.945,67,1.126,88,0.898,95,2.032,96,1.437,98,1.558,128,1.419,131,1.786,137,2.385,176,5.682,177,4.345,178,6.903,179,4.737,180,6.969,181,4.737,182,6.667,183,5.332,184,4.345,185,6.715,186,5.332,187,5.682,188,2.896,189,7.769,190,4.737,191,3.624,192,4.637,193,3.312,194,3.624,195,4.345,196,4.345,197,4.737,198,4.052,199,2.543,200,6.973,201,5.332,202,4.737,203,3.819,204,6.973,205,5.332,206,5.332]],["title/controllers/AppController.html",[47,1.346,207,3.842]],["body/controllers/AppController.html",[0,0.325,3,0.117,4,0.106,5,0.106,7,0.296,13,0.007,14,0.497,15,1.139,18,0.489,24,0.317,32,0.117,45,0.006,46,0.006,47,2.257,49,2.049,53,1.701,67,1.374,81,1.931,82,1.822,83,2.091,88,1.096,95,2.479,96,1.753,98,1.453,207,6.441,208,5.778,209,7.869,210,6.503,211,6.471,212,6.503,213,6.503]],["title/modules/AppModule.html",[107,1.346,214,3.583]],["body/modules/AppModule.html",[0,0.204,3,0.073,4,0.066,5,0.066,13,0.007,17,0.911,24,0.375,28,0.742,30,0.982,32,0.073,45,0.004,46,0.004,81,1.211,82,1.142,83,1.311,88,0.687,107,1.931,109,2.762,110,1.627,111,1.841,112,1.841,113,1.749,114,2.973,115,1.749,118,2.62,119,1.59,120,1.794,122,1.841,125,2.553,191,2.772,214,7.273,215,3.624,216,3.624,217,5.794,218,5.794,219,5.794,220,5.794,221,5.794,222,5.794,223,5.794,224,5.499,225,5.246,226,5.794,227,5.499,228,5.499,229,4.079,230,3.624,231,3.624,232,2.921,233,4.079,234,5.806,235,4.079,236,3.624,237,4.079,238,3.624,239,3.465,240,3.624,241,3.324,242,3.624,243,4.158,244,4.079,245,4.079,246,4.079,247,4.079,248,4.079,249,4.079,250,4.413,251,4.079,252,4.079,253,3.1,254,4.079,255,4.079,256,4.079,257,3.624,258,3.624,259,4.079,260,4.079,261,4.079,262,2.19,263,3.624]],["title/injectables/AppService.html",[128,0.959,211,3.583]],["body/injectables/AppService.html",[0,0.34,3,0.122,4,0.111,5,0.111,7,0.31,13,0.007,14,0.511,18,0.512,24,0.273,32,0.122,45,0.006,46,0.006,53,1.749,67,1.439,88,1.148,98,1.522,128,1.654,129,2.483,209,7.991,211,6.176,264,6.051,265,6.81,266,6.81,267,6.81]],["title/controllers/AuthController.html",[47,1.346,268,3.376]],["body/controllers/AuthController.html",[0,0.157,3,0.056,4,0.051,5,0.051,7,0.144,10,0.438,13,0.007,14,0.408,15,1.291,18,0.554,24,0.346,28,0.573,30,0.758,32,0.056,33,1.148,34,0.973,40,1.968,42,0.873,45,0.004,46,0.004,47,0.899,49,0.992,51,1.5,53,1.033,54,2.665,62,1.351,64,1.678,65,0.788,66,0.999,67,1.557,68,3.416,81,1.425,82,1.344,83,1.543,84,2.266,88,0.531,96,1.752,98,1.647,119,2.534,131,1.055,133,2.058,143,1.385,145,2.32,147,2.008,151,1.988,153,2.623,155,1.691,164,2.748,188,1.174,192,3.879,268,3.437,269,2.394,270,3.149,271,4.263,272,4.263,273,3.647,274,4.798,275,4.263,276,4.263,277,3.149,278,5.279,279,4.263,280,4.798,281,3.719,282,3.149,283,3.149,284,2.933,285,3.149,286,4.94,287,3.149,288,3.149,289,2.98,290,2.798,291,4.716,292,3.149,293,3.149,294,3.149,295,4.655,296,4.263,297,4.737,298,3.149,299,3.149,300,5.279,301,4.263,302,3.149,303,3.149,304,2.798,305,4.263,306,3.149,307,5.01,308,2.141,309,1.811,310,2.567,311,1.956,312,3.61,313,2.394,314,2.567,315,2.798,316,2.798,317,4.737,318,2.256,319,0.935,320,2.759,321,2.042,322,3.769,323,2.567,324,5.775,325,5.164,326,2.798,327,1.88,328,2.798,329,4.263,330,2.798,331,3.647,332,2.798,333,1.691,334,1.1,335,2.394,336,1.148,337,2.798,338,2.798,339,2.394,340,2.256,341,2.798,342,2.798,343,2.798,344,2.798,345,2.798,346,2.798,347,2.798,348,2.798,349,2.798,350,2.798,351,2.798,352,2.394,353,2.798,354,1.748,355,1.638,356,3.91,357,2.567,358,2.394,359,2.567,360,2.798,361,2.256,362,2.798,363,2.567,364,2.798,365,2.394,366,2.798,367,2.798,368,1.5,369,2.394,370,4.263,371,2.798,372,2.798,373,2.798,374,2.798,375,2.798]],["title/modules/AuthModule.html",[107,1.346,217,3.376]],["body/modules/AuthModule.html",[0,0.243,3,0.087,4,0.079,5,0.079,13,0.007,24,0.368,26,1.264,28,0.886,32,0.087,40,1.475,45,0.005,46,0.005,49,2.069,65,0.521,81,1.446,82,1.364,83,1.566,88,0.821,107,2.121,109,1.99,110,1.943,111,2.198,112,2.198,113,2.089,114,3.266,115,3.185,118,2.963,119,1.899,120,2.142,122,2.198,125,2.887,126,2.257,182,6.042,191,3.311,217,6.666,230,6.599,268,5.32,311,3.025,312,5.745,313,3.702,318,3.488,321,3.158,322,5.544,323,3.969,365,3.702,376,4.327,377,4.327,378,4.327,379,5.812,380,6.124,381,4.871,382,4.871,383,6.566,384,4.871,385,4.871,386,4.871,387,4.078,388,3.488,389,4.871,390,4.871,391,4.871,392,4.871,393,3.969,394,3.969,395,4.871,396,4.871]],["title/injectables/AuthService.html",[128,0.959,312,2.928]],["body/injectables/AuthService.html",[0,0.143,3,0.051,4,0.047,5,0.047,7,0.13,10,0.407,13,0.007,14,0.568,17,0.639,18,0.556,24,0.297,28,0.52,30,0.689,32,0.051,40,2.611,42,1.552,45,0.003,46,0.003,53,0.959,54,2.623,58,1.401,64,1.685,65,0.86,66,1.004,67,1.498,68,3.103,73,0.817,88,0.482,96,1.201,98,1.654,119,1.737,128,0.907,129,1.043,131,1.493,133,2.649,137,1.524,143,1.258,145,1.59,147,2.485,151,2.949,153,3.55,155,2.938,164,3.243,271,3.959,272,4.862,273,3.386,275,3.959,276,3.959,281,3.736,290,3.959,291,4.233,304,3.959,307,5.206,309,1.645,312,2.768,314,2.331,317,6.035,318,2.049,319,0.849,320,3.552,321,1.855,334,0.999,335,3.386,339,2.174,340,3.191,352,4.16,354,3.038,356,2.331,357,4.46,358,3.386,359,3.631,361,4.796,363,2.331,365,2.174,368,3.377,369,2.174,388,2.049,397,2.331,398,4.456,399,2.331,400,2.861,401,4.456,402,2.861,403,4.456,404,2.861,405,2.861,406,4.456,407,4.862,408,2.861,409,4.456,410,2.861,411,2.861,412,2.541,413,2.861,414,2.541,415,2.768,416,3.959,417,4.456,418,4.456,419,2.861,420,2.861,421,4.862,422,2.861,423,2.541,424,2.861,425,2.861,426,1.588,427,5.473,428,4.456,429,2.861,430,2.861,431,4.456,432,2.049,433,4.456,434,2.861,435,3.386,436,2.541,437,2.861,438,1.169,439,2.541,440,2.541,441,3.399,442,2.861,443,2.861,444,2.861,445,2.861,446,1.855,447,2.861,448,2.248,449,2.861,450,5.473,451,2.889,452,4.456,453,2.889,454,4.46,455,4.456,456,4.456,457,2.861,458,2.861,459,2.861,460,4.456,461,2.861]],["title/interfaces/AuthenticatedRequest.html",[336,1.719,462,3.583]],["body/interfaces/AuthenticatedRequest.html",[0,0.276,3,0.099,4,0.09,5,0.09,7,0.252,8,1.028,10,0.42,11,3.306,13,0.007,14,0.497,24,0.355,32,0.099,33,2.601,40,2.529,42,1.004,45,0.005,46,0.005,47,1.577,62,2.368,84,2.781,88,0.931,91,2.368,95,2.105,96,1.489,98,1.765,137,2.44,164,2.059,192,4.716,193,3.43,203,3.956,284,2.492,289,4.431,308,3.754,336,2.014,462,6.006,463,3.066,464,4.501,465,4.431,466,5.124,467,4.501,468,3.956,469,4.907,470,4.907,471,4.849,472,4.501,473,3.754,474,4.501,475,4.501,476,4.907,477,4.907,478,3.956,479,4.907,480,4.907,481,4.907,482,4.907,483,4.907,484,4.907,485,4.907,486,4.907,487,4.501,488,4.907]],["title/interfaces/AuthenticatedUser.html",[336,1.719,489,3.583]],["body/interfaces/AuthenticatedUser.html",[0,0.281,3,0.101,4,0.092,5,0.092,7,0.256,8,1.039,10,0.423,13,0.007,14,0.559,17,1.255,24,0.337,32,0.101,34,2.228,40,2.184,42,1.449,45,0.005,46,0.005,73,2.4,88,0.947,95,2.141,98,1.78,128,1.468,180,5.877,184,4.578,185,5.877,188,2.094,192,4.304,193,3.489,194,3.818,195,4.578,196,4.578,289,3.489,336,2.048,438,2.295,463,3.118,489,5.481,490,4.578,491,5.713,492,7.077,493,4.578,494,4.269,495,4.269,496,3.818,497,4.99,498,4.99,499,4.99,500,4.99,501,2.752,502,4.99,503,4.99,504,4.99,505,4.99]],["title/controllers/CalendarController.html",[47,1.346,506,3.376]],["body/controllers/CalendarController.html",[0,0.242,3,0.087,4,0.079,5,0.079,7,0.221,10,0.453,13,0.007,14,0.548,15,1.388,18,0.596,24,0.332,32,0.087,45,0.005,46,0.005,47,1.382,49,1.525,51,2.305,53,1.407,54,2.59,62,2.075,64,1.805,65,0.848,66,1.075,67,1.675,68,3.431,73,1.867,84,1.887,85,2.305,86,2.025,88,0.816,91,2.075,93,2.783,96,1.762,98,1.081,131,1.621,145,2.333,147,1.495,284,3.578,309,2.783,465,4.061,506,4.683,507,4.3,508,3.466,509,5.809,510,5.809,511,6.538,512,5.809,513,4.3,514,5.679,515,6.538,516,4.84,517,4.3,518,4.84,519,4.84,520,4.84,521,6.538,522,4.84,523,5.033,524,4.3,525,5.303,526,4.84,527,4.84,528,3.29,529,4.801,530,3.944,531,5.809,532,5.033,533,4.84,534,4.84,535,4.84,536,4.3,537,4.84,538,4.84,539,4.84,540,4.84,541,4.3,542,4.3]],["title/classes/CalendarModule.html",[0,0.236,243,3.376]],["body/classes/CalendarModule.html",[0,0.389,2,1.175,3,0.114,4,0.103,5,0.103,13,0.007,24,0.362,26,1.646,28,1.153,32,0.139,45,0.006,46,0.006,49,1.999,65,0.678,88,1.069,107,2.223,114,2.789,115,2.72,122,2.862,125,2.789,126,2.939,243,5.575,506,5.575,529,5.461,530,5.169,543,5.169,544,3.647,545,5.291,546,5.635,547,4.821,548,5.635,549,5.635,550,4.543]],["title/injectables/CalendarService.html",[128,0.959,529,3.057]],["body/injectables/CalendarService.html",[0,0.188,3,0.068,4,0.061,5,0.061,7,0.172,10,0.401,13,0.007,14,0.569,17,0.843,18,0.567,24,0.316,28,0.686,30,0.908,32,0.068,42,1.433,45,0.004,46,0.004,53,1.181,54,2.625,55,1.801,64,1.718,65,0.842,66,1.023,67,1.501,73,2.156,88,0.636,91,1.618,93,2.169,96,1.017,98,1.445,128,1.117,129,1.376,131,1.839,133,3.047,137,2.85,142,2.343,143,1.659,145,1.346,147,2.701,151,2.43,153,3.669,155,2.947,158,3.931,170,1.376,262,2.947,284,3.555,309,2.169,319,1.12,354,3.047,423,3.351,451,2.446,453,2.446,454,5.273,509,4.876,510,4.876,512,4.876,513,4.876,514,5.089,517,4.876,524,4.876,525,5.089,529,3.559,531,4.876,536,3.351,544,2.169,551,3.351,552,5.489,553,3.074,554,3.772,555,3.931,556,3.772,557,3.772,558,5.489,559,3.772,560,3.772,561,3.351,562,3.772,563,5.489,564,3.772,565,5.489,566,3.772,567,3.772,568,3.772,569,1.471,570,3.772,571,6.47,572,2.702,573,3.931,574,3.351,575,2.025,576,3.351,577,3.772,578,2.564,579,2.694,580,1.659,581,3.074,582,4.196,583,3.772,584,3.351,585,3.772,586,5.489,587,4.019,588,3.772,589,5.489,590,3.351]],["title/classes/CalendarTask.html",[0,0.236,544,2.71]],["body/classes/CalendarTask.html",[0,0.218,2,0.81,3,0.078,4,0.071,5,0.071,7,0.199,8,0.878,10,0.492,12,3.651,13,0.007,14,0.477,15,1.516,16,1.875,17,1.785,18,0.651,21,3.301,24,0.282,25,3.353,26,1.582,27,1.666,28,0.795,29,2.086,30,1.053,31,1.786,32,0.109,33,1.594,34,2.781,42,0.795,45,0.005,46,0.005,66,1.208,199,2.77,319,1.298,334,3.073,438,3.538,544,3.506,545,2.972,569,3.542,573,5.029,575,3.769,580,3.087,591,3.563,592,4.361,593,4.361,594,5.722,595,2.868,596,3.263,597,4.367,598,4.372,599,2.352,600,4.372,601,4.372,602,4.372,603,4.372,604,2.427,605,4.372,606,4.372,607,4.634,608,4.372,609,3.171,610,3.884,611,3.563]],["title/classes/CalendarTask-1.html",[0,0.197,170,1.438,544,2.267]],["body/classes/CalendarTask-1.html",[0,0.253,2,0.94,3,0.091,4,0.083,5,0.083,7,0.231,8,1.092,9,3.025,10,0.476,13,0.007,14,0.544,15,1.515,16,3.251,17,1.933,18,0.65,21,2.024,24,0.271,25,3.418,26,1.751,27,1.934,28,0.923,29,2.308,30,1.221,32,0.136,34,2.342,40,2.043,42,0.923,45,0.005,46,0.005,199,1.85,319,1.506,334,2.649,544,4.359,545,3.449,569,3.151,573,5.43,575,4.071,580,3.334,595,3.097,596,2.757,597,5.43,599,1.7,604,2.816,611,4.135,612,6.711,613,3.856,614,5.074,615,5.074,616,5.074,617,5.074,618,5.074,619,5.074,620,4.135,621,3.449,622,4.508]],["title/modules/CalendarTaskModule.html",[107,1.346,550,3.376]],["body/modules/CalendarTaskModule.html",[0,0.365,3,0.103,4,0.093,5,0.093,13,0.007,24,0.351,26,1.487,28,1.042,32,0.131,45,0.005,46,0.005,49,2.301,65,0.612,81,1.701,82,1.605,83,1.842,88,0.965,107,2.296,109,2.34,110,2.286,111,2.585,112,2.585,113,2.457,114,3.536,115,3.448,118,3.296,119,2.234,120,2.519,122,2.585,125,2.519,126,2.655,243,4.103,506,5.758,529,6.143,530,4.668,543,4.668,544,3.294,545,4.964,546,5.09,547,4.354,548,5.09,549,5.09,550,6.509,623,5.09,624,5.09,625,5.09]],["title/classes/CalendarUser.html",[0,0.236,597,3.376]],["body/classes/CalendarUser.html",[0,0.235,2,0.873,3,0.084,4,0.077,5,0.077,7,0.215,8,0.925,10,0.48,13,0.007,14,0.532,15,1.482,16,2.753,17,2.039,18,0.636,21,2.561,24,0.293,25,3.302,26,1.666,27,1.796,28,0.857,29,2.196,30,1.134,31,1.925,32,0.115,33,1.718,34,2.422,40,1.944,42,0.857,45,0.005,46,0.005,65,0.781,66,1.063,164,2.722,188,2.393,199,2.859,262,2.529,281,3.684,319,1.399,334,2.957,508,3.374,544,2.709,593,4.87,596,2.622,597,4.598,599,2.749,604,2.615,609,3.339,610,4.186,626,3.839,627,7.302,628,5.55,629,4.711,630,4.711,631,4.186,632,4.711,633,4.711,634,4.711,635,4.711,636,3.202,637,5.704,638,4.163,639,5.704,640,3.839,641,4.186]],["title/classes/CalendarWorkspace.html",[0,0.236,607,3.583]],["body/classes/CalendarWorkspace.html",[0,0.322,2,1.195,3,0.116,4,0.105,5,0.105,7,0.294,8,1.133,10,0.342,13,0.007,14,0.494,15,1.129,16,2.765,17,1.895,18,0.485,24,0.316,25,2.997,26,2.041,27,2.458,28,1.173,29,2.689,30,1.552,31,2.634,32,0.141,33,2.352,34,1.992,42,1.173,45,0.006,46,0.006,65,0.907,607,5.976,642,5.255,643,6.449,644,5.255,645,5.729]],["title/classes/Column.html",[0,0.236,646,2.184]],["body/classes/Column.html",[0,0.235,2,0.871,3,0.084,4,0.077,5,0.077,7,0.214,8,0.923,10,0.48,13,0.007,14,0.403,15,1.372,17,1.832,18,0.589,21,3.126,24,0.314,25,3.125,26,1.664,27,1.792,28,0.855,29,2.495,30,1.132,31,1.921,32,0.14,33,1.715,34,2.42,41,3.833,42,0.855,45,0.005,46,0.005,65,0.78,168,3.445,199,2.66,262,4.206,319,1.396,334,2.956,501,3.141,579,2.796,596,2.98,599,2.625,637,5.696,646,3.38,647,3.367,648,5.225,649,5.573,650,4.531,651,4.702,652,4.702,653,4.702,654,4.702,655,3.574,656,3.196,657,3.574,658,3.196,659,3.049,660,4.873,661,4.873,662,4.358,663,3.832,664,2.92,665,3.574]],["title/classes/Column-1.html",[0,0.197,170,1.438,646,1.827]],["body/classes/Column-1.html",[0,0.248,2,0.918,3,0.089,4,0.081,5,0.081,7,0.226,8,0.957,10,0.48,13,0.007,14,0.417,15,1.401,17,1.865,18,0.602,21,3.194,24,0.321,25,3.182,26,1.724,27,1.888,28,0.901,29,2.272,30,1.193,31,2.024,32,0.134,33,1.807,34,2.472,41,3.825,42,0.901,45,0.005,46,0.005,65,0.801,168,3.52,199,2.732,262,4.022,319,1.471,334,2.32,446,4.307,501,3.254,596,3.06,599,2.681,646,3.078,648,5.366,649,5.674,650,4.653,655,3.765,658,4.514,662,4.514,664,3.077,665,3.765,666,3.765,667,4.954,668,4.954,669,5.191,670,4.954,671,4.954,672,4.954,673,5.9]],["title/classes/Column-2.html",[0,0.197,646,1.827,674,2.996]],["body/classes/Column-2.html",[0,0.24,2,0.889,3,0.086,4,0.078,5,0.078,7,0.219,8,0.936,10,0.477,13,0.007,14,0.409,15,1.383,17,1.845,18,0.594,21,3.153,24,0.317,25,3.147,26,1.687,27,1.829,28,0.873,29,2.224,30,1.155,31,1.961,32,0.142,33,1.75,34,2.441,41,3.798,42,1.182,45,0.005,46,0.005,65,0.788,168,3.475,199,2.688,239,2.865,262,3.958,319,1.425,334,2.974,501,3.185,579,2.82,596,3.012,599,2.647,646,3.013,648,5.28,649,5.613,650,4.579,657,3.648,658,3.262,659,3.112,660,4.941,661,4.941,662,4.419,664,2.981,665,4.941,675,3.648,676,4.8,677,4.8,678,4.8,679,4.8,680,4.264,681,3.262]],["title/controllers/ColumnController.html",[47,1.346,682,3.204]],["body/controllers/ColumnController.html",[0,0.298,3,0.107,4,0.097,5,0.097,7,0.272,10,0.317,12,3.897,13,0.007,14,0.568,15,1.044,18,0.448,24,0.329,32,0.107,45,0.006,46,0.006,47,1.704,49,1.88,51,2.841,53,1.613,55,2.688,62,2.558,64,1.358,65,0.946,66,0.809,67,1.26,81,1.771,82,1.671,83,1.918,84,2.326,85,2.841,88,1.005,95,2.274,96,1.608,98,1.333,137,2.563,646,2.764,682,5.093,683,5.3,684,4.055,685,4.534,686,6.657,687,5.966,688,4.889,689,4.862,690,4.534,691,5.3,692,5.3,693,4.862,694,5.3]],["title/controllers/ColumnController-1.html",[47,1.126,170,1.438,682,2.68]],["body/controllers/ColumnController-1.html",[0,0.293,3,0.105,4,0.096,5,0.096,7,0.267,10,0.311,12,3.853,13,0.007,14,0.565,15,1.026,18,0.44,24,0.326,32,0.105,45,0.006,46,0.006,47,1.673,49,1.846,51,2.791,53,1.595,54,2.412,55,2.666,58,2.871,62,2.513,64,1.334,65,0.941,66,0.794,67,1.238,81,1.74,82,1.641,83,1.884,84,2.285,85,2.791,88,0.987,95,2.233,96,1.58,98,1.309,137,2.534,646,2.715,682,5.036,684,3.983,685,4.453,686,6.582,688,4.849,689,4.775,690,4.453,691,5.206,692,5.206,693,4.775,694,5.206,695,5.206,696,5.86,697,5.206]],["title/classes/ColumnGateway.html",[0,0.236,698,2.928]],["body/classes/ColumnGateway.html",[0,0.309,2,1.147,3,0.111,4,0.101,5,0.101,7,0.282,8,1.104,10,0.407,13,0.007,14,0.523,15,1.084,17,1.383,18,0.576,24,0.308,32,0.111,45,0.006,46,0.006,53,1.65,64,1.409,65,0.662,66,0.839,67,1.308,426,4.833,698,4.762,699,5.499,700,4.742,701,6.812,702,4.972,703,6.19,704,6.812,705,6.19,706,3.844,707,3.032,708,4.576,709,3.559,710,3.559,711,3.844,712,4.207]],["title/classes/ColumnGateway-1.html",[0,0.197,170,1.438,698,2.449]],["body/classes/ColumnGateway-1.html",[0,0.309,2,1.147,3,0.111,4,0.101,5,0.101,7,0.282,8,1.104,10,0.407,13,0.007,14,0.523,15,1.084,17,1.383,18,0.576,24,0.308,32,0.111,45,0.006,46,0.006,53,1.65,64,1.409,65,0.662,66,0.839,67,1.308,426,4.833,698,4.762,700,4.742,701,6.812,702,4.972,704,6.812,706,3.844,707,3.032,708,4.576,709,3.559,710,3.559,711,3.844,712,4.207,713,5.499,714,6.19,715,6.19]],["title/modules/ColumnModule.html",[107,1.346,239,2.813]],["body/modules/ColumnModule.html",[0,0.261,3,0.094,4,0.085,5,0.085,13,0.007,24,0.362,26,2.205,28,0.95,32,0.094,41,2.24,45,0.005,46,0.005,49,2.168,65,0.908,81,1.551,82,1.463,83,1.679,88,0.88,107,2.196,109,2.134,110,2.084,111,2.357,112,2.357,113,2.24,114,3.382,115,3.298,118,3.104,119,2.036,120,2.297,122,2.357,125,2.297,126,3.188,239,5.307,646,2.42,655,3.97,664,4.777,682,5.228,688,5.579,689,4.257,698,4.273,716,4.64,717,4.64,718,4.64,719,5.223,720,5.223,721,5.228,722,3.741,723,5.228,724,5.223,725,4.257,726,4.257,727,6.111,728,6.111,729,5.223]],["title/injectables/ColumnService.html",[128,0.959,688,2.813]],["body/injectables/ColumnService.html",[0,0.239,3,0.086,4,0.078,5,0.078,7,0.218,10,0.345,12,3.376,13,0.007,14,0.535,18,0.488,24,0.341,28,0.871,29,1.638,30,1.153,32,0.086,41,3.539,42,1.181,45,0.005,46,0.005,53,1.397,54,2.187,55,2.417,64,1.478,65,0.97,66,0.88,67,1.012,73,1.368,88,0.807,96,1.985,98,1.07,128,1.321,129,1.747,131,2.175,133,3.731,137,2.221,142,2.975,143,2.106,145,2.628,147,2.439,151,2.221,153,2.929,155,2.571,258,4.255,262,2.571,309,2.754,432,3.43,501,2.346,646,4.032,648,3.43,649,5.006,655,3.64,685,4.934,688,3.875,690,3.64,698,5.404,706,2.975,725,3.903,730,4.255,731,4.255,732,6.002,733,4.79,734,5.768,735,4.79,736,4.255,737,4.255,738,3.64,739,4.255,740,4.255,741,3.64,742,4.255,743,4.255,744,4.255,745,4.255,746,4.255,747,3.64,748,4.79,749,4.255]],["title/injectables/ColumnService-1.html",[128,0.802,170,1.438,688,2.353]],["body/injectables/ColumnService-1.html",[0,0.23,3,0.083,4,0.075,5,0.075,7,0.21,10,0.336,12,4.04,13,0.007,14,0.528,18,0.475,24,0.337,28,0.838,29,1.576,30,1.109,32,0.083,41,3.606,42,1.313,45,0.005,46,0.005,53,1.361,54,2.143,55,2.369,64,1.439,65,0.962,66,0.857,67,0.974,73,1.806,88,0.777,96,1.946,98,1.029,128,1.287,129,1.68,131,2.118,133,3.693,137,2.163,142,2.862,143,2.026,145,2.576,147,2.4,151,2.163,153,3.257,155,2.474,262,2.474,309,2.649,319,1.368,432,3.3,501,2.257,646,3.772,648,3.3,649,4.907,680,4.094,685,4.806,688,3.774,690,3.502,698,5.35,706,2.862,725,3.755,731,4.094,732,5.883,734,5.618,736,4.094,737,4.094,738,3.502,739,4.094,740,4.094,741,4.806,742,4.094,743,5.618,744,4.094,745,4.094,746,4.094,747,3.502,749,4.094,750,4.094,751,4.608,752,4.608,753,4.608,754,3.755,755,3.502,756,4.608,757,7.219,758,4.094,759,3.755]],["title/classes/Comment.html",[0,0.236,609,2.452]],["body/classes/Comment.html",[0,0.25,2,0.928,3,0.09,4,0.082,5,0.082,7,0.228,8,0.964,10,0.486,11,3.491,13,0.007,14,0.505,15,1.467,17,1.966,18,0.63,21,3.343,24,0.268,25,3.285,26,1.736,27,1.909,28,0.911,29,2.288,30,1.205,31,2.046,32,0.12,33,1.826,34,2.662,40,2.026,42,0.911,45,0.005,46,0.005,66,1.09,199,2.747,319,1.487,334,3.011,569,3.486,579,2.387,596,3.284,599,2.241,609,3.479,760,4.081,761,4.044,762,4.463,763,4.496,764,4.993,765,5.008,766,5.008,767,5.008,768,5.008,769,5.008,770,5.008,771,3.587,772,4.081,773,3.806,774,4.449]],["title/controllers/CommentController.html",[47,1.346,775,3.583]],["body/controllers/CommentController.html",[0,0.232,3,0.083,4,0.076,5,0.076,7,0.211,10,0.466,11,2.148,13,0.007,14,0.599,15,1.364,18,0.585,24,0.255,32,0.083,45,0.005,46,0.005,47,1.324,49,1.461,51,2.208,53,1.367,62,3.105,64,1.773,65,0.833,66,1.056,67,1.645,81,1.376,82,1.298,83,1.491,84,3.425,85,2.208,86,1.94,88,0.781,95,1.767,96,1.25,98,1.74,465,4.838,761,3.409,763,5.38,775,4.826,776,4.119,777,4.636,778,6.433,779,6.433,780,6.433,781,5.641,782,4.119,783,4.636,784,4.636,785,6.866,786,6.349,787,4.636,788,4.636,789,6.349,790,4.636,791,4.119,792,4.636,793,4.636,794,4.696,795,3.778,796,4.636,797,6.433,798,4.636,799,6.349,800,4.636,801,6.349,802,4.636,803,4.636,804,4.636,805,4.636]],["title/classes/CommentGateway.html",[0,0.236,806,3.842]],["body/classes/CommentGateway.html",[0,0.205,2,0.759,3,0.073,4,0.067,5,0.067,7,0.187,8,0.838,10,0.472,11,2.697,13,0.007,14,0.535,15,1.292,18,0.586,24,0.272,26,1.062,32,0.073,42,1.059,45,0.004,46,0.004,53,1.253,54,2.573,64,1.679,65,0.789,66,1,67,1.431,68,3.139,86,1.713,95,1.56,96,1.103,98,1.513,131,1.371,147,1.264,151,2.317,368,1.949,426,4.496,441,2.542,465,5.031,579,2.077,609,4.429,621,2.782,700,4.213,702,4.043,708,3.474,709,2.353,710,2.353,711,2.542,747,3.111,761,3.125,763,4.043,785,5.52,794,5.252,795,3.336,806,4.744,807,3.637,808,6.774,809,6.774,810,6.774,811,4.093,812,5.821,813,4.093,814,5.821,815,4.093,816,4.093,817,5.821,818,4.093,819,4.093,820,5.821,821,4.093,822,3.336,823,5.607,824,4.093,825,4.093,826,6.774,827,5.821,828,5.821,829,4.093,830,4.093,831,3.637,832,6.774,833,4.093,834,5.821,835,2.654,836,4.093,837,3.111,838,4.093,839,4.093,840,4.093,841,4.093,842,4.093,843,2.782]],["title/modules/CommentModule.html",[107,1.346,218,3.376]],["body/modules/CommentModule.html",[0,0.284,3,0.102,4,0.093,5,0.093,13,0.007,24,0.358,26,1.886,28,1.034,32,0.102,45,0.005,46,0.005,49,2.291,65,0.777,81,1.688,82,1.593,83,1.828,88,0.958,107,2.288,109,2.323,110,2.269,111,2.566,112,2.566,113,2.438,114,3.523,115,3.436,118,3.28,119,2.217,120,2.501,122,2.566,125,2.501,126,2.635,218,6.498,579,2.029,609,2.957,656,3.865,773,5.525,775,6.089,794,6.137,795,4.634,844,5.052,845,5.052,846,5.052,847,5.686,848,5.052,849,5.686,850,4.179,851,5.686,852,3.865]],["title/injectables/CommentService.html",[128,0.959,794,3.057]],["body/injectables/CommentService.html",[0,0.16,3,0.057,4,0.052,5,0.052,7,0.146,10,0.394,11,3.841,13,0.007,14,0.586,18,0.557,24,0.283,28,0.581,30,0.77,32,0.057,42,1.348,45,0.004,46,0.004,53,1.045,54,2.615,55,1.925,58,1.566,59,1.663,64,1.688,65,0.793,66,1.076,67,1.488,68,3.264,73,1.871,86,2.031,88,0.539,96,1.308,98,1.574,128,0.988,129,1.166,131,1.626,133,3.304,142,1.986,143,1.406,145,1.732,147,2.721,151,2.635,153,3.582,155,3.15,309,1.838,319,0.949,333,1.717,334,1.117,368,1.523,432,2.29,441,1.986,454,4.781,555,4.202,569,1.892,579,2.646,581,2.606,593,4.069,609,4.581,621,2.173,681,2.173,754,4.781,761,3.781,762,1.775,763,4.204,778,4.312,779,4.312,780,4.312,781,4.312,782,4.312,785,3.956,791,4.312,794,3.148,831,4.312,843,2.173,848,2.841,853,2.841,854,3.197,855,3.197,856,4.854,857,3.197,858,3.299,859,3.373,860,3.197,861,1.838,862,4.854,863,3.197,864,4.854,865,6.551,866,3.197,867,3.197,868,3.197,869,2.606,870,3.197,871,5.867,872,3.197,873,3.197,874,3.197,875,3.197,876,3.197,877,3.197,878,4.854,879,3.197,880,3.197,881,3.197,882,3.197,883,3.197,884,4.854,885,4.854,886,4.854,887,4.854,888,3.197,889,4.854,890,4.312,891,4.854,892,4.854,893,4.854,894,3.197,895,3.197,896,3.197,897,2.841,898,3.197,899,3.197,900,3.197,901,2.841,902,3.197,903,3.197]],["title/classes/Commitment.html",[0,0.236,904,3.376]],["body/classes/Commitment.html",[0,0.216,2,0.8,3,0.077,4,0.07,5,0.07,7,0.197,8,0.87,9,2.782,10,0.477,13,0.007,14,0.542,15,1.536,16,1.85,17,1.558,18,0.659,21,2.411,24,0.242,25,3.455,26,1.568,27,1.645,28,0.785,29,2.066,30,1.039,31,1.763,32,0.125,33,1.574,34,2.153,40,1.829,42,0.785,45,0.005,46,0.005,66,1.17,188,2.815,199,2.542,319,1.281,334,1.507,438,3.366,569,2.945,575,3.743,580,3.066,592,4.33,595,2.848,596,2.468,599,2.76,604,3.354,650,4.33,658,2.933,659,2.798,904,4.327,905,3.28,906,4.739,907,5.156,908,5.681,909,4.521,910,4.315,911,4.315,912,4.315,913,4.315,914,4.315,915,4.315,916,5.299,917,5.694,918,5.299,919,6.042,920,4.315,921,5.694,922,4.315,923,4.315,924,3.834,925,3.834,926,3.834,927,3.28,928,3.834]],["title/interfaces/CommitmentQuery.html",[336,1.719,929,3.583]],["body/interfaces/CommitmentQuery.html",[0,0.21,3,0.075,4,0.068,5,0.068,7,0.191,8,0.854,10,0.446,13,0.007,14,0.575,24,0.328,32,0.075,42,0.763,45,0.004,46,0.004,47,1.199,54,2.492,59,2.183,62,2.541,66,1.198,71,2.853,73,2.247,75,2.413,84,2.31,85,1.999,86,1.756,88,0.707,91,1.8,93,2.413,95,1.6,96,1.131,97,2.607,98,1.825,105,2.607,137,2.871,151,2.871,284,3.099,308,2.853,336,1.531,463,2.33,491,2.853,495,3.19,496,2.853,523,2.853,528,2.853,575,2.253,578,5.349,592,4.888,764,2.607,906,2.853,907,2.722,909,5.103,929,5.22,930,3.19,931,6.655,932,5.103,933,5.671,934,5.671,935,3.19,936,3.19,937,3.68,938,3.19,939,3.842,940,4.504,941,4.028,942,3.729,943,3.19,944,3.729,945,3.729,946,3.19,947,3.19,948,2.853,949,3.19,950,3.006,951,3.729,952,3.006,953,3.421,954,3.729,955,3.729,956,3.729,957,3.421,958,3.19,959,3.729,960,3.729,961,3.421,962,3.729,963,3.729,964,3.729,965,3.729,966,3.729,967,3.729,968,3.729,969,3.729,970,3.729,971,3.729,972,3.729,973,3.421,974,3.19,975,3.729,976,3.729,977,3.729,978,3.729]],["title/controllers/CommitmentsController.html",[47,1.346,952,3.376]],["body/controllers/CommitmentsController.html",[0,0.174,3,0.063,4,0.057,5,0.057,7,0.159,10,0.442,13,0.007,14,0.573,15,1.389,18,0.596,24,0.308,32,0.063,42,0.635,45,0.004,46,0.004,47,0.997,49,1.101,51,1.663,53,1.116,54,2.744,55,1.702,58,2.541,59,3.218,62,2.653,64,1.806,65,0.848,66,1.076,67,1.677,71,3.525,73,2.42,74,1.939,75,2.008,77,2.008,81,1.037,82,0.978,83,1.123,84,2.022,85,1.663,86,1.461,88,0.589,91,1.498,93,2.008,95,1.331,96,0.941,97,2.169,98,1.712,105,2.169,137,3.036,151,2.714,284,3.459,308,2.374,336,1.274,491,2.374,495,2.654,496,2.374,523,2.374,528,2.374,575,1.875,578,3.525,592,3.221,764,2.169,906,2.374,907,2.265,909,3.363,929,5.204,930,2.654,931,5.58,932,3.363,933,3.942,934,3.942,935,2.654,936,2.654,937,3.221,938,2.654,939,4.44,940,3.942,941,4.654,942,3.103,943,2.654,944,3.103,945,3.103,946,2.654,947,2.654,948,2.374,949,2.654,950,2.501,951,3.103,952,3.715,953,2.846,954,3.103,955,3.103,956,3.103,957,4.227,958,2.654,959,3.103,960,3.103,961,2.846,962,3.103,963,3.103,964,3.103,965,3.103,966,3.103,967,3.103,968,4.608,969,3.103,970,3.103,971,3.103,972,3.103,973,2.846,974,2.654,975,3.103,976,4.608,977,3.103,978,3.103,979,3.103,980,4.227,981,4.227,982,3.715,983,3.103,984,3.493,985,3.493,986,3.493,987,2.265,988,3.493,989,3.493,990,3.493,991,3.493,992,3.493,993,3.493,994,3.493,995,3.493,996,3.493]],["title/injectables/CommitmentsCron.html",[128,0.959,997,3.376]],["body/injectables/CommitmentsCron.html",[0,0.278,3,0.1,4,0.091,5,0.091,7,0.254,8,1.032,10,0.295,13,0.007,15,0.974,18,0.596,24,0.318,32,0.1,42,1.012,45,0.005,46,0.005,53,1.543,54,2.354,64,1.266,65,0.595,66,0.754,67,1.175,88,0.937,95,2.12,96,2.258,128,1.459,129,2.029,131,1.864,145,2.83,147,2.214,151,1.903,232,3.984,451,3.607,453,3.607,599,1.864,937,5.202,938,4.228,953,5.841,979,4.942,980,4.533,997,5.133,998,4.942,999,7.44,1000,8.375,1001,5.563,1002,7.167,1003,7.167,1004,5.563,1005,3.455,1006,7.167,1007,6.368,1008,4.942,1009,4.942,1010,5.563,1011,5.563,1012,4.942,1013,4.942,1014,5.563,1015,5.563,1016,5.563,1017,7.167,1018,5.563]],["title/classes/CommitmentsGateway.html",[0,0.236,1019,3.376]],["body/classes/CommitmentsGateway.html",[0,0.242,2,0.899,3,0.087,4,0.079,5,0.079,7,0.221,8,0.943,10,0.463,13,0.007,14,0.499,15,1.146,17,1.084,18,0.623,24,0.263,32,0.087,45,0.005,46,0.005,53,1.409,54,2.201,64,1.806,65,0.848,66,1.076,67,1.677,68,2.247,151,1.659,426,4.405,465,4.067,700,4.441,702,4.424,706,3.012,707,3.888,708,3.908,709,2.789,710,2.789,711,3.012,712,3.297,747,4.976,822,3.952,823,4.976,861,4.262,1019,4.689,1020,4.309,1021,6.547,1022,6.547,1023,6.547,1024,4.85,1025,6.547,1026,4.85,1027,6.547,1028,9.174,1029,4.85,1030,7.363,1031,6.547,1032,4.85,1033,4.85,1034,6.547,1035,4.85,1036,4.85,1037,4.85,1038,6.547,1039,4.85,1040,7.412,1041,4.85,1042,4.85,1043,4.85,1044,4.85,1045,4.85,1046,4.85]],["title/modules/CommitmentsModule.html",[107,1.346,219,3.376]],["body/modules/CommitmentsModule.html",[0,0.274,3,0.098,4,0.089,5,0.089,13,0.007,24,0.366,26,1.423,28,0.997,32,0.098,45,0.005,46,0.005,49,2.238,65,0.586,81,1.628,82,1.536,83,1.763,88,0.924,107,2.249,109,2.24,110,2.188,111,2.474,112,2.474,113,2.352,114,3.463,115,3.377,118,3.204,119,2.138,120,2.411,122,2.474,125,2.411,126,2.541,219,6.6,231,4.872,232,3.927,263,4.872,904,3.927,927,5.397,937,5.848,938,4.168,952,5.64,997,6.331,1019,5.086,1047,4.872,1048,4.872,1049,4.872,1050,5.484,1051,4.168,1052,5.484,1053,4.872,1054,5.484,1055,5.484]],["title/injectables/CommitmentsService.html",[128,0.959,937,2.928]],["body/injectables/CommitmentsService.html",[0,0.115,3,0.041,4,0.037,5,0.037,7,0.105,9,0.916,10,0.399,13,0.007,14,0.533,17,1.438,18,0.55,24,0.272,28,0.417,30,0.552,32,0.041,42,1.541,45,0.003,46,0.003,53,0.805,54,2.62,55,1.552,57,2.424,58,1.831,59,2.459,64,1.61,65,0.756,66,0.959,67,1.495,68,2.191,70,2.424,73,1.838,74,2.075,77,2.149,86,0.96,88,0.387,91,0.984,93,1.319,96,1.008,98,1.681,128,0.761,129,0.837,131,1.252,133,2.338,137,2.573,142,1.425,143,1.009,145,1.334,147,2.185,151,2.686,153,1.035,155,1.232,170,1.725,199,2.58,284,2.46,333,1.232,354,1.274,355,3.347,438,2.452,465,2.322,501,2.317,541,3.321,542,3.321,569,0.895,572,1.643,574,2.039,575,2.539,576,3.321,578,2.541,580,1.644,592,2.322,595,0.937,599,0.769,638,1.488,764,2.322,904,2.677,906,3.706,907,3.536,908,1.87,909,3.067,917,1.643,921,1.643,926,2.039,931,1.87,932,1.488,937,2.322,939,3.536,940,2.841,941,3.706,947,2.841,948,2.541,949,2.841,950,3.387,961,1.87,980,4.443,981,1.87,982,3.387,983,3.321,987,2.424,1005,1.425,1012,4.844,1019,3.905,1051,1.744,1053,2.039,1056,2.039,1057,3.738,1058,2.295,1059,4.729,1060,2.295,1061,3.738,1062,2.295,1063,2.295,1064,2.295,1065,2.295,1066,3.738,1067,2.295,1068,3.738,1069,2.295,1070,2.295,1071,2.295,1072,2.295,1073,2.295,1074,4.202,1075,4.202,1076,4.729,1077,4.729,1078,4.729,1079,4.729,1080,5.338,1081,2.295,1082,2.295,1083,5.561,1084,2.295,1085,2.295,1086,3.738,1087,3.321,1088,3.321,1089,1.744,1090,1.744,1091,3.738,1092,2.295,1093,2.295,1094,1.643,1095,3.738,1096,2.295,1097,3.738,1098,2.295,1099,2.295,1100,6.436,1101,3.738,1102,2.039,1103,5.452,1104,3.321,1105,3.738,1106,2.295,1107,3.738,1108,2.295,1109,3.738,1110,2.295,1111,2.295,1112,6.003,1113,2.295,1114,3.738,1115,2.295,1116,2.295,1117,2.295,1118,2.295,1119,5.452,1120,2.295,1121,2.295,1122,2.295,1123,2.295,1124,2.295,1125,2.295,1126,5.452,1127,3.738,1128,3.738,1129,4.729,1130,4.729,1131,2.295,1132,1.744,1133,2.295,1134,3.738,1135,2.295,1136,2.295,1137,2.295,1138,1.643,1139,4.729,1140,3.738,1141,2.295,1142,3.738,1143,2.295,1144,3.738,1145,2.295,1146,2.295,1147,2.295,1148,2.295,1149,2.295]],["title/interfaces/CompoDocConfig.html",[336,1.719,1150,3.376]],["body/interfaces/CompoDocConfig.html",[0,0.062,3,0.04,4,0.036,5,0.103,7,0.057,8,0.43,10,0.423,13,0.007,14,0.461,17,0.668,24,0.167,32,0.022,42,1.15,45,0.002,46,0.002,54,1.583,55,0.981,65,0.133,66,1.189,82,2.022,84,0.484,96,0.335,98,1.257,110,0.495,119,1.165,131,0.416,137,1.577,145,2.257,147,1.284,151,2.092,153,1.348,168,0.972,170,1.322,188,3.389,194,0.844,198,3.16,253,4.276,336,1.09,355,1.886,368,0.591,438,1.481,441,0.771,446,0.805,448,0.626,451,2.989,453,2.696,463,0.689,501,3.098,569,0.862,580,0.546,582,3.817,587,0.771,599,1.215,646,1.385,684,0.844,700,0.646,707,1.776,755,2.271,761,2.232,771,0.889,859,0.714,932,1.434,982,3.578,1080,1.503,1083,0.944,1089,3.16,1090,0.944,1094,1.583,1138,1.583,1150,2.14,1151,0.741,1152,0.805,1153,0.944,1154,2.955,1155,2.955,1156,2.955,1157,2.955,1158,2.955,1159,2.955,1160,2.955,1161,2.955,1162,2.955,1163,2.955,1164,2.955,1165,2.955,1166,2.955,1167,2.955,1168,2.955,1169,2.955,1170,2.955,1171,2.955,1172,2.955,1173,2.955,1174,2.955,1175,2.955,1176,2.955,1177,3.389,1178,1.503,1179,1.802,1180,1.012,1181,2.435,1182,1.802,1183,0.805,1184,1.802,1185,0.944,1186,1.373,1187,5.147,1188,0.944,1189,1.373,1190,2.14,1191,0.944,1192,1.373,1193,0.844,1194,0.944,1195,1.68,1196,2.978,1197,1.802,1198,0.944,1199,4.529,1200,0.844,1201,1.012,1202,0.805,1203,3.389,1204,1.802,1205,1.802,1206,1.012,1207,2.271,1208,4.381,1209,1.583,1210,1.012,1211,1.802,1212,1.012,1213,0.944,1214,1.68,1215,1.012,1216,0.844,1217,1.012,1218,2.14,1219,1.68,1220,0.844,1221,0.844,1222,1.012,1223,0.889,1224,0.944,1225,1.012,1226,1.012,1227,1.012,1228,1.012,1229,2.435,1230,1.012,1231,1.802,1232,2.435,1233,1.012,1234,1.012,1235,0.944,1236,3.16,1237,1.802,1238,0.889,1239,5.306,1240,5.973,1241,2.435,1242,2.435,1243,1.012,1244,5.487,1245,1.68,1246,1.012,1247,0.944,1248,1.012,1249,1.012,1250,0.944,1251,1.012,1252,0.944,1253,0.944,1254,2.435,1255,2.435,1256,2.435,1257,4.072,1258,3.756,1259,4.072,1260,4.807,1261,3.756,1262,2.955,1263,5.3,1264,2.955,1265,5.397,1266,2.756,1267,3.797,1268,3.797,1269,3.756,1270,2.955,1271,4.797,1272,4.072,1273,5.397,1274,3.389,1275,1.012,1276,1.802,1277,1.012,1278,3.389,1279,1.012,1280,2.435,1281,1.012,1282,4.585,1283,1.012,1284,1.802,1285,2.435,1286,1.012,1287,2.435,1288,1.802,1289,1.012,1290,2.955,1291,2.435,1292,1.012,1293,1.802,1294,1.012,1295,1.012,1296,1.012,1297,1.012,1298,3.797,1299,1.012,1300,0.944,1301,1.012,1302,2.435,1303,1.012,1304,2.271,1305,1.012,1306,2.271,1307,1.012,1308,2.435,1309,1.012,1310,2.435,1311,2.271,1312,1.012,1313,1.012,1314,1.012,1315,2.271,1316,1.012,1317,1.012,1318,1.503,1319,1.802,1320,2.435,1321,0.944,1322,1.802,1323,1.012,1324,1.012,1325,2.271,1326,3.503,1327,1.012,1328,1.802,1329,1.802,1330,0.944,1331,3.756,1332,1.012,1333,2.756,1334,1.802,1335,1.802,1336,1.012,1337,1.012,1338,1.012,1339,0.944,1340,1.012,1341,1.012,1342,1.012,1343,4.345,1344,1.012,1345,1.012,1346,1.802,1347,1.012,1348,1.012,1349,1.012,1350,1.012,1351,1.012,1352,1.012,1353,1.012,1354,1.012,1355,1.012,1356,1.012,1357,1.012,1358,1.012,1359,1.012,1360,1.012,1361,0.844,1362,1.012,1363,1.802,1364,1.012,1365,1.012,1366,1.012,1367,1.012,1368,1.012,1369,1.012,1370,1.012,1371,1.012,1372,1.012,1373,1.012,1374,1.012,1375,4.797,1376,1.012,1377,0.944,1378,1.012,1379,1.012,1380,1.012,1381,0.944,1382,1.012,1383,1.012,1384,1.012,1385,1.012,1386,3.389,1387,1.012,1388,1.012,1389,2.435,1390,1.802,1391,1.012,1392,4.994,1393,1.012,1394,2.955,1395,3.756,1396,1.012,1397,1.012,1398,0.805,1399,2.435,1400,1.012,1401,1.012,1402,1.012,1403,1.012,1404,1.012,1405,0.944,1406,1.012,1407,2.955,1408,1.012,1409,1.012,1410,1.012,1411,1.802,1412,1.012,1413,0.944,1414,1.012,1415,1.583,1416,0.944,1417,1.012,1418,0.771,1419,1.012,1420,1.012,1421,1.012,1422,1.012,1423,1.012,1424,1.373,1425,1.012,1426,1.012,1427,0.844,1428,1.012,1429,2.435,1430,1.012,1431,1.012,1432,1.012,1433,1.012,1434,1.012,1435,1.012,1436,1.012,1437,1.012,1438,1.012,1439,0.805,1440,1.012,1441,1.012,1442,1.012,1443,1.802,1444,1.012,1445,1.012,1446,1.802,1447,1.012,1448,1.012,1449,1.012,1450,1.012,1451,1.012,1452,1.012,1453,0.944,1454,1.012,1455,1.012,1456,1.012,1457,0.944,1458,1.012,1459,1.012,1460,1.012,1461,1.012,1462,0.889,1463,0.889,1464,0.944,1465,1.012,1466,2.597,1467,0.844,1468,0.944,1469,1.012,1470,1.012,1471,1.012,1472,1.012,1473,1.68,1474,1.012,1475,1.802,1476,1.012,1477,2.756,1478,1.012,1479,1.012,1480,1.802,1481,1.012,1482,1.012,1483,1.012,1484,1.802,1485,1.012,1486,1.012,1487,1.012,1488,1.503,1489,1.012,1490,0.944,1491,0.944,1492,0.944,1493,0.944,1494,0.944,1495,0.944,1496,1.012,1497,1.012,1498,1.012,1499,1.012,1500,1.012,1501,1.012]],["title/classes/CreateActivityDto.html",[0,0.236,61,3.204]],["body/classes/CreateActivityDto.html",[0,0.374,2,1.103,3,0.107,4,0.097,5,0.097,7,0.271,8,1.078,9,3.265,10,0.456,13,0.007,14,0.582,15,1.503,18,0.645,24,0.239,32,0.107,45,0.006,46,0.006,61,5.085,66,1.164,580,3.598,595,3.342,1502,7.859,1503,4.849,1504,7.27,1505,7.481,1506,5.95,1507,5.692,1508,5.95,1509,5.95,1510,5.95,1511,5.562,1512,3.002]],["title/classes/CreateCommentDto.html",[0,0.236,1513,3.842]],["body/classes/CreateCommentDto.html",[0,0.331,2,1.226,3,0.119,4,0.108,5,0.108,7,0.302,8,1.15,10,0.455,11,3.975,13,0.007,14,0.582,18,0.645,32,0.119,45,0.006,46,0.006,761,4.605,763,5.119,1513,6.508,1514,7.914,1515,5.391,1516,6.615,1517,5.877,1518,6.615]],["title/classes/CreateCommitmentDto.html",[0,0.236,939,3.057]],["body/classes/CreateCommitmentDto.html",[0,0.331,2,0.914,3,0.088,4,0.08,5,0.08,7,0.225,8,0.954,9,2.983,10,0.465,13,0.007,14,0.578,15,1.535,18,0.659,24,0.266,32,0.088,34,2.046,45,0.005,46,0.005,66,1.236,368,2.349,569,1.923,575,4.014,580,3.287,592,4.643,595,3.405,908,6.092,909,4.848,916,5.033,917,5.723,918,6.073,921,5.354,939,4.294,1051,3.749,1511,5.959,1512,2.488,1519,7.917,1520,4.02,1521,6.622,1522,4.933,1523,4.933,1524,7.476,1525,4.933,1526,4.933,1527,4.933,1528,4.933,1529,4.383,1530,4.933,1531,4.933,1532,4.933,1533,5.033,1534,4.383,1535,6.642,1536,4.383,1537,4.933,1538,4.383]],["title/classes/CreateMeetingDto.html",[0,0.236,471,3.204]],["body/classes/CreateMeetingDto.html",[0,0.343,2,0.779,3,0.075,4,0.069,5,0.069,7,0.192,8,0.855,9,3.714,10,0.455,13,0.007,14,0.539,15,1.431,17,1.668,18,0.614,24,0.276,32,0.075,34,2.787,45,0.004,46,0.004,66,1.012,188,2.212,327,2.51,438,3.05,448,3.468,471,4.033,569,3.07,595,3.217,754,4.835,759,4.835,1488,4.033,1507,4.638,1511,4.673,1512,2.121,1533,5.675,1536,5.271,1539,7.461,1540,3.736,1541,5.225,1542,5.225,1543,6.108,1544,5.853,1545,5.933,1546,5.933,1547,5.933,1548,6.226,1549,4.205,1550,4.205,1551,5.271,1552,5.933,1553,5.933,1554,4.205,1555,5.271,1556,5.933,1557,4.205,1558,4.205,1559,5.933,1560,4.205,1561,4.205,1562,5.933,1563,5.933,1564,5.933,1565,5.933,1566,4.205,1567,4.205,1568,3.685,1569,5.933,1570,4.205,1571,5.933,1572,5.933,1573,5.271,1574,3.736,1575,5.708,1576,5.076]],["title/classes/CreateNotificationDto.html",[0,0.236,1577,3.204]],["body/classes/CreateNotificationDto.html",[0,0.374,2,1.106,3,0.107,4,0.097,5,0.097,7,0.272,8,1.079,10,0.48,13,0.007,14,0.54,15,1.434,18,0.616,24,0.301,32,0.107,45,0.006,46,0.006,66,1.016,368,3.901,448,4.133,580,3.295,948,5.093,1418,4.654,1507,5.337,1511,5.093,1512,3.009,1577,5.093,1578,7.634,1579,5.3,1580,5.3,1581,5.966,1582,5.966,1583,6.226,1584,7.493,1585,6.106,1586,6.106,1587,5.966,1588,5.966,1589,4.534]],["title/classes/CreateSubtaskDto.html",[0,0.236,1590,3.204]],["body/classes/CreateSubtaskDto.html",[0,0.327,2,1.212,3,0.117,4,0.107,5,0.107,7,0.298,8,1.142,10,0.453,13,0.007,14,0.498,18,0.641,32,0.117,45,0.006,46,0.006,66,1.203,168,3.487,188,2.956,595,3.487,763,5.094,1590,5.391,1591,7.884,1592,5.33,1593,6.956,1594,5.811,1595,6.54,1596,5.811]],["title/classes/CreateTaskDto.html",[0,0.236,514,3.376]],["body/classes/CreateTaskDto.html",[0,0.301,2,1.117,3,0.108,4,0.098,5,0.098,7,0.275,8,1.086,10,0.481,12,4.281,13,0.007,14,0.569,18,0.681,32,0.108,45,0.006,46,0.006,66,1.169,514,5.402,569,3.532,573,5.895,575,4.419,592,5.113,594,6.708,595,3.362,1597,8.166,1598,4.912,1599,5.355,1600,5.355,1601,5.355,1602,5.355,1603,5.355,1604,5.355]],["title/classes/CreateUserDto.html",[0,0.236,1605,2.71]],["body/classes/CreateUserDto.html",[0,0.396,2,1.031,3,0.1,4,0.091,5,0.091,7,0.254,8,1.032,9,3.164,10,0.421,13,0.007,14,0.581,18,0.596,24,0.288,32,0.128,40,2.401,45,0.005,46,0.005,65,0.926,96,2.491,164,3.231,281,4.372,291,3.32,327,3.32,636,3.781,1202,3.607,1507,4.925,1512,2.806,1575,5.693,1576,4.925,1605,4.121,1606,6.825,1607,3.984,1608,5.563,1609,5.563,1610,5.563,1611,5.133,1612,4.228,1613,4.228,1614,4.228,1615,3.781,1616,4.533,1617,4.228,1618,4.228,1619,4.942,1620,4.942,1621,4.942,1622,4.533]],["title/classes/CreateUserDto-1.html",[0,0.197,170,1.438,1605,2.267]],["body/classes/CreateUserDto-1.html",[0,0.322,2,1.195,3,0.116,4,0.105,5,0.105,7,0.294,8,1.133,10,0.45,13,0.007,14,0.579,18,0.637,32,0.116,45,0.006,46,0.006,65,0.907,96,2.556,164,3.162,281,4.279,1605,4.521,1607,4.619,1623,7.846,1624,5.729,1625,5.729,1626,5.729]],["title/classes/CreateWorkspaceDto.html",[0,0.236,1627,3.376]],["body/classes/CreateWorkspaceDto.html",[0,0.377,2,1.117,3,0.108,4,0.098,5,0.098,7,0.275,8,1.086,9,3.284,10,0.437,13,0.007,14,0.569,15,1.441,17,1.347,18,0.619,24,0.242,32,0.108,45,0.006,46,0.006,65,0.88,66,1.169,202,5.355,1507,5.516,1511,5.595,1512,3.041,1580,5.355,1627,5.402,1628,7.663,1629,5.355,1630,5.595,1631,6.028,1632,6.028,1633,6.028,1634,6.028,1635,6.028,1636,7.542,1637,4.912,1638,5.355]],["title/controllers/DashboardController.html",[47,1.346,478,3.376]],["body/controllers/DashboardController.html",[0,0.25,3,0.09,4,0.081,5,0.081,7,0.228,10,0.355,11,3.095,13,0.007,14,0.473,15,1.317,18,0.565,24,0.346,32,0.09,33,1.822,40,1.513,42,0.909,45,0.005,46,0.005,47,1.427,49,1.575,51,2.38,53,1.438,62,2.143,64,1.52,65,0.714,66,0.905,67,1.59,81,1.484,82,1.4,83,1.607,84,2.604,88,0.842,91,2.143,95,1.905,96,1.347,98,1.681,137,2.747,164,1.863,192,3.987,193,3.104,203,3.579,284,3.014,289,4.674,308,3.397,336,1.822,462,6.105,464,4.072,466,4.879,467,4.072,468,3.579,469,4.439,470,4.439,471,5.46,472,4.072,473,3.397,474,4.072,475,4.072,476,4.439,477,4.439,478,4.784,479,5.935,480,4.439,481,4.439,482,4.439,483,5.935,484,7.136,485,4.439,486,5.935,487,6.132,488,4.439,1639,4.997,1640,5.935,1641,4.439,1642,4.997,1643,4.997,1644,4.997,1645,4.997]],["title/classes/DashboardMetricsDto.html",[0,0.236,1646,3.583]],["body/classes/DashboardMetricsDto.html",[0,0.309,2,1.147,3,0.111,4,0.101,5,0.101,7,0.282,8,1.104,10,0.475,13,0.007,18,0.673,32,0.111,45,0.006,46,0.006,66,1.18,168,4.168,1646,5.827,1647,8.101,1648,5.499,1649,7.401,1650,7.401,1651,7.401,1652,7.401,1653,7.401,1654,6.19,1655,6.19,1656,6.19,1657,6.19,1658,6.19]],["title/modules/DashboardModule.html",[107,1.346,220,3.376]],["body/modules/DashboardModule.html",[0,0.269,3,0.097,4,0.088,5,0.088,13,0.007,24,0.365,26,1.4,28,0.981,32,0.097,45,0.005,46,0.005,49,2.214,65,0.577,81,1.602,82,1.511,83,1.734,88,0.909,107,2.231,109,2.203,110,2.152,111,2.434,112,2.434,113,2.313,114,3.436,115,2.313,118,3.17,119,2.103,120,2.372,122,2.434,125,3.089,126,2.499,220,6.727,225,5.706,227,5.981,228,5.981,236,4.792,238,4.792,241,4.396,466,5.706,467,4.396,478,5.596,1548,3.666,1659,4.792,1660,5.394,1661,4.792,1662,5.394,1663,5.394,1664,5.34,1665,4.792,1666,5.394]],["title/injectables/DashboardService.html",[128,0.959,466,3.057]],["body/injectables/DashboardService.html",[0,0.198,3,0.071,4,0.065,5,0.065,7,0.181,9,2.271,10,0.353,11,1.838,13,0.007,14,0.418,18,0.547,24,0.35,28,0.721,30,0.955,32,0.071,42,1.401,45,0.004,46,0.004,53,1.225,54,2.554,64,1.515,65,0.712,66,0.902,67,1.406,73,1.625,88,0.668,91,1.701,96,1.961,98,1.487,128,1.158,129,1.446,131,1.907,133,3.119,137,2.742,143,1.744,145,2.595,147,2.247,151,2.277,170,1.446,284,2.568,354,2.202,438,1.62,448,2.871,466,3.691,471,4.944,472,3.233,473,2.696,474,3.233,475,3.233,487,4.638,569,2.595,572,2.841,578,2.696,595,2.325,659,2.572,762,3.159,1080,2.696,1088,5.057,1102,3.524,1541,5.528,1542,3.015,1548,4.944,1640,5.057,1641,5.057,1646,3.015,1649,5.057,1650,5.057,1651,5.057,1652,5.057,1653,5.057,1665,3.524,1667,3.524,1668,7.273,1669,3.967,1670,5.198,1671,5.914,1672,4.037,1673,5.354,1674,6.657,1675,3.967,1676,3.967,1677,5.692,1678,3.967,1679,3.233,1680,3.967,1681,3.967,1682,3.967,1683,3.967,1684,3.967,1685,3.967,1686,3.967,1687,3.967,1688,3.967,1689,3.967,1690,3.967,1691,3.967,1692,3.967,1693,3.967,1694,5.692,1695,3.967,1696,3.967,1697,3.967,1698,3.967,1699,3.967,1700,3.967,1701,3.967,1702,3.967,1703,3.967,1704,3.967,1705,3.967,1706,3.967,1707,3.967,1708,3.967,1709,3.967]],["title/modules/DatabaseModule.html",[107,1.346,221,3.376]],["body/modules/DatabaseModule.html",[0,0.304,3,0.109,4,0.099,5,0.099,13,0.007,24,0.357,26,1.967,28,1.105,32,0.136,40,1.84,45,0.006,46,0.006,65,0.81,81,1.804,82,1.702,83,1.954,88,1.024,107,2.164,109,2.482,115,2.605,122,3.42,125,2.672,126,2.815,221,5.428,387,4.708,388,4.351,579,2.168,621,4.13,656,4.13,850,4.358,852,4.13,1710,6.076,1711,6.076,1712,6.076,1713,7.579,1714,6.176,1715,6.076,1716,7.579,1717,4.951,1718,6.076,1719,5.398]],["title/classes/EventsGateway.html",[0,0.236,250,3.583]],["body/classes/EventsGateway.html",[0,0.252,2,0.934,3,0.09,4,0.082,5,0.082,7,0.23,8,0.968,10,0.458,13,0.007,14,0.528,15,1.176,17,1.126,18,0.649,24,0.27,32,0.09,45,0.005,46,0.005,53,1.446,64,1.911,65,0.897,66,1.17,67,1.774,98,1.126,250,5.107,368,3.599,700,4.491,702,4.51,707,3.949,708,4.01,709,2.898,710,2.898,711,3.131,822,4.108,823,3.831,861,5.149,1030,4.478,1720,4.478,1721,6.719,1722,6.719,1723,6.719,1724,6.719,1725,6.719,1726,5.041,1727,6.719,1728,5.041,1729,6.719,1730,5.041,1731,6.719,1732,5.041,1733,6.719,1734,5.041,1735,5.041,1736,6.719,1737,5.041,1738,4.478,1739,5.041,1740,5.041,1741,5.041,1742,4.478,1743,5.041,1744,5.041,1745,5.041]],["title/classes/ForgotPasswordDto.html",[0,0.236,278,3.376]],["body/classes/ForgotPasswordDto.html",[0,0.386,2,1.16,3,0.112,4,0.102,5,0.102,7,0.285,8,1.112,10,0.332,13,0.007,14,0.485,15,1.095,18,0.47,24,0.31,32,0.112,34,2.384,45,0.006,46,0.006,164,3.516,278,5.528,327,3.734,368,3.986,1512,3.156,1533,5.866,1544,4.481,1575,5.246,1576,3.886,1611,5.528,1617,4.755,1746,6.857,1747,5.099,1748,6.257,1749,6.857,1750,6.257,1751,5.559,1752,6.257]],["title/injectables/HbsRenderService.html",[128,0.959,1192,2.928]],["body/injectables/HbsRenderService.html",[0,0.125,3,0.112,4,0.109,5,0.093,7,0.182,8,0.903,9,2.803,10,0.304,13,0.007,14,0.505,18,0.503,24,0.1,29,0.854,32,0.045,42,1.37,45,0.003,46,0.003,53,1.349,55,1.313,64,0.568,65,0.715,66,0.338,67,1.21,73,1.43,84,1.56,98,1.763,107,1.142,109,1.634,128,0.814,129,0.91,131,1.677,145,2.688,147,0.771,158,5.031,168,1.097,170,1.459,187,3.26,188,0.93,203,2.865,273,5.549,438,1.019,451,2.594,453,1.618,501,3.07,582,4.064,584,2.217,595,1.634,599,0.836,697,3.554,707,2.805,738,1.897,861,3.603,932,2.594,981,2.034,1005,2.485,1094,4.79,1151,4.193,1178,4.546,1183,1.618,1187,4.799,1192,2.485,1198,3.805,1199,1.787,1200,1.696,1208,1.787,1209,1.787,1216,2.719,1224,1.897,1235,1.897,1236,5.724,1238,2.865,1244,3.04,1245,3.04,1252,3.04,1253,3.04,1260,3.805,1263,3.04,1265,3.805,1266,1.897,1267,3.04,1268,3.805,1273,1.897,1298,3.805,1300,3.805,1304,4.763,1321,1.897,1325,1.897,1330,5.083,1381,3.04,1424,2.485,1439,1.618,1453,3.04,1462,1.787,1463,1.787,1464,1.897,1488,1.696,1555,2.217,1576,3.892,1637,2.034,1714,2.034,1753,5.725,1754,2.034,1755,5.006,1756,5.726,1757,5.726,1758,5.726,1759,4,1760,4,1761,2.496,1762,2.496,1763,2.496,1764,4,1765,2.496,1766,2.496,1767,1.897,1768,2.034,1769,2.496,1770,2.496,1771,2.496,1772,2.496,1773,2.496,1774,2.496,1775,2.496,1776,2.496,1777,7.025,1778,2.496,1779,2.217,1780,5.087,1781,5.726,1782,6.688,1783,6.688,1784,2.496,1785,2.496,1786,5.006,1787,2.496,1788,2.496,1789,2.496,1790,2.496,1791,4,1792,2.217,1793,2.496,1794,2.496,1795,2.496,1796,2.034,1797,5.006,1798,4,1799,4,1800,2.496,1801,2.496,1802,2.496,1803,2.496,1804,2.496,1805,2.496,1806,4,1807,2.496,1808,2.496,1809,6.267,1810,5.726,1811,2.496,1812,2.496,1813,2.496,1814,2.496,1815,4,1816,2.496,1817,2.496,1818,3.26,1819,2.496,1820,4,1821,2.496,1822,2.496,1823,2.217,1824,4,1825,6.267,1826,2.496,1827,2.496,1828,2.496,1829,2.496,1830,2.496,1831,2.217,1832,4,1833,2.496,1834,2.217,1835,2.496,1836,5.006,1837,2.496,1838,2.496,1839,2.496,1840,2.496,1841,2.496,1842,2.217,1843,2.496,1844,4,1845,2.496,1846,2.496,1847,2.496,1848,2.496,1849,2.496,1850,2.496,1851,5.006]],["title/injectables/JwtAuthGuard.html",[128,0.959,468,3.376]],["body/injectables/JwtAuthGuard.html",[0,0.35,3,0.125,4,0.114,5,0.114,13,0.007,24,0.331,32,0.125,33,3.011,45,0.006,46,0.006,88,1.179,128,1.681,129,2.551,310,5.701,311,4.345,468,5.914,1852,6.216,1853,6.216,1854,8.257]],["title/interfaces/JwtPayload.html",[336,1.719,415,2.928]],["body/interfaces/JwtPayload.html",[0,0.262,3,0.094,4,0.085,5,0.085,7,0.239,8,0.992,10,0.409,13,0.007,14,0.579,24,0.341,32,0.094,33,1.909,45,0.005,46,0.005,65,0.909,73,1.495,81,2.045,82,1.93,88,0.882,95,1.995,98,1.17,128,1.402,162,2.723,164,3.169,182,5.853,191,3.558,192,4.112,193,3.252,289,3.252,311,3.252,336,1.909,355,2.723,361,5.86,379,3.558,393,4.266,394,4.266,415,4.783,426,2.906,438,2.138,463,2.906,1467,4.683,1855,4.266,1856,4.266,1857,4.651,1858,4.266,1859,6.121,1860,3.979,1861,4.266,1862,4.266,1863,4.683,1864,4.683,1865,4.993,1866,5.515,1867,5.515,1868,4.266,1869,4.651,1870,4.651,1871,4.651,1872,4.651,1873,4.651,1874,4.651,1875,4.651,1876,4.651,1877,4.651,1878,4.651,1879,4.651]],["title/interfaces/JwtPayload-1.html",[170,1.438,336,1.438,415,2.449]],["body/interfaces/JwtPayload-1.html",[3,0.115,4,0.105,5,0.105,7,0.293,8,1.131,10,0.468,11,4.088,13,0.007,14,0.595,32,0.115,45,0.006,46,0.006,66,1.196,164,3.289,165,5.721,188,3.158,336,2.345,415,4.876,463,3.57,1880,5.713,1881,5.713,1882,8.823]],["title/injectables/JwtStrategy.html",[128,0.959,379,3.204]],["body/injectables/JwtStrategy.html",[0,0.252,3,0.091,4,0.082,5,0.082,7,0.23,10,0.357,13,0.007,14,0.554,18,0.506,24,0.337,32,0.091,33,2.454,45,0.005,46,0.005,53,1.448,64,1.531,65,0.898,66,0.912,67,1.067,73,1.921,81,1.998,82,1.885,88,0.851,95,1.925,98,1.129,128,1.37,129,1.842,131,1.692,162,2.627,164,2.82,181,4.488,182,6.567,191,3.434,192,4.016,193,3.138,289,3.138,311,3.138,336,1.842,355,2.627,361,3.618,379,4.574,393,4.117,394,4.117,415,5.011,426,3.735,438,2.064,741,5.114,1467,4.574,1855,4.117,1856,4.117,1857,4.488,1858,4.117,1859,5.978,1860,3.839,1861,4.117,1862,5.483,1863,4.574,1864,4.574,1865,4.906,1866,5.419,1867,5.419,1868,4.117,1869,4.488,1870,4.488,1871,4.488,1872,4.488,1873,4.488,1874,5.978,1875,4.488,1876,4.488,1877,4.488,1878,4.488,1879,4.488,1883,5.052,1884,5.052]],["title/interfaces/LocalAuthenticatedRequest.html",[286,3.583,336,1.719]],["body/interfaces/LocalAuthenticatedRequest.html",[0,0.195,3,0.07,4,0.064,5,0.064,7,0.178,8,0.812,10,0.407,13,0.007,14,0.354,24,0.36,28,0.712,30,0.942,32,0.07,33,2.055,34,1.209,40,2.49,42,1.025,45,0.004,46,0.004,47,1.117,54,2.369,62,1.678,84,2.197,88,0.659,96,1.948,98,1.783,119,2.197,131,1.311,133,2.417,143,1.721,145,2.579,147,2.232,151,2.259,153,2.981,155,2.101,164,2.855,188,1.458,192,4.314,268,2.802,269,2.974,278,4.731,279,3.476,281,3.646,284,2.543,286,5.021,289,2.43,291,4.314,295,4.037,296,3.476,297,4.593,300,4.731,301,3.476,305,3.476,307,5.207,308,2.66,309,2.25,310,3.189,311,2.43,312,4.103,313,2.974,314,3.189,315,3.476,316,3.476,317,5.383,318,2.802,319,1.162,320,4.156,321,2.537,322,4.284,323,3.189,324,6.421,325,5.869,326,3.476,327,2.335,328,3.476,329,5.007,330,3.476,331,4.284,332,3.476,333,2.101,334,1.367,335,2.974,336,1.427,337,3.476,338,3.476,339,2.974,340,2.802,341,3.476,342,3.476,343,3.476,344,3.476,345,3.476,346,3.476,347,3.476,348,3.476,349,3.476,350,3.476,351,3.476,352,2.974,353,3.476,354,2.172,355,2.035,356,4.593,357,3.189,358,2.974,359,3.189,360,3.476,361,2.802,362,3.476,363,3.189,364,3.476,365,2.974,366,3.476,367,3.476,368,1.863,369,2.974,370,5.007,371,3.476,372,3.476,373,3.476,374,3.476,375,3.476,463,2.172]],["title/injectables/LocalStrategy.html",[128,0.959,380,3.376]],["body/injectables/LocalStrategy.html",[0,0.275,3,0.099,4,0.09,5,0.09,7,0.251,10,0.378,13,0.007,14,0.556,18,0.534,24,0.335,32,0.099,33,2.593,40,2.387,42,1,45,0.005,46,0.005,53,1.531,54,2.341,64,1.619,65,0.76,66,0.964,67,1.161,81,1.632,82,1.54,88,0.926,95,2.095,98,1.228,128,1.448,129,2.004,131,1.841,137,2.433,147,1.698,151,1.88,153,2.48,164,2.651,281,4.206,311,3.414,312,5.494,313,4.178,380,5.094,412,4.883,416,4.883,741,5.405,1467,3.736,1856,4.48,1858,4.48,1860,4.178,1862,5.796,1863,3.736,1864,3.736,1865,3.564,1866,3.937,1867,3.937,1868,4.48,1885,4.883,1886,5.497,1887,5.497,1888,7.112,1889,5.497,1890,4.883,1891,5.497,1892,5.497,1893,5.497]],["title/injectables/MailService.html",[128,0.959,322,3.057]],["body/injectables/MailService.html",[0,0.314,3,0.113,4,0.103,5,0.103,7,0.287,10,0.334,13,0.007,14,0.575,18,0.473,24,0.252,32,0.113,42,1.144,45,0.006,46,0.006,53,1.667,64,1.432,65,0.672,66,0.853,67,1.329,88,1.06,128,1.576,129,2.294,164,2.887,297,5.127,307,5.952,322,5.022,369,4.781,448,3.173,707,3.082,1831,5.589,1894,5.589,1895,7.744,1896,7.744,1897,6.291,1898,6.291,1899,6.291,1900,5.127,1901,6.291,1902,6.291,1903,6.291,1904,6.291,1905,6.291]],["title/classes/MarkReadDto.html",[0,0.236,1906,3.842]],["body/classes/MarkReadDto.html",[0,0.406,2,1.262,3,0.122,4,0.111,5,0.111,7,0.31,8,1.171,10,0.362,13,0.007,14,0.511,15,1.192,18,0.512,24,0.273,32,0.122,45,0.006,46,0.006,1512,3.436,1535,7.716,1906,6.622,1907,7.219,1908,6.051,1909,8.685,1910,6.81]],["title/classes/Meeting.html",[0,0.236,1548,3.204]],["body/classes/Meeting.html",[0,0.255,2,0.944,3,0.091,4,0.083,5,0.083,7,0.232,8,0.975,9,3.032,10,0.482,13,0.007,14,0.544,15,1.475,16,2.902,17,1.883,18,0.675,24,0.272,25,3.421,26,1.756,27,1.942,28,0.927,30,1.227,31,2.082,32,0.136,34,2.09,42,0.927,45,0.005,46,0.005,66,1.097,188,2.523,319,1.513,333,4.08,334,2.364,438,2.765,448,3.833,569,3.377,595,3.104,599,1.707,604,2.829,762,4.218,764,4.72,1541,5.775,1542,5.775,1548,4.6,1664,3.873,1911,3.873,1912,5.096,1913,5.096,1914,5.096,1915,5.096,1916,5.096,1917,5.096,1918,5.096,1919,5.096,1920,5.515,1921,4.153,1922,4.528]],["title/classes/MeetingResponseDto.html",[0,0.236,473,3.204]],["body/classes/MeetingResponseDto.html",[0,0.286,2,1.062,3,0.103,4,0.093,5,0.093,7,0.261,8,1.052,9,3.208,10,0.488,13,0.007,14,0.588,18,0.691,32,0.103,45,0.005,46,0.005,66,1.148,73,2.296,188,2.722,448,4.056,473,4.964,569,3.301,595,3.284,762,4.463,1541,6.111,1542,6.111,1543,7.143,1923,8.253,1924,5.09,1925,5.729,1926,5.729,1927,5.729,1928,5.729,1929,5.729,1930,5.729,1931,5.729,1932,5.729]],["title/classes/Member.html",[0,0.236,162,2.452]],["body/classes/Member.html",[0,0.293,2,1.089,3,0.105,4,0.096,5,0.096,7,0.268,8,1.069,10,0.432,13,0.007,14,0.466,15,1.299,16,2.519,17,1.969,18,0.558,21,2.344,24,0.326,25,3.1,26,1.926,27,2.239,28,1.068,29,2.538,30,1.414,31,2.4,32,0.133,33,2.142,34,2.513,41,3.965,42,1.068,45,0.006,46,0.006,162,3.859,164,3.032,199,2.142,319,1.744,334,2.842,596,3.031,1933,4.787,1934,5.875,1935,5.875,1936,5.875,1937,4.207,1938,4.787]],["title/classes/Member-1.html",[0,0.197,162,2.05,170,1.438]],["body/classes/Member-1.html",[0,0.263,2,0.977,3,0.094,4,0.086,5,0.086,7,0.24,8,0.997,10,0.464,13,0.007,14,0.568,15,1.436,16,2.968,17,1.991,18,0.616,21,2.761,24,0.278,25,3.247,26,1.796,27,2.009,28,0.959,29,2.367,30,1.269,31,2.153,32,0.124,33,1.922,34,2.534,35,5.639,42,0.959,45,0.005,46,0.005,65,0.826,73,2.206,147,1.628,162,3.599,165,5.01,199,1.922,319,1.565,334,2.699,596,2.827,599,2.318,1568,5.292,1613,4.006,1614,4.006,1767,4.006,1937,3.775,1938,4.295,1939,4.295,1940,5.271,1941,5.271,1942,5.271,1943,5.271,1944,4.683,1945,5.271,1946,4.683]],["title/classes/Notification.html",[0,0.236,1947,2.813]],["body/classes/Notification.html",[0,0.204,2,0.757,3,0.073,4,0.067,5,0.067,7,0.38,8,0.837,10,0.496,13,0.007,14,0.552,15,1.49,16,1.752,17,2.022,18,0.64,21,3.23,24,0.272,25,3.348,26,1.509,27,1.557,28,0.743,29,1.988,30,0.984,31,1.669,32,0.132,34,2.406,40,2.359,42,0.743,45,0.004,46,0.004,66,0.999,73,1.932,147,1.262,188,2.748,199,2.688,319,1.213,321,2.65,334,2.364,355,2.125,368,3.223,438,2.764,448,3.414,569,3.319,580,2.556,596,2.375,599,2.852,650,3.611,762,4.092,764,2.538,772,3.33,948,3.952,1418,3.611,1583,5.143,1585,4.738,1586,4.738,1944,3.63,1947,4.039,1948,3.105,1949,6.012,1950,5.143,1951,5.143,1952,4.086,1953,4.086,1954,4.086,1955,4.086,1956,4.086,1957,4.086,1958,4.086,1959,4.086,1960,2.926,1961,5.165,1962,3.105,1963,3.63]],["title/injectables/NotificationCleanup.html",[128,0.959,1964,3.376]],["body/injectables/NotificationCleanup.html",[0,0.266,3,0.095,4,0.087,5,0.087,7,0.242,8,1.003,10,0.282,13,0.007,15,0.931,18,0.583,24,0.343,28,0.967,30,1.28,32,0.095,42,1.266,45,0.005,46,0.005,53,1.499,54,2.304,64,1.211,65,0.569,66,0.721,67,1.124,88,0.896,96,2.219,128,1.417,129,1.94,131,2.332,133,3.53,143,2.339,145,2.938,147,2.397,151,1.819,158,3.81,232,3.81,569,2.074,599,1.782,843,3.616,999,7.314,1005,3.304,1007,4.726,1008,4.726,1551,4.726,1589,4.043,1947,3.175,1949,4.726,1960,3.81,1964,4.986,1965,4.726,1966,8.233,1967,4.726,1968,6.962,1969,6.185,1970,6.962,1971,5.319,1972,6.962,1973,4.726,1974,4.726,1975,5.319,1976,6.962,1977,5.319,1978,6.185,1979,5.319,1980,4.726,1981,5.319,1982,5.319,1983,3.81,1984,5.319,1985,5.319]],["title/controllers/NotificationController.html",[47,1.346,1986,3.376]],["body/controllers/NotificationController.html",[0,0.132,3,0.047,4,0.043,5,0.043,7,0.12,10,0.407,11,3.713,13,0.007,14,0.587,15,1.303,18,0.559,24,0.258,29,0.9,30,1.005,32,0.075,34,0.813,40,0.797,42,1.394,45,0.003,46,0.003,47,0.752,49,0.829,51,1.254,53,0.898,54,2.675,55,1.937,62,2.224,64,1.694,65,0.796,66,1.009,67,1.659,68,1.934,73,2.125,75,2.4,81,1.239,82,1.169,83,0.846,84,1.627,85,1.254,86,2.469,88,0.703,91,1.129,95,1.003,96,0.71,98,1.663,137,2.928,147,1.289,151,2.546,153,1.188,168,1.158,188,2.2,199,1.522,284,2.34,309,1.513,319,0.782,333,1.413,336,0.96,355,3.069,368,2.47,435,3.172,441,1.635,448,1.328,523,1.789,528,1.789,582,1.707,587,4.456,638,2.706,761,1.413,762,1.461,835,1.707,837,2.001,843,3.525,935,2.001,936,2.001,943,2.001,946,3.942,974,2.001,987,1.707,1132,3.942,1223,1.885,1318,4.374,1392,2.989,1398,3.827,1427,1.789,1577,4.012,1615,1.789,1679,4.226,1863,1.789,1864,1.789,1865,1.707,1866,1.885,1867,1.885,1947,3.84,1950,2.001,1951,2.001,1983,4.608,1986,2.989,1987,2.145,1988,3.708,1989,4.226,1990,3.708,1991,3.708,1992,3.708,1993,4.226,1994,3.708,1995,2.632,1996,2.339,1997,2.632,1998,2.339,1999,4.81,2000,3.708,2001,2.632,2002,2.339,2003,3.708,2004,2.632,2005,2.632,2006,2.339,2007,3.708,2008,2.632,2009,2.339,2010,3.708,2011,2.632,2012,2.339,2013,3.708,2014,2.632,2015,2.339,2016,3.708,2017,4.608,2018,2.632,2019,2.706,2020,2.145,2021,2.145,2022,2.339,2023,2.339,2024,2.339,2025,2.145,2026,2.339,2027,2.339,2028,2.339,2029,3.401,2030,3.708,2031,3.708,2032,5.204,2033,2.145,2034,2.145,2035,2.339,2036,2.001,2037,2.339,2038,2.339,2039,2.145,2040,3.401,2041,2.339,2042,2.145,2043,2.339,2044,2.339,2045,2.339,2046,2.339,2047,2.339,2048,2.339,2049,2.339,2050,2.145,2051,2.339,2052,2.339,2053,3.708,2054,2.339,2055,3.708,2056,2.339,2057,2.339,2058,2.339,2059,3.401,2060,2.339,2061,2.339,2062,3.942,2063,2.339,2064,2.339,2065,2.339,2066,2.339,2067,2.339,2068,5.243,2069,2.339,2070,2.339,2071,2.339,2072,2.339,2073,2.339,2074,2.145,2075,2.339,2076,2.339,2077,4.607,2078,2.339,2079,3.708]],["title/modules/NotificationModule.html",[107,1.346,222,3.376]],["body/modules/NotificationModule.html",[0,0.267,3,0.096,4,0.087,5,0.087,13,0.007,24,0.364,26,1.812,28,0.972,32,0.096,45,0.005,46,0.005,49,2.2,65,0.746,81,1.587,82,1.497,83,1.718,88,0.901,107,2.221,109,2.183,110,2.132,111,2.411,112,2.411,113,2.292,114,3.42,115,3.335,118,3.151,119,2.084,120,2.35,122,2.411,125,2.35,126,2.476,222,6.568,225,4.528,241,4.355,579,1.907,656,3.632,850,4.015,852,3.632,1589,4.062,1947,3.189,1962,5.307,1964,6.287,1986,5.571,2019,6.083,2020,4.355,2080,4.748,2081,4.748,2082,4.748,2083,5.344,2084,6.983,2085,5.344,2086,5.344,2087,5.344]],["title/interfaces/NotificationResponse.html",[336,1.719,2032,3.583]],["body/interfaces/NotificationResponse.html",[0,0.145,3,0.052,4,0.047,5,0.047,7,0.133,8,0.651,9,1.161,10,0.455,11,3.31,13,0.007,14,0.582,24,0.271,29,1.545,30,1.332,32,0.081,34,0.899,40,0.882,42,1.438,45,0.003,46,0.003,47,0.831,54,2.287,55,1.482,62,1.937,66,1.216,67,1.169,68,2.093,73,1.781,75,1.674,81,0.864,82,0.815,84,1.761,85,1.386,86,2.61,88,0.761,91,1.248,95,1.11,96,0.785,98,1.721,137,2.635,147,1.395,151,2.635,153,1.314,168,2.434,188,3.013,199,1.647,284,2.038,309,1.674,319,1.341,333,3.348,336,1.062,355,3.243,368,3.402,435,3.433,441,1.808,448,3.146,463,1.616,523,1.979,528,1.979,582,1.888,587,4.785,638,2.929,761,1.563,762,3.462,835,1.888,837,2.213,843,3.762,935,2.213,936,2.213,943,3.433,946,4.74,974,2.213,1132,4.206,1223,2.085,1318,3.762,1392,3.964,1398,4.044,1427,1.979,1577,3.07,1615,1.979,1863,1.979,1864,1.979,1865,1.888,1866,2.085,1867,2.085,1947,4.029,1950,4.74,1951,4.74,1983,4.467,1986,2.085,1987,2.372,1989,2.372,1993,2.372,1999,3.681,2000,2.586,2003,2.586,2007,2.586,2010,2.586,2013,2.586,2016,2.586,2017,4.467,2019,2.929,2020,2.372,2021,2.372,2022,2.586,2023,4.013,2024,4.013,2025,3.681,2026,4.013,2027,4.013,2028,4.013,2029,4.51,2030,4.917,2031,4.917,2032,5.664,2033,2.372,2034,2.372,2035,2.586,2036,4.74,2037,5.541,2038,2.586,2039,2.372,2040,5.501,2041,2.586,2042,2.372,2043,2.586,2044,2.586,2045,2.586,2046,2.586,2047,2.586,2048,2.586,2049,2.586,2050,2.372,2051,2.586,2052,2.586,2053,4.013,2054,2.586,2055,4.013,2056,2.586,2057,2.586,2058,2.586,2059,3.681,2060,2.586,2061,2.586,2062,4.206,2063,2.586,2064,2.586,2065,2.586,2066,2.586,2067,2.586,2068,5.541,2069,2.586,2070,2.586,2071,2.586,2072,2.586,2073,2.586,2074,2.372,2075,2.586,2076,2.586,2077,4.917,2078,2.586,2079,4.013]],["title/injectables/NotificationService.html",[128,0.959,2019,3.057]],["body/injectables/NotificationService.html",[0,0.144,3,0.052,4,0.047,5,0.047,7,0.132,10,0.419,11,3.298,13,0.007,14,0.566,17,1.502,18,0.593,24,0.308,28,0.525,30,1.08,32,0.052,40,1.358,42,1.294,45,0.003,46,0.003,53,0.966,54,2.709,55,1.806,64,1.796,65,0.843,66,1.069,67,1.623,68,1.337,73,2.121,86,2.303,88,0.486,91,1.237,96,1.209,98,1.66,128,0.913,129,1.052,131,1.503,133,3.186,137,2.925,143,1.269,145,1.601,147,2.077,151,2.123,168,1.973,170,1.636,284,2.801,319,0.857,320,3.569,321,1.871,333,2.408,354,1.602,421,2.564,438,2.536,523,1.961,555,3.942,569,2.146,578,1.961,579,1.03,599,0.967,622,2.564,638,2.909,681,1.961,762,1.602,835,1.871,869,2.352,1005,1.792,1087,2.564,1132,4.183,1318,4.57,1415,4.815,1577,4.219,1589,2.193,1679,2.352,1947,3.285,1950,5.11,1951,4.718,1960,2.067,1967,2.564,1969,3.985,1973,2.564,1980,2.564,1983,3.942,1988,3.985,1989,3.656,1990,3.985,1991,3.985,1992,3.985,1993,4.485,1994,3.985,1996,3.985,1998,3.985,1999,4.485,2002,3.985,2006,3.985,2009,3.985,2012,3.985,2015,3.985,2017,2.067,2019,2.909,2021,2.352,2029,2.352,2036,3.41,2040,2.352,2059,3.656,2062,3.41,2074,3.656,2088,2.564,2089,2.886,2090,4.486,2091,2.886,2092,2.886,2093,2.886,2094,4.486,2095,2.886,2096,2.886,2097,2.886,2098,2.886,2099,2.886,2100,4.486,2101,2.886,2102,2.886,2103,2.886,2104,2.886,2105,2.886,2106,2.886,2107,4.486,2108,2.886,2109,2.886,2110,2.886,2111,2.886,2112,2.564,2113,2.886,2114,2.886,2115,2.886,2116,2.886,2117,2.886,2118,2.886,2119,2.886,2120,2.886,2121,2.886,2122,2.886,2123,2.886,2124,5.503,2125,2.564,2126,2.886]],["title/classes/Project.html",[0,0.236,2127,2.928]],["body/classes/Project.html",[0,0.273,2,1.014,3,0.098,4,0.089,5,0.089,7,0.249,8,1.021,9,3.139,10,0.469,12,4.091,13,0.007,14,0.523,15,1.457,16,2.346,17,2.009,18,0.625,21,2.829,24,0.284,25,3.367,26,1.84,27,2.085,28,0.995,29,2.425,30,1.317,31,2.235,32,0.127,33,1.995,34,2.663,40,2.147,41,3.04,42,0.995,45,0.005,46,0.005,199,2.585,319,1.624,334,3.086,595,3.213,596,3.399,2127,4.404,2128,4.458,2129,7.867,2130,5.471,2131,5.471,2132,5.471,2133,5.471,2134,4.158,2135,4.86]],["title/controllers/ProjectController.html",[47,1.346,2136,3.583]],["body/controllers/ProjectController.html",[0,0.239,3,0.086,4,0.078,5,0.078,7,0.218,10,0.419,12,3.372,13,0.007,14,0.564,15,1.444,18,0.639,24,0.295,26,1.24,32,0.086,45,0.005,46,0.005,47,1.365,49,1.506,51,2.276,53,1.395,55,2.127,56,3.979,58,3.176,59,3.372,62,3.155,64,1.795,65,0.843,66,1.069,67,1.742,73,2.253,74,2.653,75,3.727,77,2.748,79,4.927,81,1.419,82,1.339,83,1.537,84,2.528,85,2.276,86,2,87,3.249,88,0.805,95,1.822,96,1.288,97,2.969,98,1.842,103,3.633,105,2.969,858,3.249,859,4.889,861,4.889,1717,3.895,2127,4.027,2136,4.927,2137,4.246,2138,4.78,2139,5.76,2140,4.78,2141,4.78,2142,4.246,2143,6.483,2144,4.78,2145,4.78,2146,4.78,2147,5,2148,4.246,2149,3.895,2150,4.78,2151,4.78,2152,4.78,2153,4.78,2154,4.78,2155,4.78,2156,4.78,2157,4.78]],["title/modules/ProjectModule.html",[107,1.346,223,3.376]],["body/modules/ProjectModule.html",[0,0.293,3,0.105,4,0.096,5,0.096,13,0.007,24,0.353,26,1.521,28,1.066,32,0.105,45,0.006,46,0.006,49,2.335,65,0.626,81,1.74,82,1.641,83,1.884,88,0.987,107,2.32,109,2.394,110,2.338,111,2.644,112,2.644,113,2.513,114,3.573,115,3.484,118,3.343,119,2.285,120,2.577,122,2.644,125,2.577,126,2.715,223,6.542,2127,3.639,2134,5.631,2136,6.175,2147,6.459,2148,5.206,2149,4.775,2158,5.206,2159,5.206,2160,5.206,2161,5.86,2162,5.86,2163,5.86]],["title/injectables/ProjectService.html",[128,0.959,2147,3.204]],["body/injectables/ProjectService.html",[0,0.235,3,0.084,4,0.077,5,0.077,7,0.214,10,0.435,12,3.334,13,0.007,14,0.562,17,1.05,18,0.636,24,0.314,28,0.855,30,1.132,32,0.084,42,0.855,45,0.005,46,0.005,53,1.38,54,2.779,55,2.104,56,3.952,59,3.334,64,1.866,65,0.876,66,1.111,67,1.732,68,3.799,73,1.831,77,3.686,86,2.682,88,0.792,98,1.832,128,1.305,129,1.715,131,1.575,133,3.36,143,2.068,145,1.678,147,1.98,354,2.61,858,4.358,859,4.865,861,4.714,2127,3.982,2139,5.696,2142,5.696,2147,4.358,2149,3.832,2164,4.177,2165,4.702,2166,4.702,2167,6.411,2168,4.702,2169,4.873,2170,4.702,2171,4.702,2172,4.702,2173,4.702,2174,4.702,2175,4.702,2176,4.702,2177,4.702,2178,4.702,2179,4.702,2180,4.702,2181,4.702,2182,4.702]],["title/classes/RegisterDto.html",[0,0.236,291,2.813]],["body/classes/RegisterDto.html",[0,0.386,2,0.977,3,0.094,4,0.086,5,0.086,7,0.24,8,0.997,9,3.489,10,0.41,13,0.007,14,0.575,15,1.353,18,0.581,24,0.278,32,0.124,40,2.58,45,0.005,46,0.005,65,0.935,96,2.083,164,3.259,281,4.411,291,4.13,327,3.146,636,3.583,1202,4.487,1507,4.799,1512,2.659,1544,5.533,1575,5.576,1576,4.799,1605,3.031,1606,6.685,1607,3.775,1611,4.956,1612,4.006,1613,5.26,1614,5.26,1615,4.704,1616,5.639,1617,5.26,1618,5.26,1619,6.148,1620,6.148,1621,4.683,1622,4.295,2183,5.271,2184,5.271,2185,4.683,2186,5.271,2187,5.271,2188,5.271]],["title/classes/RegisterDto-1.html",[0,0.197,170,1.438,291,2.353]],["body/classes/RegisterDto-1.html",[0,0.344,2,0.97,3,0.094,4,0.085,5,0.085,7,0.239,8,0.992,9,3.482,10,0.409,13,0.007,14,0.548,15,1.348,18,0.579,24,0.276,32,0.094,40,2.086,45,0.005,46,0.005,65,0.909,164,3.169,168,3.029,170,3.292,281,4.288,291,4.112,327,3.124,1202,4.467,1311,5.236,1507,4.279,1512,2.641,1544,5.515,1575,5.561,1576,4.783,1611,4.934,1612,3.979,1613,5.236,1614,5.236,1615,4.683,1616,5.614,1617,5.236,1618,5.236,1749,6.121,2185,4.651,2189,4.651,2190,5.235,2191,5.235,2192,5.235,2193,6.889,2194,6.889,2195,5.235,2196,6.889,2197,6.889,2198,6.889,2199,6.889,2200,5.235,2201,6.889,2202,5.235]],["title/classes/ResendVerificationDto.html",[0,0.236,295,3.376]],["body/classes/ResendVerificationDto.html",[0,0.406,2,1.262,3,0.122,4,0.111,5,0.111,7,0.31,8,1.171,10,0.362,13,0.007,14,0.511,15,1.192,18,0.512,24,0.273,32,0.122,45,0.006,46,0.006,164,3.237,295,5.82,1512,3.436,1611,6.221,2203,7.219,2204,6.051,2205,6.81]],["title/classes/ResetPasswordDto.html",[0,0.236,300,3.376]],["body/classes/ResetPasswordDto.html",[0,0.365,2,1.062,3,0.103,4,0.093,5,0.093,7,0.261,8,1.052,10,0.388,13,0.007,14,0.532,15,1.279,18,0.549,24,0.293,32,0.103,34,2.615,45,0.005,46,0.005,147,2.256,164,2.135,281,4.271,300,5.231,307,6.177,327,3.419,368,4.032,407,7.143,1202,4.736,1507,4.994,1512,2.89,1533,6.111,1544,5.231,1575,5.465,1576,4.536,1612,4.354,1618,4.354,1622,4.668,1747,4.668,1751,5.09,2206,7.143,2207,5.729,2208,7.303,2209,5.729,2210,5.729,2211,6.489,2212,5.729,2213,5.729]],["title/guards/RolesGuard.html",[175,3.842,496,3.204]],["body/guards/RolesGuard.html",[0,0.271,3,0.097,4,0.089,5,0.089,7,0.248,10,0.416,13,0.007,14,0.443,17,1.214,18,0.53,24,0.333,32,0.097,34,2.18,40,2.137,42,1.426,45,0.005,46,0.005,53,1.519,64,1.606,65,0.754,66,0.957,67,1.148,73,1.551,88,0.915,95,2.07,98,1.751,128,1.437,131,1.82,177,4.427,180,6.764,184,5.752,185,6.764,187,4.427,188,2.631,192,4.212,193,3.374,194,3.692,195,4.427,196,4.427,289,3.374,336,1.981,438,2.219,489,4.129,490,4.427,491,3.692,492,7.833,493,4.427,494,4.129,495,4.129,496,4.797,497,4.826,498,4.826,499,4.826,500,4.826,501,2.661,502,4.826,503,4.826,504,4.826,505,4.826,2214,5.432,2215,5.432,2216,5.432]],["title/interfaces/Session.html",[336,1.719,1196,3.376]],["body/interfaces/Session.html",[0,0.069,3,0.044,4,0.04,5,0.108,7,0.063,8,0.47,10,0.262,13,0.007,14,0.463,17,0.729,24,0.179,32,0.025,42,1.204,45,0.002,46,0.002,54,1.678,55,1.071,65,0.148,82,2.093,84,0.541,96,0.374,98,1.327,110,0.554,119,1.272,131,0.465,137,1.686,145,2.362,147,1.381,151,2.195,153,1.472,168,1.072,170,1.432,188,3.026,194,0.943,198,3.399,253,4.515,336,1.19,355,2.042,368,1.87,438,1.604,441,0.862,446,0.9,448,0.7,451,3.196,453,2.9,463,0.77,501,3.243,569,0.951,580,0.61,582,4.017,587,0.862,599,1.315,646,1.512,684,0.943,700,0.721,707,1.924,755,2.48,761,2.401,771,0.994,859,0.798,932,1.581,982,3.808,1080,1.658,1083,1.054,1089,3.399,1090,1.054,1094,1.747,1138,3.203,1150,1.747,1151,0.828,1152,0.9,1153,1.054,1154,1.131,1155,1.131,1156,1.131,1157,1.131,1158,1.131,1159,1.131,1160,1.131,1161,1.131,1162,1.131,1163,1.131,1164,1.131,1165,1.131,1166,1.131,1167,1.131,1168,1.131,1169,1.131,1170,1.131,1171,1.131,1172,1.131,1173,1.131,1174,1.131,1175,1.131,1176,1.131,1177,1.987,1178,1.658,1179,1.987,1180,1.131,1181,2.659,1182,1.987,1183,0.9,1184,1.987,1185,1.054,1186,1.515,1187,5.258,1188,1.054,1189,1.515,1190,2.337,1191,1.054,1192,1.515,1193,0.943,1194,1.054,1195,1.853,1196,3.53,1197,3.645,1198,1.054,1199,4.74,1200,0.943,1201,1.131,1202,0.9,1203,3.645,1204,1.987,1205,1.987,1206,1.131,1207,2.48,1208,4.597,1209,1.747,1210,1.131,1211,1.987,1212,1.131,1213,1.054,1214,1.853,1215,1.131,1216,0.943,1217,1.131,1218,2.337,1219,1.853,1220,0.943,1221,0.943,1222,1.131,1223,0.994,1224,1.054,1225,1.131,1226,1.131,1227,1.131,1228,1.131,1229,2.659,1230,1.131,1231,1.987,1232,2.659,1233,1.131,1234,1.131,1235,1.054,1236,3.399,1237,1.987,1238,0.994,1239,5.54,1240,6.174,1241,2.659,1242,2.659,1243,1.131,1244,5.68,1245,1.853,1246,1.131,1247,1.054,1248,1.131,1249,1.131,1250,1.054,1251,1.131,1252,1.054,1253,1.054,1254,2.659,1255,2.659,1256,2.659,1257,4.333,1258,4.017,1259,4.333,1260,5.031,1261,4.017,1262,3.2,1263,5.502,1264,3.2,1265,5.595,1266,2.984,1267,4.041,1268,4.041,1269,4.017,1270,3.2,1271,5.048,1272,4.333,1273,5.595,1274,3.645,1275,1.131,1276,1.987,1277,1.131,1278,3.645,1279,1.131,1280,2.659,1281,1.131,1282,4.841,1283,1.131,1284,1.987,1285,2.659,1286,1.131,1287,2.659,1288,1.987,1289,1.131,1290,3.2,1291,2.659,1292,1.131,1293,1.987,1294,1.131,1295,1.131,1296,1.131,1297,1.131,1298,4.041,1299,1.131,1300,1.054,1301,1.131,1302,2.659,1303,1.131,1304,2.48,1305,1.131,1306,2.48,1307,1.131,1308,2.659,1309,1.131,1310,2.659,1311,2.48,1312,1.131,1313,1.131,1314,1.131,1315,2.48,1316,1.131,1317,1.131,1318,1.658,1319,1.987,1320,2.659,1321,1.054,1322,1.987,1323,1.131,1324,1.131,1325,2.48,1326,3.746,1327,1.131,1328,1.987,1329,1.987,1330,1.054,1331,4.017,1332,1.131,1333,2.984,1334,1.987,1335,1.987,1336,1.131,1337,1.131,1338,1.131,1339,1.054,1340,1.131,1341,1.131,1342,1.131,1343,4.605,1344,1.131,1345,1.131,1346,1.987,1347,1.131,1348,1.131,1349,1.131,1350,1.131,1351,1.131,1352,1.131,1353,1.131,1354,1.131,1355,1.131,1356,1.131,1357,1.131,1358,1.131,1359,1.131,1360,1.131,1361,0.943,1362,1.131,1363,1.987,1364,1.131,1365,1.131,1366,1.131,1367,1.131,1368,1.131,1369,1.131,1370,1.131,1371,1.131,1372,1.131,1373,1.131,1374,1.131,1375,5.048,1376,1.131,1377,1.054,1378,1.131,1379,1.131,1380,1.131,1381,1.054,1382,1.131,1383,1.131,1384,1.131,1385,1.131,1386,3.645,1387,1.131,1388,1.131,1389,2.659,1390,1.987,1391,1.131,1392,5.185,1393,1.131,1394,3.2,1395,4.017,1396,1.131,1397,1.131,1398,0.9,1399,2.659,1400,1.131,1401,1.131,1402,1.131,1403,1.131,1404,1.131,1405,1.054,1406,1.131,1407,3.2,1408,1.131,1409,1.131,1410,1.131,1411,1.987,1412,1.131,1413,1.054,1414,1.131,1415,1.747,1416,1.054,1417,1.131,1418,0.862,1419,1.131,1420,1.131,1421,1.131,1422,1.131,1423,1.131,1424,1.515,1425,1.131,1426,1.131,1427,0.943,1428,1.131,1429,2.659,1430,1.131,1431,1.131,1432,1.131,1433,1.131,1434,1.131,1435,1.131,1436,1.131,1437,1.131,1438,1.131,1439,0.9,1440,1.131,1441,1.131,1442,1.131,1443,1.987,1444,1.131,1445,1.131,1446,1.987,1447,1.131,1448,1.131,1449,1.131,1450,1.131,1451,1.131,1452,1.131,1453,1.054,1454,1.131,1455,1.131,1456,1.131,1457,1.054,1458,1.131,1459,1.131,1460,1.131,1461,1.131,1462,0.994,1463,0.994,1464,1.054,1465,1.131,1466,2.812,1467,0.943,1468,1.054,1469,1.131,1470,1.131,1471,1.131,1472,1.131,1473,1.853,1474,1.131,1475,1.987,1476,1.131,1477,2.984,1478,1.131,1479,1.131,1480,1.987,1481,1.131,1482,1.131,1483,1.131,1484,1.987,1485,1.131,1486,1.131,1487,1.131,1488,1.658,1489,1.131,1490,1.054,1491,1.054,1492,1.054,1493,1.054,1494,1.054,1495,1.054,1496,1.131,1497,1.131,1498,1.131,1499,1.131,1500,1.131,1501,1.131]],["title/classes/Subtask.html",[0,0.236,2217,3.204]],["body/classes/Subtask.html",[0,0.266,2,0.988,3,0.096,4,0.087,5,0.087,7,0.243,8,1.004,10,0.474,13,0.007,14,0.438,15,1.443,16,2.286,17,1.96,18,0.619,21,2.782,24,0.312,25,3.259,26,1.81,27,2.032,28,0.97,29,2.385,30,1.283,32,0.139,34,2.4,42,0.97,45,0.005,46,0.005,188,2.599,199,2.543,319,1.583,333,4.171,334,3.064,438,2.848,579,3.235,595,3.174,596,2.848,599,1.786,604,2.96,681,3.624,1306,5.299,1593,6.332,2217,5.281,2218,4.052,2219,5.332,2220,5.332,2221,5.332,2222,5.332,2223,4.052,2224,4.052,2225,4.737]],["title/controllers/SubtaskController.html",[47,1.346,2226,3.583]],["body/controllers/SubtaskController.html",[0,0.237,3,0.085,4,0.077,5,0.077,7,0.217,10,0.418,13,0.007,15,1.441,18,0.618,24,0.316,32,0.085,45,0.005,46,0.005,47,1.356,49,1.497,51,2.262,53,1.39,55,2.119,56,3.969,57,4.186,58,3.163,59,3.357,62,3.145,64,1.791,65,0.841,66,1.066,67,1.738,70,3.08,71,4.388,73,2.424,74,2.637,75,3.712,77,2.731,79,4.907,81,1.41,82,1.331,83,1.527,84,2.517,85,2.262,86,1.988,87,3.229,88,0.8,91,2.037,93,2.731,95,1.811,96,1.28,97,2.95,98,1.838,101,3.61,103,3.61,105,2.95,168,3.939,284,3.83,987,3.08,1590,5.348,2226,4.907,2227,4.22,2228,3.871,2229,4.75,2230,4.75,2231,4.75,2232,4.75,2233,5.348,2234,4.75,2235,4.75,2236,4.755,2237,4.22,2238,5.261,2239,4.75,2240,4.75,2241,4.75,2242,4.75,2243,4.22,2244,4.22]],["title/classes/SubtaskGateway.html",[0,0.236,2245,3.376]],["body/classes/SubtaskGateway.html",[0,0.309,2,1.147,3,0.111,4,0.101,5,0.101,7,0.282,8,1.104,10,0.407,13,0.007,14,0.523,15,1.084,17,1.383,18,0.576,24,0.308,32,0.111,45,0.006,46,0.006,53,1.65,64,1.409,65,0.662,66,0.839,67,1.308,426,4.833,700,4.742,702,4.972,706,3.844,707,3.032,708,4.576,709,3.559,710,3.559,711,3.844,712,4.207,2245,5.491,2246,5.499,2247,7.667,2248,6.19,2249,7.667,2250,6.19]],["title/modules/SubtaskModule.html",[107,1.346,224,3.204]],["body/modules/SubtaskModule.html",[0,0.28,3,0.1,4,0.091,5,0.091,13,0.007,24,0.363,26,1.869,28,1.019,32,0.1,45,0.005,46,0.005,49,2.269,65,0.77,81,1.664,82,1.57,83,1.802,88,0.944,107,2.272,109,2.289,110,2.236,111,2.529,112,2.529,113,2.403,114,3.499,115,3.412,118,3.249,119,2.185,120,2.464,122,2.529,125,2.464,126,2.597,224,6.146,579,2,681,3.809,850,4.14,852,3.809,2217,3.809,2224,5.473,2226,6.048,2236,6.124,2237,4.978,2245,5.157,2251,4.978,2252,4.978,2253,4.978,2254,5.604,2255,4.978,2256,5.604,2257,4.978,2258,5.604]],["title/injectables/SubtaskService.html",[128,0.959,2236,3.057]],["body/injectables/SubtaskService.html",[0,0.179,3,0.064,4,0.058,5,0.058,7,0.163,10,0.411,13,0.007,14,0.395,17,1.181,18,0.601,24,0.33,28,0.652,30,0.863,32,0.095,42,1.407,45,0.004,46,0.004,53,1.138,54,2.668,55,1.735,56,3.498,57,3.429,58,2.59,59,2.75,64,1.761,65,0.827,66,1.049,67,1.635,70,3.429,73,2.21,74,2.935,77,3.04,88,0.604,91,1.537,93,2.061,96,1.425,98,1.652,128,1.076,129,1.307,131,1.771,133,3.432,137,2.993,143,1.576,145,2.242,147,2.39,151,2.529,153,3.129,155,3.723,158,3.787,168,3.688,284,3.337,333,2.839,553,2.921,555,3.787,579,2.856,595,1.464,681,2.437,763,3.749,869,2.921,987,3.429,1074,3.185,1590,4.713,2217,5.583,2223,4.019,2233,4.713,2236,3.429,2238,4.309,2245,5.732,2255,3.185,2257,3.185,2259,3.185,2260,5.288,2261,6.282,2262,3.585,2263,3.585,2264,3.585,2265,5.288,2266,3.585,2267,3.585,2268,3.585,2269,3.585,2270,3.585,2271,3.585,2272,5.288,2273,3.585,2274,3.585,2275,3.585,2276,3.585,2277,3.585,2278,6.282,2279,5.288,2280,3.585,2281,6.935,2282,3.585,2283,3.585,2284,3.585,2285,3.585,2286,3.585,2287,3.585,2288,3.585,2289,3.585]],["title/classes/Task.html",[0,0.236,579,1.682]],["body/classes/Task.html",[0,0.238,2,0.882,3,0.085,4,0.078,5,0.078,7,0.217,8,0.931,9,2.929,10,0.489,12,3.818,13,0.007,14,0.534,15,1.521,16,2.041,17,1.84,18,0.653,21,3.142,24,0.259,25,3.415,26,1.678,27,1.814,28,0.866,29,2.211,30,1.146,31,1.944,32,0.116,33,1.736,34,2.268,40,1.958,41,2.772,42,0.866,45,0.005,46,0.005,147,1.47,199,2.872,319,1.413,334,3.219,579,2.307,580,3.228,593,4.891,595,2.999,596,3.549,599,1.595,604,2.642,609,2.476,621,3.235,850,2.737,897,4.229,1504,6.522,1864,3.235,2127,4.015,2290,3.879,2291,6.522,2292,4.76,2293,4.76,2294,4.76,2295,4.76,2296,6.465,2297,4.76,2298,4.76,2299,4.76,2300,3.879]],["title/classes/Task-1.html",[0,0.197,170,1.438,579,1.407]],["body/classes/Task-1.html",[0,0.164,2,0.607,3,0.059,4,0.053,5,0.053,7,0.149,8,0.712,9,2.375,10,0.49,13,0.007,14,0.551,15,1.503,16,1.404,17,1.33,18,0.645,21,3.191,24,0.3,25,3.372,26,1.283,27,1.248,28,0.595,29,1.69,30,0.788,31,1.338,32,0.134,34,2.198,40,2.352,41,2.119,42,0.595,45,0.004,46,0.004,66,1.189,188,1.842,199,3.131,319,0.972,321,2.123,334,2.999,438,3.057,508,3.54,569,1.927,575,3.196,579,2.54,580,2.618,593,3.697,595,2.432,596,3.267,599,2.838,604,1.818,609,3.448,646,3.706,650,5.083,657,2.489,658,2.226,659,2.123,660,3.756,661,3.756,662,3.359,726,2.668,850,1.883,909,4.852,916,3.756,917,3.54,918,3.756,950,4.263,2036,4.524,2217,4.507,2228,4.851,2300,2.668,2301,2.345,2302,5.953,2303,6.648,2304,3.275,2305,3.275,2306,3.275,2307,3.275,2308,3.275,2309,3.275,2310,3.275,2311,3.275,2312,3.275,2313,5.289,2314,3.275,2315,3.275,2316,3.275,2317,3.275,2318,2.909,2319,4.391,2320,3.275,2321,3.275,2322,3.275,2323,3.275,2324,3.275,2325,3.275,2326,2.668]],["title/controllers/TaskController.html",[47,1.346,2327,3.583]],["body/controllers/TaskController.html",[0,0.231,3,0.083,4,0.075,5,0.075,7,0.211,10,0.413,13,0.007,14,0.455,15,1.363,18,0.585,24,0.327,32,0.083,45,0.005,46,0.005,47,1.321,49,1.458,51,2.203,53,1.365,62,1.984,64,1.771,65,0.832,66,1.055,67,1.644,73,2.222,81,1.374,82,1.296,83,1.488,84,2.82,85,2.203,86,1.936,87,3.145,88,0.78,96,1.709,98,1.739,131,1.55,145,2.263,168,3.917,262,2.484,284,3.962,579,1.651,763,4.866,797,4.11,958,3.516,1220,3.145,1427,3.145,1590,5.29,1670,4.691,2233,5.29,2236,4.691,2238,5.167,2243,4.11,2244,4.11,2327,4.819,2328,4.11,2329,7.234,2330,6.34,2331,6.34,2332,7.234,2333,4.626,2334,6.34,2335,4.626,2336,4.626,2337,6.34,2338,4.626,2339,4.626,2340,6.34,2341,4.626,2342,4.626,2343,6.34,2344,4.626,2345,4.11,2346,4.626,2347,4.626,2348,4.626,2349,4.626,2350,4.626,2351,4.626,2352,4.626,2353,4.626]],["title/classes/TaskGateway.html",[0,0.236,532,3.204]],["body/classes/TaskGateway.html",[0,0.288,2,1.07,3,0.103,4,0.094,5,0.094,7,0.263,8,1.057,10,0.428,13,0.007,14,0.507,15,1.011,18,0.606,24,0.324,32,0.103,45,0.005,46,0.005,53,1.579,64,1.67,65,0.784,66,0.995,67,1.55,73,1.648,508,4.134,532,4.988,544,4.882,561,5.128,579,2.619,700,4.659,702,4.815,707,3.595,708,4.38,709,3.318,710,3.318,763,4.38,1738,5.128,2354,5.128,2355,7.338,2356,6.519,2357,5.772,2358,7.338,2359,5.772,2360,7.338,2361,5.772,2362,5.772,2363,5.772]],["title/classes/TaskGateway-1.html",[0,0.197,170,1.438,532,2.68]],["body/classes/TaskGateway-1.html",[0,0.308,2,1.141,3,0.11,4,0.1,5,0.1,7,0.281,8,1.101,10,0.406,13,0.007,14,0.522,15,1.078,17,1.375,18,0.574,24,0.333,32,0.11,45,0.006,46,0.006,53,1.645,64,1.401,65,0.658,66,0.834,67,1.301,426,4.824,532,5.194,700,4.736,702,4.96,706,3.824,707,3.016,708,4.561,709,4.394,710,3.54,711,3.824,712,4.185,823,4.679,2356,6.789,2364,5.47,2365,6.157,2366,7.642,2367,6.157]],["title/modules/TaskModule.html",[107,1.346,225,3.057]],["body/modules/TaskModule.html",[0,0.281,3,0.101,4,0.092,5,0.092,13,0.007,24,0.357,26,1.461,28,1.024,32,0.101,45,0.005,46,0.005,49,2.276,65,0.602,81,1.672,82,1.577,83,1.811,88,0.949,107,2.277,109,2.3,110,2.247,111,2.541,112,2.541,113,2.415,114,3.507,115,3.42,118,3.259,119,2.195,120,2.476,122,2.541,125,3.176,126,2.609,224,6.051,225,6.005,242,5.003,547,4.28,579,2.009,850,4.153,852,3.827,1670,6.128,2327,6.061,2345,5.003,2368,5.003,2369,5.631,2370,5.003,2371,5.003,2372,5.631,2373,5.631]],["title/injectables/TaskService.html",[128,0.959,1670,3.057]],["body/injectables/TaskService.html",[0,0.221,3,0.079,4,0.072,5,0.072,7,0.202,10,0.441,13,0.007,14,0.583,17,0.99,18,0.64,24,0.307,28,0.806,30,1.067,32,0.079,42,0.806,45,0.005,46,0.005,53,1.325,54,2.793,55,2.02,56,3.854,64,1.891,65,0.888,66,1.126,67,1.755,68,3.72,73,1.757,86,2.575,88,0.747,98,1.856,128,1.253,129,1.616,131,1.484,133,3.276,137,2.105,143,1.949,145,1.581,147,1.901,354,2.46,547,3.368,553,3.611,555,4.408,579,2.196,580,3.654,581,3.611,590,3.937,858,4.183,859,4.066,861,2.548,1670,3.991,2112,3.937,2169,4.678,2291,5.468,2374,3.937,2375,6.155,2376,6.155,2377,6.155,2378,4.431,2379,6.155,2380,4.431,2381,4.431,2382,4.431,2383,4.431,2384,6.155,2385,4.431,2386,6.155,2387,4.431,2388,4.431,2389,4.431,2390,4.431,2391,4.431,2392,4.431,2393,4.431,2394,4.431]],["title/classes/Team.html",[0,0.236,1568,2.928]],["body/classes/Team.html",[0,0.278,2,1.031,3,0.1,4,0.091,5,0.091,7,0.254,8,1.032,10,0.479,13,0.007,14,0.526,15,1.388,17,1.772,18,0.596,21,3.164,24,0.318,25,3.192,26,1.86,27,2.12,28,1.012,29,2.451,30,1.339,31,2.272,32,0.128,33,2.029,34,2.214,35,4.533,42,1.012,45,0.005,46,0.005,65,0.848,162,4.355,168,3.683,199,2.029,319,1.652,334,1.943,501,3.511,596,2.272,599,2.401,1568,4.925,1630,5.39,2395,4.533,2396,7.045,2397,5.563,2398,5.563,2399,5.563,2400,3.984,2401,4.942,2402,4.228,2403,4.942]],["title/controllers/TeamsController.html",[47,1.346,2404,3.583]],["body/controllers/TeamsController.html",[0,0.214,3,0.077,4,0.07,5,0.07,7,0.196,10,0.4,13,0.007,14,0.603,15,1.389,18,0.596,24,0.302,32,0.077,45,0.005,46,0.005,47,1.225,49,1.352,51,2.044,53,1.295,54,2.442,55,1.975,56,3.801,62,2.981,64,1.715,65,0.998,66,1.021,67,1.676,73,2.412,81,1.274,82,1.202,83,1.38,84,1.673,85,2.044,88,0.723,95,1.636,96,1.157,98,1.773,137,3.036,162,2.232,165,5.59,528,2.917,693,5.664,957,4.904,958,5.283,1568,3.738,2400,3.073,2404,4.574,2405,3.812,2406,3.812,2407,5.664,2408,6.175,2409,6.175,2410,4.291,2411,6.018,2412,4.291,2413,4.291,2414,4.291,2415,4.291,2416,3.812,2417,6.018,2418,4.291,2419,3.812,2420,4.291,2421,4.724,2422,3.812,2423,3.497,2424,4.291,2425,4.291,2426,4.291,2427,4.291,2428,6.018,2429,4.291,2430,4.291,2431,4.291]],["title/modules/TeamsModule.html",[107,1.346,226,3.376]],["body/modules/TeamsModule.html",[0,0.289,3,0.104,4,0.094,5,0.094,13,0.007,24,0.36,26,1.907,28,1.052,32,0.104,45,0.006,46,0.006,49,2.316,65,0.786,81,1.718,82,1.621,83,1.86,88,0.975,107,2.307,109,2.364,110,2.309,111,2.611,112,2.611,113,2.481,114,3.552,115,2.481,118,3.317,119,2.256,120,2.544,122,2.611,125,2.544,126,2.681,162,3.009,226,6.421,1568,3.594,1937,5.264,2400,4.144,2402,5.586,2404,6.139,2421,6.094,2422,5.141,2423,4.715,2432,5.141,2433,5.141,2434,5.786,2435,5.786,2436,5.786,2437,5.786]],["title/injectables/TeamsService.html",[128,0.959,2421,3.204]],["body/injectables/TeamsService.html",[0,0.151,3,0.054,4,0.049,5,0.049,7,0.138,10,0.385,13,0.007,14,0.589,17,1.535,18,0.568,24,0.276,28,0.55,30,0.728,32,0.054,42,1.374,45,0.003,46,0.003,53,1.002,54,2.648,55,1.861,58,2.778,59,2.949,64,1.651,65,0.959,66,1.024,67,1.533,73,2.228,88,0.51,96,1.254,98,1.621,128,0.947,129,1.103,131,1.559,133,3.241,137,2.885,142,1.879,143,1.33,145,1.661,147,2.638,151,2.794,153,2.872,155,3.418,162,4.323,165,5.059,170,1.697,319,0.898,333,1.624,354,3.147,432,2.167,448,1.526,587,4.507,901,4.134,1138,2.167,1568,5.461,1630,4.671,2017,3.333,2396,5.037,2400,2.167,2406,2.688,2408,4.134,2409,4.134,2416,4.134,2419,4.134,2421,3.163,2423,2.466,2438,2.688,2439,4.653,2440,4.653,2441,6.366,2442,4.653,2443,3.026,2444,5.67,2445,3.026,2446,4.653,2447,4.653,2448,6.366,2449,3.026,2450,4.653,2451,3.026,2452,3.026,2453,4.653,2454,3.026,2455,3.026,2456,3.026,2457,3.026,2458,3.026,2459,3.026,2460,3.026,2461,3.026,2462,3.026,2463,3.026,2464,4.653,2465,3.026,2466,3.026,2467,3.026,2468,3.026,2469,3.026,2470,2.688,2471,3.026,2472,4.653,2473,3.026,2474,4.653,2475,3.026,2476,3.026,2477,3.026,2478,4.653,2479,5.67,2480,4.653,2481,5.67,2482,3.026,2483,3.026,2484,3.026,2485,3.026,2486,4.653,2487,4.653,2488,3.026,2489,3.026,2490,3.026,2491,3.026]],["title/interfaces/Template.html",[336,1.719,1187,2.928]],["body/interfaces/Template.html",[0,0.069,3,0.044,4,0.04,5,0.108,7,0.063,8,0.469,10,0.315,13,0.007,14,0.462,17,0.728,24,0.179,32,0.025,42,1.203,45,0.002,46,0.002,54,1.676,55,1.069,65,0.419,82,2.092,84,0.54,96,0.373,98,1.326,110,0.552,119,1.27,131,0.464,137,1.684,145,2.36,147,1.379,151,2.193,153,1.47,168,1.07,170,1.429,188,2.976,194,0.941,198,3.394,253,4.51,336,1.188,355,2.039,368,0.659,438,1.601,441,0.86,446,0.897,448,0.698,451,3.192,453,2.896,463,0.768,501,3.239,569,0.949,580,0.609,582,4.012,587,0.86,599,1.313,646,1.509,684,0.941,700,0.72,707,1.92,755,2.475,761,2.397,771,0.991,859,1.873,932,1.578,982,3.803,1080,1.654,1083,1.052,1089,3.394,1090,1.052,1094,1.743,1138,1.743,1150,1.743,1151,0.826,1152,0.897,1153,1.052,1154,1.128,1155,1.128,1156,1.128,1157,1.128,1158,1.128,1159,1.128,1160,1.128,1161,1.128,1162,1.128,1163,1.128,1164,1.128,1165,1.128,1166,1.128,1167,1.128,1168,1.128,1169,1.128,1170,1.128,1171,1.128,1172,1.128,1173,1.128,1174,1.128,1175,1.128,1176,1.128,1177,1.983,1178,1.654,1179,1.983,1180,1.128,1181,2.654,1182,1.983,1183,0.897,1184,1.983,1185,1.052,1186,1.511,1187,5.327,1188,1.052,1189,1.511,1190,2.333,1191,1.052,1192,1.511,1193,0.941,1194,1.052,1195,3.394,1196,3.198,1197,1.983,1198,1.052,1199,4.736,1200,0.941,1201,1.128,1202,0.897,1203,3.639,1204,1.983,1205,1.983,1206,1.128,1207,2.475,1208,4.593,1209,1.743,1210,1.128,1211,1.983,1212,1.128,1213,1.052,1214,1.85,1215,1.128,1216,0.941,1217,1.128,1218,2.333,1219,1.85,1220,0.941,1221,0.941,1222,1.128,1223,0.991,1224,1.052,1225,1.128,1226,1.128,1227,1.128,1228,1.128,1229,2.654,1230,1.128,1231,1.983,1232,2.654,1233,1.128,1234,1.128,1235,1.052,1236,3.394,1237,1.983,1238,0.991,1239,5.535,1240,6.169,1241,2.654,1242,2.654,1243,1.128,1244,5.676,1245,1.85,1246,1.128,1247,1.052,1248,1.128,1249,1.128,1250,1.052,1251,1.128,1252,1.052,1253,1.052,1254,2.654,1255,2.654,1256,2.654,1257,4.327,1258,4.011,1259,4.327,1260,5.026,1261,4.011,1262,3.194,1263,5.498,1264,3.194,1265,5.591,1266,2.979,1267,4.036,1268,4.036,1269,4.011,1270,3.194,1271,5.042,1272,4.327,1273,5.591,1274,3.639,1275,1.128,1276,1.983,1277,1.128,1278,3.639,1279,1.128,1280,2.654,1281,1.128,1282,4.835,1283,1.128,1284,1.983,1285,2.654,1286,1.128,1287,2.654,1288,1.983,1289,1.128,1290,3.194,1291,2.654,1292,1.128,1293,1.983,1294,1.128,1295,1.128,1296,1.128,1297,1.128,1298,4.036,1299,1.128,1300,1.052,1301,1.128,1302,2.654,1303,1.128,1304,2.475,1305,1.128,1306,2.475,1307,1.128,1308,2.654,1309,1.128,1310,2.654,1311,2.475,1312,1.128,1313,1.128,1314,1.128,1315,2.475,1316,1.128,1317,1.128,1318,1.654,1319,1.983,1320,2.654,1321,1.052,1322,1.983,1323,1.128,1324,1.128,1325,2.475,1326,3.741,1327,1.128,1328,1.983,1329,1.983,1330,1.052,1331,4.011,1332,1.128,1333,2.979,1334,1.983,1335,1.983,1336,1.128,1337,1.128,1338,1.128,1339,1.052,1340,1.128,1341,1.128,1342,1.128,1343,4.599,1344,1.128,1345,1.128,1346,1.983,1347,1.128,1348,1.128,1349,1.128,1350,1.128,1351,1.128,1352,1.128,1353,1.128,1354,1.128,1355,1.128,1356,1.128,1357,1.128,1358,1.128,1359,1.128,1360,1.128,1361,0.941,1362,1.128,1363,1.983,1364,1.128,1365,1.128,1366,1.128,1367,1.128,1368,1.128,1369,1.128,1370,1.128,1371,1.128,1372,1.128,1373,1.128,1374,1.128,1375,5.042,1376,1.128,1377,1.052,1378,1.128,1379,1.128,1380,1.128,1381,1.052,1382,1.128,1383,1.128,1384,1.128,1385,1.128,1386,3.639,1387,1.128,1388,1.128,1389,2.654,1390,1.983,1391,1.128,1392,5.181,1393,1.128,1394,3.194,1395,4.011,1396,1.128,1397,1.128,1398,0.897,1399,2.654,1400,1.128,1401,1.128,1402,1.128,1403,1.128,1404,1.128,1405,1.052,1406,1.128,1407,3.194,1408,1.128,1409,1.128,1410,1.128,1411,1.983,1412,1.128,1413,1.052,1414,1.128,1415,1.743,1416,1.052,1417,1.128,1418,0.86,1419,1.128,1420,1.128,1421,1.128,1422,1.128,1423,1.128,1424,1.511,1425,1.128,1426,1.128,1427,0.941,1428,1.128,1429,2.654,1430,1.128,1431,1.128,1432,1.128,1433,1.128,1434,1.128,1435,1.128,1436,1.128,1437,1.128,1438,1.128,1439,0.897,1440,1.128,1441,1.128,1442,1.128,1443,1.983,1444,1.128,1445,1.128,1446,1.983,1447,1.128,1448,1.128,1449,1.128,1450,1.128,1451,1.128,1452,1.128,1453,1.052,1454,1.128,1455,1.128,1456,1.128,1457,1.052,1458,1.128,1459,1.128,1460,1.128,1461,1.128,1462,0.991,1463,0.991,1464,1.052,1465,1.128,1466,2.807,1467,0.941,1468,1.052,1469,1.128,1470,1.128,1471,1.128,1472,1.128,1473,1.85,1474,1.128,1475,1.983,1476,1.128,1477,2.979,1478,1.128,1479,1.128,1480,1.983,1481,1.128,1482,1.128,1483,1.128,1484,1.983,1485,1.128,1486,1.128,1487,1.128,1488,1.654,1489,1.128,1490,1.052,1491,1.052,1492,1.052,1493,1.052,1494,1.052,1495,1.052,1496,1.128,1497,1.128,1498,1.128,1499,1.128,1500,1.128,1501,1.128]],["title/injectables/TemplateEditorService.html",[128,0.959,1186,2.928]],["body/injectables/TemplateEditorService.html",[0,0.145,3,0.052,4,0.047,5,0.047,7,0.133,8,0.65,10,0.379,13,0.007,14,0.538,17,1.664,18,0.579,24,0.117,32,0.052,42,1.006,45,0.003,46,0.003,53,0.971,64,1.419,65,0.666,66,0.845,67,1.508,73,0.83,98,1.595,128,0.918,129,1.06,133,1.247,145,2.982,273,3.43,307,3.067,355,3.509,358,2.21,438,2.259,440,2.583,593,2.803,599,1.512,609,2.876,674,2.21,707,3.772,761,1.561,1005,4.191,1151,4.719,1152,5.127,1183,1.885,1186,2.803,1193,1.976,1200,3.067,1213,2.21,1326,2.21,1333,5.128,1339,2.21,1413,3.43,1415,2.082,1416,2.21,1418,1.806,1424,4.191,1638,2.583,1742,2.583,1767,2.21,1768,2.369,1779,2.583,1780,5.994,1818,3.677,1842,4.009,1863,3.067,1865,1.885,2492,2.369,2493,5.53,2494,6.232,2495,4.512,2496,6.232,2497,4.512,2498,4.512,2499,2.907,2500,4.512,2501,2.907,2502,6.747,2503,4.512,2504,5.53,2505,2.907,2506,2.907,2507,4.512,2508,2.907,2509,4.512,2510,2.907,2511,4.512,2512,2.583,2513,2.907,2514,2.907,2515,4.506,2516,2.907,2517,6.232,2518,2.907,2519,6.747,2520,2.907,2521,2.907,2522,2.907,2523,2.907,2524,4.512,2525,2.907,2526,2.907,2527,2.907,2528,2.907,2529,2.907,2530,2.907,2531,2.907,2532,2.907,2533,2.907,2534,2.907,2535,2.907,2536,2.907,2537,2.907,2538,4.009,2539,2.907,2540,2.907,2541,2.907,2542,2.907,2543,2.907,2544,2.907,2545,4.512,2546,2.907,2547,2.583,2548,2.907,2549,2.907,2550,2.907,2551,2.907,2552,2.907,2553,4.009,2554,2.907,2555,2.583,2556,2.583,2557,2.583,2558,2.907,2559,2.907,2560,2.907,2561,2.907,2562,2.907,2563,4.512,2564,2.907,2565,5.53,2566,2.907,2567,2.907,2568,2.907,2569,2.907,2570,2.907,2571,4.512,2572,5.53,2573,5.53,2574,6.232,2575,2.907,2576,2.907,2577,2.907,2578,2.907,2579,2.907,2580,7.179,2581,7.7,2582,2.907,2583,2.907]],["title/modules/TemplatePlaygroundModule.html",[107,1.346,2584,3.583]],["body/modules/TemplatePlaygroundModule.html",[0,0.26,3,0.093,4,0.085,5,0.085,13,0.007,24,0.366,32,0.093,45,0.005,46,0.005,107,1.488,109,2.129,110,2.079,111,2.352,112,3.467,113,3.295,114,3.379,115,2.235,118,3.099,119,2.032,120,2.292,125,2.292,1151,3.11,1152,3.379,1183,3.379,1185,3.961,1186,5.414,1187,4.266,1188,3.961,1189,5.414,1190,3.732,1191,3.961,1192,5.414,1193,3.542,1194,3.961,1361,6.352,2584,7.143,2585,4.63,2586,4.63,2587,4.63,2588,4.63,2589,5.211,2590,6.869,2591,6.869,2592,5.211,2593,4.63,2594,6.869,2595,5.211,2596,6.869,2597,5.211,2598,6.869,2599,5.211]],["title/classes/UpdateActivityDto.html",[0,0.236,78,3.376]],["body/classes/UpdateActivityDto.html",[0,0.348,2,1.293,3,0.125,4,0.114,5,0.114,13,0.007,24,0.331,32,0.125,33,3.006,45,0.006,46,0.006,55,2.289,61,4.741,78,5.903,92,5.684,319,2.071,1503,5.684,2600,6.197,2601,8.242,2602,6.197,2603,6.197]],["title/classes/UpdateCommentDto.html",[0,0.236,2604,3.842]],["body/classes/UpdateCommentDto.html",[0,0.351,2,1.301,3,0.126,4,0.114,5,0.114,7,0.32,8,1.192,10,0.373,13,0.007,14,0.52,18,0.527,32,0.126,45,0.006,46,0.006,761,4.722,1515,5.719,1517,6.234,2604,6.741,2605,7.349]],["title/classes/UpdateCommitmentDto.html",[0,0.236,941,3.204]],["body/classes/UpdateCommitmentDto.html",[0,0.377,2,1.12,3,0.108,4,0.099,5,0.099,7,0.276,8,1.088,10,0.401,13,0.007,15,1.323,18,0.568,24,0.346,32,0.108,33,2.755,45,0.006,46,0.006,55,1.983,66,1.17,188,2.816,319,1.794,580,3.624,906,5.601,921,5.902,939,3.919,940,4.593,941,5.135,1051,4.593,1511,5.601,1512,3.049,1520,4.925,1529,5.369,1534,5.369,1538,5.369,1573,6.711,2602,5.369,2603,5.369,2606,7.321,2607,7.554,2608,6.044,2609,6.044,2610,6.044]],["title/classes/UpdateSubtaskDto.html",[0,0.236,2233,3.204]],["body/classes/UpdateSubtaskDto.html",[0,0.336,2,1.247,3,0.121,4,0.11,5,0.11,7,0.307,8,1.162,10,0.428,13,0.007,14,0.507,18,0.606,32,0.121,45,0.006,46,0.006,66,1.214,188,3.008,595,3.53,1592,5.485,1593,7.043,1594,5.98,1596,5.98,2233,5.485,2611,7.678]],["title/classes/UpdateTaskDto.html",[0,0.236,525,3.376]],["body/classes/UpdateTaskDto.html",[0,0.295,2,1.094,3,0.106,4,0.096,5,0.096,7,0.269,8,1.072,10,0.478,13,0.007,14,0.566,18,0.677,32,0.106,45,0.006,46,0.006,66,1.289,525,5.332,569,3.514,573,5.84,575,4.377,580,3.585,592,5.064,594,6.645,595,3.331,1598,4.812,1599,5.246,1600,5.246,1601,5.246,1602,5.246,1603,5.246,1604,5.246,2612,8.129]],["title/classes/UpdateUserDto.html",[0,0.236,2613,3.583]],["body/classes/UpdateUserDto.html",[0,0.317,2,1.175,3,0.114,4,0.103,5,0.103,7,0.289,8,1.121,10,0.447,13,0.007,14,0.576,18,0.633,32,0.114,45,0.006,46,0.006,65,0.9,66,1.243,96,2.549,164,3.139,281,4.248,1607,4.543,1624,5.635,1625,5.635,1626,5.635,2613,5.916,2614,7.801]],["title/classes/User.html",[0,0.236,40,1.427]],["body/classes/User.html",[0,0.228,2,0.846,3,0.082,4,0.074,5,0.074,7,0.208,8,0.905,10,0.489,13,0.007,14,0.55,15,1.504,16,3.079,17,2.028,18,0.646,21,2.865,24,0.288,25,3.335,26,1.63,27,1.739,28,0.83,29,2.456,30,1.098,31,1.864,32,0.129,33,1.664,34,2.218,40,2.343,42,0.83,45,0.005,46,0.005,65,0.768,164,2.677,165,4.657,188,2.341,199,2.821,262,3.855,281,3.623,319,1.355,320,2.623,334,2.929,387,2.834,579,1.628,593,4.46,596,2.565,599,2.406,604,2.533,609,2.373,628,5.458,636,4.269,650,3.901,835,2.959,1900,3.718,2615,3.468,2616,4.562,2617,4.562,2618,4.562,2619,4.562,2620,4.562,2621,6.38,2622,4.562,2623,4.562,2624,4.562,2625,4.562,2626,4.562,2627,4.562,2628,4.562,2629,4.562,2630,4.562,2631,4.562,2632,4.562,2633,4.053,2634,3.718]],["title/classes/User-1.html",[0,0.197,40,1.194,170,1.438]],["body/classes/User-1.html",[0,0.272,2,0.692,3,0.067,4,0.061,5,0.061,7,0.17,8,0.927,10,0.495,13,0.007,14,0.541,15,1.484,16,2.337,17,1.971,18,0.656,21,2.822,24,0.315,25,3.282,26,1.835,27,1.424,28,0.679,29,2.419,30,1.549,31,2.628,32,0.115,34,2.185,40,1.948,42,0.679,45,0.004,46,0.004,53,0.804,65,0.688,164,2.398,188,2.636,197,3.319,199,2.579,257,3.319,262,3.454,281,3.246,319,1.109,320,2.148,333,2.006,334,2.248,335,4.89,355,1.943,387,2.32,438,2.226,569,2.758,579,2.524,593,3.996,596,2.628,599,2.369,604,3.025,609,3.678,628,4.89,631,3.319,636,2.539,656,2.539,762,3.571,764,3.996,771,2.675,835,2.422,837,2.839,1714,3.044,1900,3.044,1920,5.764,1947,4.221,1983,4.608,2033,3.044,2039,3.044,2318,3.319,2633,3.319,2634,3.044,2635,2.839,2636,6.434,2637,3.736,2638,3.736,2639,3.736,2640,3.736,2641,3.736,2642,3.736,2643,3.736,2644,3.736,2645,3.736,2646,3.736,2647,3.736,2648,3.736,2649,3.736,2650,3.736,2651,3.736,2652,3.736,2653,3.736,2654,3.319,2655,3.736,2656,3.736,2657,3.736,2658,3.736,2659,3.736,2660,3.736,2661,3.736,2662,3.736,2663,3.736,2664,3.736,2665,3.736,2666,3.736,2667,3.736,2668,3.736,2669,3.736]],["title/controllers/UserController.html",[47,1.346,2670,3.583]],["body/controllers/UserController.html",[0,0.224,3,0.08,4,0.073,5,0.073,7,0.205,10,0.408,13,0.007,14,0.556,15,1.412,18,0.606,24,0.308,32,0.08,45,0.005,46,0.005,47,1.283,49,1.415,51,2.139,53,1.337,54,2.762,55,2.039,56,3.877,57,4.029,58,3.043,59,3.231,62,3.054,64,1.749,65,0.821,66,1.042,67,1.704,70,2.912,71,4.223,73,2.383,74,2.493,75,3.572,77,2.582,79,4.722,81,1.334,82,1.258,83,1.444,84,2.422,85,2.139,86,1.879,87,3.053,88,0.757,91,1.926,93,2.582,95,1.712,96,1.211,97,2.79,98,1.802,101,3.414,103,3.414,105,2.79,137,3.064,151,2.759,858,3.053,861,4.797,1605,4.418,1671,3.99,1672,3.448,2613,5.841,2670,4.722,2671,3.99,2672,3.414,2673,4.491,2674,4.491,2675,4.491,2676,4.491,2677,4.491,2678,3.99,2679,5.063,2680,3.99,2681,4.491,2682,4.491,2683,4.491,2684,4.491,2685,4.491]],["title/modules/UserModule.html",[107,1.346,227,3.204]],["body/modules/UserModule.html",[0,0.291,3,0.104,4,0.095,5,0.095,13,0.007,24,0.353,26,1.513,28,1.06,32,0.104,40,1.765,45,0.006,46,0.006,49,2.327,65,0.623,81,1.731,82,1.633,83,1.875,88,0.982,107,2.315,109,2.381,110,2.326,111,2.631,112,2.631,113,2.5,114,3.565,115,3.476,118,3.332,119,2.273,120,2.564,122,2.631,125,2.564,126,2.701,227,6.201,387,4.587,388,4.175,1672,5.271,2670,6.161,2678,5.18,2686,5.18,2687,5.18,2688,5.18,2689,5.83,2690,5.83,2691,4.431,2692,5.83]],["title/controllers/UsersController.html",[47,1.346,2693,3.583]],["body/controllers/UsersController.html",[0,0.268,3,0.096,4,0.087,5,0.087,7,0.244,10,0.438,13,0.007,14,0.552,15,1.363,18,0.585,24,0.281,32,0.096,45,0.005,46,0.005,47,1.53,49,1.688,51,2.551,53,1.505,54,2.724,55,2.295,56,4.164,58,3.426,62,3.339,64,1.592,65,0.832,66,0.948,67,1.645,68,3.608,73,1.997,74,2.973,75,4.021,81,1.59,82,1.5,83,1.722,84,2.088,85,2.551,86,2.241,88,0.903,95,2.042,97,3.327,98,1.74,105,3.327,164,1.997,281,2.702,465,4.344,1605,4.021,1672,4.322,2672,4.071,2680,4.759,2693,5.315,2694,4.759,2695,4.759,2696,5.357,2697,5.357,2698,5.357,2699,4.759,2700,5.357,2701,5.357,2702,5.357]],["title/modules/UsersModule.html",[107,1.346,2703,3.583]],["body/modules/UsersModule.html",[0,0.291,3,0.104,4,0.095,5,0.095,13,0.007,24,0.353,26,1.509,28,1.058,32,0.104,40,1.761,45,0.006,46,0.006,49,2.323,65,0.622,81,1.727,82,1.629,83,1.87,88,0.98,107,2.312,109,2.375,110,2.32,111,2.624,112,2.624,113,2.494,114,3.56,115,3.472,118,3.327,119,2.267,120,2.557,122,2.624,125,2.557,126,2.695,387,4.58,388,4.165,1672,5.269,2691,4.42,2693,6.154,2699,5.166,2703,6.93,2704,5.166,2705,5.815,2706,5.815,2707,5.815,2708,5.815]],["title/injectables/UsersService.html",[128,0.959,1672,2.617]],["body/injectables/UsersService.html",[0,0.243,3,0.087,4,0.079,5,0.079,7,0.222,10,0.394,13,0.007,14,0.467,18,0.597,24,0.333,28,0.886,30,1.172,32,0.087,40,2.249,42,1.351,45,0.005,46,0.005,53,1.413,54,2.673,55,2.438,56,4.01,58,3.639,64,1.691,65,0.794,66,1.007,67,1.569,68,3.442,73,1.875,74,3.645,88,0.821,91,2.089,96,1.313,98,1.467,128,1.336,129,1.776,131,2.2,133,3.409,137,2.924,143,2.142,145,1.738,147,1.504,151,2.541,320,4.271,339,3.702,340,4.703,399,3.969,436,4.327,439,4.327,572,3.488,1080,4.463,1405,3.702,1605,4.772,1672,3.645,2025,3.969,2557,4.327,2672,5.645,2679,3.969,2691,3.702,2695,5.833,2709,4.327,2710,4.871,2711,4.871,2712,4.871,2713,4.871,2714,4.871,2715,4.871,2716,4.871,2717,4.871,2718,4.871,2719,4.871,2720,4.327,2721,4.327]],["title/injectables/UsersService-1.html",[128,0.802,170,1.438,1672,2.188]],["body/injectables/UsersService-1.html",[0,0.189,3,0.068,4,0.062,5,0.062,7,0.173,10,0.432,13,0.007,14,0.556,17,1.229,18,0.627,24,0.303,28,0.688,29,1.882,30,0.911,32,0.068,40,2.465,42,1.179,45,0.004,46,0.004,53,1.184,54,2.771,55,2.127,56,3.59,59,3.371,64,1.795,65,0.843,66,1.069,67,1.72,73,2.032,77,3.163,86,2.712,88,0.638,91,1.623,98,1.819,128,1.12,129,1.38,131,1.268,133,3.052,137,3.08,142,2.351,143,1.664,145,1.351,147,2.335,151,2.784,153,2.483,155,2.954,164,2.416,284,1.708,319,1.124,320,2.176,334,2.264,340,3.94,352,2.876,354,3.054,399,3.084,572,3.94,587,4.026,843,2.572,859,3.727,861,4.092,987,3.568,1013,4.888,1398,2.454,1605,4.092,1672,3.054,2017,2.71,2169,4.182,2672,4.182,2679,3.084,2691,2.876,2720,3.362,2721,3.362,2722,3.084,2723,7.116,2724,5.502,2725,4.888,2726,3.785,2727,3.785,2728,3.785,2729,3.785,2730,3.785,2731,5.502,2732,3.785,2733,4.888,2734,3.785,2735,3.785,2736,3.785,2737,3.785,2738,3.362,2739,3.785,2740,3.785,2741,5.502,2742,3.785]],["title/classes/Workspace.html",[0,0.236,41,2.021]],["body/classes/Workspace.html",[0,0.281,2,1.044,3,0.101,4,0.092,5,0.092,7,0.257,8,1.041,10,0.473,13,0.007,14,0.454,15,1.396,16,2.415,17,1.944,18,0.599,21,2.882,24,0.29,25,3.207,26,1.875,27,2.146,28,1.024,29,2.471,30,1.355,31,2.3,32,0.129,33,2.053,34,2.463,40,2.415,41,3.098,42,1.024,45,0.005,46,0.005,65,0.852,199,2.908,319,1.672,334,3.11,596,3.258,599,2.42,721,3.827,890,7.085,1630,5.421,2743,4.589,2744,5.631,2745,5.631,2746,5.631,2747,4.589]],["title/classes/Workspace-1.html",[0,0.197,41,1.691,170,1.438]],["body/classes/Workspace-1.html",[0,0.229,2,0.851,3,0.082,4,0.075,5,0.075,7,0.209,8,0.908,10,0.49,13,0.007,14,0.396,15,1.423,16,1.968,17,1.733,18,0.611,21,3.094,24,0.326,25,3.201,26,1.636,27,1.749,28,0.835,29,2.157,30,1.105,31,1.875,32,0.129,34,1.418,41,3.602,42,0.835,45,0.005,46,0.005,65,0.77,162,4.034,199,3.137,239,4.299,240,4.078,262,4.164,319,1.363,334,2.516,569,3.024,596,2.943,599,2.936,636,4.286,638,4.671,639,6.4,664,2.851,669,5.029,684,5.272,721,3.12,762,4.513,772,3.74,1630,5.272,2400,3.287,2747,3.74,2748,3.488,2749,4.59,2750,4.59,2751,4.59,2752,4.59,2753,4.59,2754,4.078,2755,6.4,2756,3.74]],["title/controllers/WorkspaceController.html",[47,1.346,2757,3.583]],["body/controllers/WorkspaceController.html",[0,0.229,3,0.082,4,0.075,5,0.075,7,0.209,10,0.412,11,3.594,12,3.279,13,0.007,14,0.576,15,1.423,18,0.611,24,0.289,32,0.082,45,0.005,46,0.005,47,1.311,49,1.446,51,2.186,53,1.357,54,2.77,55,2.069,56,3.912,57,4.089,58,3.089,62,3.089,64,1.765,65,0.829,66,1.051,67,1.718,68,3.767,70,2.976,71,4.286,73,2.215,74,2.548,75,3.626,81,1.363,82,1.286,83,1.476,84,1.789,85,2.186,86,1.92,87,3.12,88,0.773,91,1.968,95,1.749,96,1.237,97,2.851,98,1.816,101,3.488,105,2.851,151,2.781,858,3.12,861,3.626,1627,5.555,1673,4.671,2050,3.74,2407,5.139,2757,4.793,2758,4.078,2759,4.59,2760,4.078,2761,6.306,2762,4.59,2763,4.59,2764,4.59,2765,4.59,2766,4.59,2767,4.078,2768,4.078,2769,4.59,2770,4.59,2771,4.59,2772,4.59,2773,4.59,2774,4.59,2775,4.59]],["title/classes/WorkspaceGateway.html",[0,0.236,2776,3.583]],["body/classes/WorkspaceGateway.html",[0,0.309,2,1.147,3,0.111,4,0.101,5,0.101,7,0.282,8,1.104,10,0.407,13,0.007,14,0.523,15,1.084,17,1.383,18,0.576,24,0.308,32,0.111,45,0.006,46,0.006,53,1.65,64,1.409,65,0.662,66,0.839,67,1.308,426,4.833,700,4.742,702,4.972,706,3.844,707,3.032,708,4.576,709,3.559,710,3.559,711,3.844,712,4.207,2776,5.827,2777,5.499,2778,7.667,2779,6.19,2780,7.667,2781,6.19]],["title/modules/WorkspaceModule.html",[107,1.346,228,3.204]],["body/modules/WorkspaceModule.html",[0,0.262,3,0.094,4,0.086,5,0.086,13,0.007,24,0.367,26,2.125,28,0.954,32,0.094,41,2.25,45,0.005,46,0.005,49,2.174,65,0.875,81,1.558,82,1.47,83,1.687,88,0.884,107,2.201,109,2.143,110,2.093,111,2.368,112,2.368,113,2.25,114,3.39,115,3.306,118,3.113,119,2.046,120,2.307,122,2.368,125,2.307,126,2.431,228,6.051,579,1.872,646,2.431,656,3.566,664,4.285,669,3.402,721,4.69,726,4.276,727,4.661,728,4.661,850,3.967,852,3.566,1673,6.066,2757,5.859,2767,4.661,2776,5.244,2782,4.661,2783,4.661,2784,4.661,2785,5.247,2786,4.276,2787,5.247,2788,5.247,2789,5.244,2790,5.247,2791,5.247]],["title/injectables/WorkspaceService.html",[128,0.959,1673,3.057]],["body/injectables/WorkspaceService.html",[0,0.196,3,0.07,4,0.064,5,0.064,7,0.179,9,1.564,10,0.407,11,3.352,12,2.935,13,0.007,14,0.56,17,1.261,18,0.633,24,0.308,28,0.713,30,0.943,32,0.07,41,1.681,42,1.202,45,0.004,46,0.004,53,1.215,54,2.782,55,1.852,56,3.649,64,1.745,65,0.853,66,1.039,67,1.738,68,3.352,73,1.611,86,2.361,88,0.66,91,1.681,98,1.838,128,1.149,129,1.429,131,1.313,133,3.102,137,2.731,143,1.724,145,1.399,147,2.042,151,1.341,199,1.429,284,1.769,319,1.164,334,1.369,426,2.176,628,2.979,732,4.599,859,2.254,987,3.659,1075,5.013,1398,2.542,1627,5.181,1630,4.494,1673,3.659,2169,4.289,2407,4.599,2725,5.013,2733,5.013,2738,3.482,2760,5.013,2768,3.482,2786,3.194,2792,3.482,2793,7.233,2794,7.233,2795,3.919,2796,3.919,2797,3.919,2798,3.919,2799,3.919,2800,3.919,2801,3.919,2802,3.919,2803,3.919,2804,3.919,2805,5.643,2806,3.919,2807,3.919,2808,3.919,2809,3.919,2810,3.919,2811,5.643,2812,3.919,2813,3.919,2814,3.919,2815,3.919,2816,5.643,2817,3.919,2818,3.919,2819,3.919,2820,3.919,2821,5.643]],["title/classes/WorkspaceSubtask.html",[0,0.236,722,3.376]],["body/classes/WorkspaceSubtask.html",[0,0.284,2,1.054,3,0.102,4,0.093,5,0.093,7,0.259,8,1.047,10,0.448,13,0.007,14,0.457,15,1.403,16,2.438,17,1.949,18,0.602,21,2.269,24,0.321,25,3.218,26,1.886,27,2.167,28,1.034,29,2.486,30,1.369,31,2.323,32,0.13,33,2.074,34,2.475,42,1.034,45,0.005,46,0.005,188,2.709,199,2.074,319,1.688,334,1.986,438,2.969,579,2.859,595,3.273,596,2.969,599,1.905,604,3.156,669,5.658,722,5.206,723,4.322,907,5.196,2754,5.052,2822,4.634,2823,5.686,2824,5.686,2825,5.686,2826,5.052]],["title/classes/WorkspaceTask.html",[0,0.236,669,3.057]],["body/classes/WorkspaceTask.html",[0,0.238,2,0.884,3,0.085,4,0.078,5,0.078,7,0.217,8,0.933,9,2.932,10,0.481,13,0.007,14,0.534,15,1.443,16,2.045,17,1.761,18,0.619,21,2.932,24,0.316,25,3.313,26,1.68,27,1.818,28,0.867,29,2.214,30,1.148,32,0.132,34,2.27,41,3.844,42,0.867,45,0.005,46,0.005,66,0.877,199,2.874,319,1.416,334,2.261,446,5.343,579,2.31,580,3.232,595,3.002,596,3.002,599,2.64,638,3.093,650,4.021,659,4.765,662,4.995,669,4.765,722,5.645,1637,3.887,2228,6.423,2755,5.752,2786,3.887,2789,3.625,2827,3.625,2828,4.77,2829,4.77,2830,4.77,2831,4.77,2832,4.77,2833,4.77,2834,4.77,2835,4.77,2836,3.887,2837,4.238]],["title/injectables/ZipExportService.html",[128,0.959,1189,2.928]],["body/injectables/ZipExportService.html",[0,0.193,3,0.069,4,0.063,5,0.117,7,0.176,10,0.348,13,0.007,14,0.479,18,0.493,24,0.155,32,0.069,38,3.435,42,1.387,45,0.004,46,0.004,53,1.203,64,1.272,65,0.597,66,0.757,67,1.386,98,0.864,128,1.137,129,1.41,145,2.836,147,1.194,170,2.038,621,4.46,674,4.247,707,2.738,835,3.624,859,2.223,1151,4.29,1183,2.508,1187,4.465,1189,3.471,1190,5.461,1193,2.628,1195,2.939,1199,2.77,1200,2.628,1207,2.939,1208,6.295,1209,5.868,1219,2.939,1238,4.7,1247,2.939,1315,2.939,1418,2.402,1424,3.471,1439,4.255,1457,4.247,1463,2.77,1473,6.04,1477,5.463,1488,3.798,1490,2.939,1491,2.939,1492,2.939,1493,2.939,1494,2.939,1495,2.939,1767,2.939,1768,3.151,1796,3.151,1818,3.151,1823,4.965,1834,3.435,1978,3.435,2034,3.151,2125,3.435,2211,3.435,2538,3.435,2547,5.83,2553,5.83,2555,4.965,2556,5.83,2838,5.858,2839,3.151,2840,5.588,2841,5.588,2842,7.188,2843,5.588,2844,3.867,2845,5.588,2846,3.867,2847,8.389,2848,3.867,2849,4.554,2850,3.867,2851,3.867,2852,3.867,2853,5.83,2854,3.867,2855,3.867,2856,3.867,2857,3.867,2858,3.867,2859,3.867,2860,3.867,2861,3.867,2862,3.867,2863,3.867,2864,3.867,2865,3.867,2866,3.867,2867,3.867,2868,3.867,2869,5.588,2870,3.867,2871,5.588,2872,3.867,2873,3.867,2874,3.867,2875,7.188,2876,3.867,2877,3.867,2878,3.867,2879,3.867,2880,3.867,2881,3.867,2882,3.867,2883,3.867,2884,6.562,2885,3.867,2886,3.867,2887,3.867,2888,3.867,2889,3.867,2890,3.867,2891,3.867,2892,5.588,2893,3.867,2894,3.867,2895,3.867,2896,3.867,2897,3.435,2898,3.435,2899,3.867,2900,3.867,2901,3.867,2902,3.867,2903,3.867]],["title/coverage.html",[1221,4.365]],["body/coverage.html",[0,0.465,1,1.206,5,0.027,6,2.351,10,0.413,13,0.007,40,0.874,41,1.237,43,1.28,45,0.002,46,0.002,47,2.224,48,1.28,50,1.496,61,1.144,78,1.206,89,1.144,113,0.722,128,1.72,130,1.496,147,0.52,160,2.066,161,2.351,162,1.969,163,1.496,171,1.496,175,2.351,176,1.372,178,1.496,179,1.496,207,1.372,208,1.496,211,1.28,239,1.005,243,1.206,250,1.28,264,1.496,268,1.206,269,2.877,278,1.206,286,1.28,291,1.722,295,1.206,300,1.206,312,1.046,320,2.177,322,1.092,331,1.28,336,2.451,379,1.144,380,1.206,387,1.792,397,2.351,415,2.351,462,1.28,464,2.351,466,1.092,468,1.206,471,1.144,473,1.144,478,1.206,489,1.28,490,2.351,491,1.144,494,1.28,496,1.144,501,4.789,506,1.206,507,1.496,514,1.206,525,1.206,529,1.092,532,1.961,543,1.372,544,1.659,545,1.961,551,1.496,579,1.03,591,2.351,597,1.206,607,1.28,609,0.876,612,2.877,613,2.877,620,1.372,626,2.351,640,1.372,642,2.351,644,1.372,646,1.754,647,2.711,663,1.372,664,2.351,666,2.193,669,1.092,675,2.877,682,1.961,683,1.496,688,1.722,695,1.496,698,1.792,699,1.496,713,1.496,721,1.961,722,1.206,723,1.28,730,1.496,750,1.496,760,2.351,773,1.28,775,1.28,776,1.496,794,1.092,806,1.372,807,1.496,850,1.659,853,1.496,904,1.206,905,2.193,927,1.28,929,1.28,930,3.409,933,1.28,934,1.28,937,1.046,939,1.092,941,1.144,952,1.206,997,1.206,998,1.496,1019,1.206,1020,1.496,1056,1.496,1150,1.206,1151,4.012,1152,3.568,1153,3.409,1178,1.144,1186,1.046,1187,1.046,1189,1.046,1192,1.046,1196,1.206,1221,1.144,1361,1.144,1424,1.046,1439,1.092,1502,1.496,1503,2.351,1513,1.372,1514,1.496,1515,2.351,1519,1.496,1520,2.351,1539,1.496,1540,1.496,1548,1.144,1568,1.046,1577,1.144,1578,1.496,1579,1.496,1583,1.28,1590,1.144,1591,1.496,1592,2.351,1597,1.496,1598,2.351,1605,1.659,1606,2.351,1607,3.213,1623,1.496,1627,1.206,1628,1.496,1629,1.496,1646,1.28,1647,1.496,1648,1.496,1664,1.28,1667,1.496,1670,1.092,1672,1.602,1673,1.092,1720,1.496,1746,1.496,1747,2.351,1753,2.351,1754,2.351,1852,1.496,1853,1.496,1855,2.351,1880,1.496,1881,1.496,1885,1.496,1894,1.496,1906,1.372,1907,1.496,1908,1.496,1911,2.877,1921,1.372,1923,1.496,1924,1.496,1933,2.351,1937,2.066,1939,2.351,1947,1.005,1948,3.409,1960,1.206,1962,1.28,1964,1.206,1965,1.496,1986,1.206,1987,2.351,2019,1.092,2032,1.28,2088,1.496,2127,1.046,2128,2.351,2134,1.28,2136,1.28,2137,1.496,2147,1.144,2164,1.496,2189,1.496,2203,1.496,2204,1.496,2206,1.496,2217,1.144,2218,2.877,2223,1.28,2224,1.28,2226,1.28,2227,1.496,2233,1.144,2236,1.092,2245,1.206,2246,1.496,2259,1.496,2290,2.351,2301,2.711,2326,1.372,2327,1.28,2328,1.496,2354,1.496,2364,1.496,2374,1.496,2395,2.351,2402,1.28,2404,1.28,2405,1.496,2421,1.144,2438,1.496,2492,2.351,2512,1.496,2515,1.372,2600,1.496,2604,1.372,2605,1.496,2606,1.496,2611,1.496,2612,1.496,2613,1.28,2614,1.496,2615,2.877,2635,2.877,2670,1.28,2671,1.496,2693,1.28,2694,1.496,2709,1.496,2722,2.351,2743,2.351,2748,2.877,2756,1.372,2757,1.28,2758,1.496,2776,1.28,2777,1.496,2789,1.28,2792,1.496,2822,2.351,2827,2.877,2836,1.372,2838,2.351,2839,2.351,2849,1.372,2904,1.684,2905,1.684,2906,7.117,2907,7.681,2908,7.429,2909,8.677,2910,9.176,2911,7.681,2912,6.932,2913,6.207,2914,1.684,2915,1.684,2916,8.279,2917,7.429,2918,6.207,2919,3.786,2920,2.563,2921,1.496,2922,1.684,2923,1.684,2924,1.684,2925,1.684,2926,1.684,2927,1.684]],["title/dependencies.html",[110,2.261,1466,2.823]],["body/dependencies.html",[0,0.35,13,0.007,28,0.979,30,1.295,45,0.005,46,0.005,88,0.907,110,2.147,190,4.781,191,3.658,193,4.357,232,3.854,311,3.343,318,3.854,327,3.212,414,4.781,493,4.386,569,2.098,709,3.094,710,4.033,1250,4.09,1377,4.09,1512,2.715,1574,4.781,1860,5.932,1861,4.386,1890,4.781,2928,5.381,2929,5.381,2930,5.381,2931,5.381,2932,5.381,2933,5.381,2934,7.804,2935,5.381,2936,8.577,2937,5.381,2938,5.381,2939,5.381,2940,5.381,2941,7.015,2942,7.015,2943,5.381,2944,5.381,2945,5.381,2946,5.381,2947,5.381,2948,5.381,2949,5.381,2950,5.381,2951,5.381,2952,5.381,2953,5.381,2954,5.381,2955,5.381,2956,5.381,2957,5.381,2958,5.381,2959,5.381,2960,5.381,2961,5.381,2962,5.381,2963,5.381,2964,5.381,2965,5.381,2966,5.381,2967,5.381,2968,5.381,2969,5.381,2970,5.381,2971,5.381,2972,5.381,2973,5.381,2974,5.381,2975,5.381,2976,5.381,2977,5.381,2978,5.381,2979,5.381]],["title/miscellaneous/enumerations.html",[2980,2.449,2981,5.034]],["body/miscellaneous/enumerations.html",[7,0.222,13,0.007,40,1.991,41,2.82,45,0.005,46,0.005,446,4.264,508,4.709,579,2.346,647,3.496,649,5.815,657,5.651,658,5.815,659,5.159,660,6.502,661,6.502,662,6.043,666,3.71,673,5.842,675,3.71,905,3.71,907,4.264,909,4.264,916,4.997,917,4.709,918,4.997,921,4.709,924,4.336,925,4.336,973,3.978,1005,6.066,1946,5.842,2042,5.358,2301,3.496,2303,5.842,2313,5.842,2319,5.842,2621,5.842,2980,3.032,2981,4.336,2982,6.06,2983,5.358,2984,4.336,2985,4.336,2986,4.881,2987,6.575,2988,4.881,2989,6.575,2990,4.881,2991,4.881]],["title/miscellaneous/functions.html",[2980,2.449,2992,5.034]],["body/miscellaneous/functions.html",[7,0.334,13,0.007,45,0.006,46,0.006,67,1.548,113,3.84,137,2.507,2921,6.512,2980,4.552,2992,6.512,2993,7.329]],["title/index.html",[7,0.215,2853,4.188]],["body/index.html",[4,0.069,9,1.693,13,0.007,45,0.004,46,0.004,120,3.604,203,3.039,700,2.207,738,6.229,758,3.77,759,5.63,1009,7.48,1104,3.77,1214,4.538,1218,3.039,1221,2.885,1439,3.872,1462,4.277,1468,3.225,1576,4.657,1615,2.885,1717,3.458,1792,3.77,1796,3.458,1865,2.752,1974,3.77,2062,3.225,2127,4.657,2401,3.77,2470,3.77,2580,3.77,2654,3.77,2897,6.661,2898,5.305,2994,4.244,2995,4.244,2996,6.909,2997,5.971,2998,4.244,2999,4.244,3000,5.971,3001,6.909,3002,4.244,3003,4.244,3004,4.244,3005,8.596,3006,4.244,3007,4.244,3008,4.244,3009,5.971,3010,4.244,3011,6.909,3012,4.244,3013,5.971,3014,4.244,3015,4.244,3016,4.244,3017,4.244,3018,4.244,3019,7.498,3020,8.596,3021,8.196,3022,5.971,3023,4.244,3024,4.244,3025,4.244,3026,5.971,3027,5.971,3028,4.244,3029,4.244,3030,5.971,3031,7.902,3032,7.498,3033,4.244,3034,5.971,3035,4.244,3036,4.244,3037,4.244,3038,4.244,3039,7.498,3040,4.244,3041,4.244,3042,4.244,3043,4.244,3044,5.971,3045,4.244,3046,4.244,3047,4.244,3048,4.244,3049,4.244,3050,5.971,3051,4.244,3052,4.244,3053,4.244,3054,4.244,3055,4.244,3056,6.661,3057,4.244,3058,4.244,3059,4.244,3060,4.244,3061,4.244,3062,4.244,3063,4.244,3064,4.244,3065,5.971,3066,4.244,3067,4.244,3068,4.244,3069,4.244,3070,4.244,3071,4.244,3072,5.971,3073,4.244,3074,4.244,3075,4.244,3076,4.244,3077,4.244,3078,5.971,3079,4.244,3080,4.244,3081,4.244,3082,5.971,3083,5.971,3084,4.244,3085,4.244,3086,4.244,3087,4.244,3088,4.244,3089,4.244,3090,4.244,3091,4.244,3092,3.77,3093,4.244,3094,4.244,3095,4.244,3096,4.244,3097,4.244,3098,4.244,3099,3.77]],["title/modules.html",[109,2.623]],["body/modules.html",[13,0.006,45,0.006,46,0.006,108,4.398,109,2.364,214,4.398,217,4.144,218,4.144,219,4.144,220,4.144,221,4.144,222,4.144,223,4.144,224,3.933,225,3.752,226,4.144,227,3.933,228,3.933,239,4.387,550,4.144,1218,4.144,1719,5.141,2584,4.398,2593,8.594,2703,4.398,3056,8.594,3100,9.674,3101,9.694]],["title/overview.html",[1216,4.365]],["body/overview.html",[2,0.609,13,0.007,45,0.004,46,0.004,49,1.035,89,4.053,107,0.938,108,5.047,109,1.341,110,1.31,111,1.482,112,1.482,113,1.408,114,1.444,115,1.408,116,2.917,117,2.917,118,2.235,119,1.28,120,1.444,129,1.197,170,1.197,177,2.676,214,7.091,215,2.917,216,2.917,217,6.153,218,5.365,219,5.732,220,6.072,221,4.271,222,5.732,223,5.365,224,5.285,225,5.311,226,5.104,227,5.285,228,5.285,239,4.777,312,4.83,322,3.867,376,2.917,377,2.917,378,2.917,379,4.053,380,4.271,435,2.496,463,1.823,466,3.867,501,1.609,529,5.042,550,5.104,623,2.917,624,2.917,625,2.917,674,2.496,688,4.981,716,2.917,717,2.917,718,2.917,794,5.042,844,2.917,845,2.917,846,2.917,937,4.83,997,4.271,1047,2.917,1048,2.917,1049,2.917,1178,2.232,1186,3.704,1189,3.704,1192,3.704,1216,2.232,1361,5.285,1659,2.917,1661,2.917,1670,5.042,1672,4.633,1673,5.042,1964,4.271,2019,5.042,2080,2.917,2081,2.917,2082,2.917,2147,5.285,2158,2.917,2159,2.917,2160,2.917,2236,5.042,2251,2.917,2252,2.917,2253,2.917,2368,2.917,2370,2.917,2371,2.917,2421,4.053,2432,2.917,2433,2.917,2584,6.444,2585,2.917,2586,2.917,2587,2.917,2588,2.917,2686,2.917,2687,2.917,2688,2.917,2703,5.416,2704,2.917,2782,2.917,2783,2.917,2784,2.917,3102,3.284,3103,3.284,3104,3.284,3105,3.284]],["title/properties.html",[8,0.816,1466,2.823]],["body/properties.html",[8,1.056,9,2.924,13,0.007,45,0.006,46,0.006,3092,6.512,3099,6.512,3106,7.329,3107,7.329,3108,7.329]],["title/routes.html",[1220,4.365]],["body/routes.html",[13,0.006,45,0.006,46,0.006,1220,5.145]],["title/miscellaneous/typealiases.html",[2980,2.449,3109,5.667]],["body/miscellaneous/typealiases.html",[7,0.264,10,0.39,13,0.007,45,0.006,46,0.006,269,4.398,320,5.155,331,5.586,397,4.715,415,4.565,465,3.594,575,3.106,580,2.544,612,4.398,613,5.586,620,5.99,647,4.144,663,5.99,764,3.594,906,3.933,907,3.752,930,4.398,933,5.586,934,5.586,947,4.398,948,4.996,949,4.398,950,4.144,1418,3.594,1583,5.586,1585,4.715,1586,4.715,1911,4.398,1920,5.99,1921,5.99,1948,4.398,1960,5.264,1961,5.141,2218,4.398,2223,5.586,2301,4.144,2326,5.99,2615,4.398,2635,4.398,2722,4.715,2748,4.398,2756,5.99,2827,4.398,2836,5.99,2980,3.594,2982,4.715,2983,4.715,3110,5.786,3111,5.141,3112,5.786,3113,5.141,3114,6.53,3115,5.786,3116,7.35,3117,5.141,3118,5.141,3119,5.141,3120,5.786,3121,5.141,3122,5.141]],["title/miscellaneous/variables.html",[2980,2.449,3123,5.034]],["body/miscellaneous/variables.html",[6,3.33,7,0.186,10,0.391,13,0.007,14,0.365,43,4.418,44,3.63,45,0.004,46,0.004,239,3.47,387,4.579,491,5.295,494,4.418,545,5.011,591,3.33,599,3.206,611,4.738,612,3.105,613,4.418,626,3.33,640,4.738,641,3.63,642,3.33,644,4.738,645,3.63,647,2.926,664,5.028,665,5.603,666,3.105,675,3.105,721,5.011,723,4.418,760,3.33,773,4.418,774,3.63,850,4.239,905,3.105,927,4.418,928,3.63,1005,5.945,1151,4.039,1152,2.65,1424,3.611,1664,4.418,1753,3.33,1754,4.738,1911,3.105,1922,3.63,1933,3.33,1937,5.28,1938,4.738,1939,3.33,1948,3.105,1962,4.418,1963,3.63,2128,3.33,2134,4.418,2135,3.63,2218,3.105,2224,4.418,2225,3.63,2290,3.33,2300,4.738,2301,2.926,2395,3.33,2402,4.418,2403,3.63,2492,4.738,2515,4.738,2615,3.105,2634,4.738,2635,3.105,2743,3.33,2747,4.738,2748,3.105,2789,4.418,2822,3.33,2826,3.63,2827,3.105,2837,3.63,2838,3.33,2839,4.738,2849,4.738,2920,3.63,2980,2.538,2982,4.738,2983,4.738,2984,5.165,2985,3.63,3111,3.63,3113,3.63,3114,3.63,3117,3.63,3118,3.63,3119,3.63,3121,5.165,3122,3.63,3123,3.63,3124,4.086,3125,4.086,3126,4.086,3127,4.086,3128,4.086,3129,4.086,3130,4.086,3131,5.814,3132,4.086,3133,4.086,3134,5.814,3135,4.086,3136,4.086,3137,4.086]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":501,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Team.html":{},"interfaces/Template.html":{},"coverage.html":{},"overview.html":{}}}],["0.0.1",{"_index":3107,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2975,"title":{},"body":{"dependencies.html":{}}}],["0.125rem",{"_index":1337,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.14.1",{"_index":2952,"title":{},"body":{"dependencies.html":{}}}],["0.15s",{"_index":1322,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.24.1",{"_index":2930,"title":{},"body":{"dependencies.html":{}}}],["0.25rem",{"_index":1346,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.375rem",{"_index":1344,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.3s",{"_index":1286,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.5.1",{"_index":2951,"title":{},"body":{"dependencies.html":{}}}],["0.5px",{"_index":1314,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.5rem",{"_index":1282,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.6.0",{"_index":2969,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":1329,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.75rem",{"_index":1331,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0.875rem",{"_index":1272,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0/1",{"_index":2910,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2919,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2924,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["0/25",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["0/28",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2917,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2912,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2913,"title":{},"body":{"coverage.html":{}}}],["004085",{"_index":1352,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["0056b3",{"_index":1351,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["007bff",{"_index":1325,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["08",{"_index":1546,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["1",{"_index":170,"title":{"classes/AddMemberDto-1.html":{},"classes/CalendarTask-1.html":{},"classes/Column-1.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService-1.html":{},"classes/CreateUserDto-1.html":{},"interfaces/JwtPayload-1.html":{},"classes/Member-1.html":{},"classes/RegisterDto-1.html":{},"classes/Task-1.html":{},"classes/TaskGateway-1.html":{},"classes/User-1.html":{},"injectables/UsersService-1.html":{},"classes/Workspace-1.html":{}},"body":{"injectables/CalendarService.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"injectables/NotificationService.html":{},"classes/RegisterDto-1.html":{},"interfaces/Session.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{},"overview.html":{}}}],["1.0.0",{"_index":2970,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2955,"title":{},"body":{"dependencies.html":{}}}],["1.5rem",{"_index":1316,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1/11",{"_index":2923,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"overview.html":{}}}],["10.0.3",{"_index":2940,"title":{},"body":{"dependencies.html":{}}}],["10.0.6",{"_index":2939,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":2938,"title":{},"body":{"dependencies.html":{}}}],["10.4.7",{"_index":2936,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1145,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["100vh",{"_index":1243,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["10px",{"_index":1830,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["12px",{"_index":1338,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["14",{"_index":2527,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["15m",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["16t00:00:00.000z",{"_index":2049,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["16t10:00:00z",{"_index":1547,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["17",{"_index":3103,"title":{},"body":{"overview.html":{}}}],["17.11.0",{"_index":2963,"title":{},"body":{"dependencies.html":{}}}],["17.2.3",{"_index":2959,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":3102,"title":{},"body":{"overview.html":{}}}],["1c7430",{"_index":1359,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1d",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["1e7e34",{"_index":1358,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1fr",{"_index":1297,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1px",{"_index":1267,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["1rem",{"_index":1261,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["2",{"_index":674,"title":{"classes/Column-2.html":{}},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{},"overview.html":{}}}],["2.2.2",{"_index":2935,"title":{},"body":{"dependencies.html":{}}}],["2.30.0",{"_index":2957,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2094,"title":{},"body":{"injectables/NotificationService.html":{}}}],["200px",{"_index":1289,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["2025",{"_index":1545,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["204",{"_index":2065,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["20px",{"_index":1825,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["24",{"_index":1140,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["250px",{"_index":1303,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["26",{"_index":3104,"title":{},"body":{"overview.html":{}}}],["28a745",{"_index":1280,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["2rem",{"_index":1262,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["3",{"_index":1978,"title":{},"body":{"injectables/NotificationCleanup.html":{},"injectables/ZipExportService.html":{}}}],["3.0.2",{"_index":2948,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":2932,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2937,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1371,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["300ms",{"_index":1372,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["4.0.1",{"_index":2942,"title":{},"body":{"dependencies.html":{}}}],["4.0.6",{"_index":2947,"title":{},"body":{"dependencies.html":{}}}],["4.7.4",{"_index":2977,"title":{},"body":{"dependencies.html":{}}}],["495057",{"_index":1309,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["4e555b",{"_index":1356,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["4px",{"_index":1321,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["5.0.0",{"_index":2979,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":2945,"title":{},"body":{"dependencies.html":{}}}],["5.4.2",{"_index":2950,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1334,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["500",{"_index":1347,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["545b62",{"_index":1355,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["59",{"_index":1109,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["6.9.7",{"_index":2968,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1144,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["600",{"_index":1308,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["61",{"_index":3105,"title":{},"body":{"overview.html":{}}}],["6c757d",{"_index":1274,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["7.1.0",{"_index":2961,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2943,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2976,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{}}}],["8",{"_index":1202,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["8.0.3",{"_index":2966,"title":{},"body":{"dependencies.html":{}}}],["8.3.3",{"_index":2972,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":2922,"title":{},"body":{"coverage.html":{}}}],["9.0.2",{"_index":2965,"title":{},"body":{"dependencies.html":{}}}],["999",{"_index":1110,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["__v",{"_index":2037,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["_id",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Subtask.html":{},"injectables/SubtaskService.html":{},"injectables/TeamsService.html":{},"classes/User-1.html":{}}}],["a.click",{"_index":1494,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["a.download",{"_index":1492,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["a.href",{"_index":1491,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["a.style.display",{"_index":2902,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["accepts",{"_index":2463,"title":{},"body":{"injectables/TeamsService.html":{}}}],["acceptsuggestiononenter",{"_index":2541,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["access",{"_index":1869,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["access_token",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":1454,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["actions",{"_index":1281,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["active",{"_index":1461,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["activeworkspaces",{"_index":1649,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{}}}],["activities",{"_index":52,"title":{},"body":{"controllers/ActivityController.html":{}}}],["activity",{"_index":1,"title":{"classes/Activity.html":{}},"body":{"classes/Activity.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"coverage.html":{}}}],["activity.controller",{"_index":123,"title":{},"body":{"modules/ActivityModule.html":{}}}],["activity.dto",{"_index":92,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/UpdateActivityDto.html":{}}}],["activity.dto.ts",{"_index":1503,"title":{},"body":{"classes/CreateActivityDto.html":{},"classes/UpdateActivityDto.html":{},"coverage.html":{}}}],["activity.dto.ts:13",{"_index":1506,"title":{},"body":{"classes/CreateActivityDto.html":{}}}],["activity.dto.ts:17",{"_index":1509,"title":{},"body":{"classes/CreateActivityDto.html":{}}}],["activity.dto.ts:6",{"_index":1510,"title":{},"body":{"classes/CreateActivityDto.html":{}}}],["activity.dto.ts:9",{"_index":1508,"title":{},"body":{"classes/CreateActivityDto.html":{}}}],["activity.name",{"_index":127,"title":{},"body":{"modules/ActivityModule.html":{}}}],["activity.service",{"_index":90,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{}}}],["activitycontroller",{"_index":48,"title":{"controllers/ActivityController.html":{}},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"coverage.html":{}}}],["activitymodel",{"_index":135,"title":{},"body":{"injectables/ActivityService.html":{}}}],["activitymodule",{"_index":108,"title":{"modules/ActivityModule.html":{}},"body":{"modules/ActivityModule.html":{},"modules.html":{},"overview.html":{}}}],["activityschema",{"_index":43,"title":{},"body":{"classes/Activity.html":{},"modules/ActivityModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activityservice",{"_index":89,"title":{"injectables/ActivityService.html":{}},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"coverage.html":{},"overview.html":{}}}],["actually",{"_index":2028,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["add",{"_index":621,"title":{},"body":{"classes/CalendarTask-1.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"modules/DatabaseModule.html":{},"classes/Task.html":{},"injectables/ZipExportService.html":{}}}],["addcomment",{"_index":778,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["addcomment(taskid",{"_index":782,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["added",{"_index":2039,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/User-1.html":{}}}],["additional",{"_index":2872,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["addmeeting",{"_index":487,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["addmeeting(dto",{"_index":1641,"title":{},"body":{"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["addmember",{"_index":2407,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["addmember(@param('id",{"_index":2773,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["addmember(id",{"_index":2410,"title":{},"body":{"controllers/TeamsController.html":{}}}],["addmember(workspaceid",{"_index":2760,"title":{},"body":{"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["addmemberdto",{"_index":160,"title":{"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{}},"body":{"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"coverage.html":{}}}],["address",{"_index":1617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["address'})@isnotempty({message",{"_index":1750,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["adds",{"_index":770,"title":{},"body":{"classes/Comment.html":{}}}],["addtoset",{"_index":2819,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["admin",{"_index":2042,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"miscellaneous/enumerations.html":{}}}],["again",{"_index":1464,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["ai",{"_index":2929,"title":{},"body":{"dependencies.html":{}}}],["alias",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1257,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["allowing",{"_index":3045,"title":{},"body":{"index.html":{}}}],["already",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/TemplateEditorService.html":{}}}],["always",{"_index":2538,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["amazing",{"_index":3087,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":2595,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["angular/common/http",{"_index":1185,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["angular/core",{"_index":1183,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{}}}],["angular/forms",{"_index":2597,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["angular/platform",{"_index":2592,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["api",{"_index":202,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CreateWorkspaceDto.html":{}}}],["api/session/${this.sessionid}/docs",{"_index":1376,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["apibody",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["apikey",{"_index":200,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["apikeyguard",{"_index":176,"title":{"guards/ApiKeyGuard.html":{}},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["apioperation",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["apiproperty",{"_index":1575,"title":{},"body":{"classes/CreateMeetingDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":1544,"title":{},"body":{"classes/CreateMeetingDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{}}}],["apitags",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["apitags('auth",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["app",{"_index":1838,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["app.service",{"_index":212,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":207,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["appearance",{"_index":2870,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["apple",{"_index":1246,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["application",{"_index":3021,"title":{},"body":{"index.html":{}}}],["applications",{"_index":3000,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":214,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":211,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["archive",{"_index":980,"title":{},"body":{"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{}}}],["archive(@param('id",{"_index":969,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["archive(id",{"_index":983,"title":{},"body":{"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{}}}],["archived",{"_index":906,"title":{},"body":{"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/UpdateCommitmentDto.html":{},"miscellaneous/typealiases.html":{}}}],["archiveoldcompleted",{"_index":1012,"title":{},"body":{"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{}}}],["args",{"_index":1803,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["args.slice(0",{"_index":1805,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["args[args.length",{"_index":1804,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["argument",{"_index":2045,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["arial",{"_index":1824,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["array",{"_index":2488,"title":{},"body":{"injectables/TeamsService.html":{}}}],["array.isarray(task.comments",{"_index":879,"title":{},"body":{"injectables/CommentService.html":{}}}],["array.isarray(user.roles",{"_index":503,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["arrays",{"_index":2630,"title":{},"body":{"classes/User.html":{}}}],["assignedto",{"_index":1504,"title":{},"body":{"classes/CreateActivityDto.html":{},"classes/Task.html":{}}}],["assignedto').exec",{"_index":2391,"title":{},"body":{"injectables/TaskService.html":{}}}],["assignee",{"_index":950,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/Task-1.html":{},"miscellaneous/typealiases.html":{}}}],["assigneeid",{"_index":592,"title":{},"body":{"classes/CalendarTask.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["assigneeuser",{"_index":2302,"title":{},"body":{"classes/Task-1.html":{}}}],["assignment",{"_index":1585,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["assuming",{"_index":2150,"title":{},"body":{"controllers/ProjectController.html":{}}}],["async",{"_index":54,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["atomically",{"_index":2476,"title":{},"body":{"injectables/TeamsService.html":{}}}],["attribute.name",{"_index":2572,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["attribute.value",{"_index":2574,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["auth",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":470,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["auth.guard.ts",{"_index":1853,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":469,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["authcontroller",{"_index":268,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"coverage.html":{}}}],["authenticatedrequest",{"_index":462,"title":{"interfaces/AuthenticatedRequest.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"coverage.html":{}}}],["authenticateduser",{"_index":489,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["authguard('jwt",{"_index":1854,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":217,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3092,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":312,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1306,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"interfaces/Template.html":{}}}],["autoclosingbrackets",{"_index":2537,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["autoclosingpairs",{"_index":2579,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["autoclosingquotes",{"_index":2539,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["automatically",{"_index":771,"title":{},"body":{"classes/Comment.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"classes/User-1.html":{}}}],["automaticlayout",{"_index":2522,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["available",{"_index":1719,"title":{},"body":{"modules/DatabaseModule.html":{},"modules.html":{}}}],["avoid",{"_index":2025,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":151,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["aws",{"_index":3034,"title":{},"body":{"index.html":{}}}],["backers",{"_index":3088,"title":{},"body":{"index.html":{}}}],["background",{"_index":1263,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["backup",{"_index":2892,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["badge",{"_index":1336,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["badrequestexception",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["badrequestexception('email",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["badrequestexception('failed",{"_index":585,"title":{},"body":{"injectables/CalendarService.html":{}}}],["badrequestexception('invalid",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/CommentService.html":{}}}],["badrequestexception('no",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('token",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["badrequestexception('user",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('userid",{"_index":2044,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["badrequestexception('you",{"_index":893,"title":{},"body":{"injectables/CommentService.html":{}}}],["badrequestexception(`failed",{"_index":583,"title":{},"body":{"injectables/CalendarService.html":{}}}],["badrequestexception(`invalid",{"_index":743,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["badrequestexception(`task",{"_index":874,"title":{},"body":{"injectables/CommentService.html":{}}}],["based",{"_index":3029,"title":{},"body":{"index.html":{}}}],["bash",{"_index":2878,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["basic",{"_index":1822,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["bcrypt",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(string(password",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["before",{"_index":2894,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["belongs",{"_index":2834,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["between",{"_index":1256,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["blinkmacsystemfont",{"_index":1248,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["blob",{"_index":1473,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["blockcomment",{"_index":2577,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["blocked",{"_index":661,"title":{},"body":{"classes/Column.html":{},"classes/Column-2.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["board",{"_index":3081,"title":{},"body":{"index.html":{}}}],["body",{"_index":84,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"interfaces/CompoDocConfig.html":{},"controllers/DashboardController.html":{},"injectables/HbsRenderService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"interfaces/Template.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["body('name",{"_index":693,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/TeamsController.html":{}}}],["body('role",{"_index":2428,"title":{},"body":{"controllers/TeamsController.html":{}}}],["body,put",{"_index":793,"title":{},"body":{"controllers/CommentController.html":{}}}],["body.content",{"_index":799,"title":{},"body":{"controllers/CommentController.html":{}}}],["body.email",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["body.userid",{"_index":800,"title":{},"body":{"controllers/CommentController.html":{}}}],["bold",{"_index":1279,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["boolean",{"_index":188,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CalendarUser.html":{},"classes/Commitment.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateSubtaskDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"classes/Task-1.html":{},"interfaces/Template.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/WorkspaceSubtask.html":{}}}],["bootstrap",{"_index":113,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["border",{"_index":1265,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["bottom",{"_index":1266,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["boundary",{"_index":1142,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["brackets",{"_index":2578,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["break",{"_index":1781,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["broadcast",{"_index":747,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{}}}],["broadcast(event",{"_index":1025,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["broadcastcolumnupdate",{"_index":701,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{}}}],["broadcastcolumnupdate(event",{"_index":704,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{}}}],["broadcastsubtaskupdate",{"_index":2247,"title":{},"body":{"classes/SubtaskGateway.html":{}}}],["broadcastsubtaskupdate(event",{"_index":2249,"title":{},"body":{"classes/SubtaskGateway.html":{}}}],["broadcasttaskdeletion",{"_index":2355,"title":{},"body":{"classes/TaskGateway.html":{}}}],["broadcasttaskdeletion(taskid",{"_index":2358,"title":{},"body":{"classes/TaskGateway.html":{}}}],["broadcasttaskupdate",{"_index":2356,"title":{},"body":{"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{}}}],["broadcasttaskupdate(event",{"_index":2366,"title":{},"body":{"classes/TaskGateway-1.html":{}}}],["broadcasttaskupdate(task",{"_index":2360,"title":{},"body":{"classes/TaskGateway.html":{}}}],["broadcastworkspaceupdate",{"_index":2778,"title":{},"body":{"classes/WorkspaceGateway.html":{}}}],["broadcastworkspaceupdate(event",{"_index":2780,"title":{},"body":{"classes/WorkspaceGateway.html":{}}}],["browse",{"_index":3101,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2593,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"modules.html":{}}}],["browsermodule",{"_index":2591,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["btn",{"_index":1343,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["building",{"_index":2997,"title":{},"body":{"index.html":{}}}],["cache",{"_index":2949,"title":{},"body":{"dependencies.html":{}}}],["calendar",{"_index":508,"title":{},"body":{"controllers/CalendarController.html":{},"classes/CalendarUser.html":{},"classes/Task-1.html":{},"classes/TaskGateway.html":{},"miscellaneous/enumerations.html":{}}}],["calendar.controller",{"_index":548,"title":{},"body":{"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{}}}],["calendar.gateway",{"_index":533,"title":{},"body":{"controllers/CalendarController.html":{}}}],["calendar.service",{"_index":530,"title":{},"body":{"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{}}}],["calendar/calendar.module",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["calendarcontroller",{"_index":506,"title":{"controllers/CalendarController.html":{}},"body":{"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"coverage.html":{}}}],["calendarmodule",{"_index":243,"title":{"classes/CalendarModule.html":{}},"body":{"modules/AppModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"coverage.html":{}}}],["calendarservice",{"_index":529,"title":{"injectables/CalendarService.html":{}},"body":{"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"modules/CalendarTaskModule.html":{},"coverage.html":{},"overview.html":{}}}],["calendartask",{"_index":544,"title":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{}},"body":{"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/TaskGateway.html":{},"coverage.html":{}}}],["calendartask.name",{"_index":549,"title":{},"body":{"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{}}}],["calendartaskdocument",{"_index":620,"title":{},"body":{"classes/CalendarTask-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["calendartaskmodule",{"_index":550,"title":{"modules/CalendarTaskModule.html":{}},"body":{"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules.html":{},"overview.html":{}}}],["calendartasks",{"_index":627,"title":{},"body":{"classes/CalendarUser.html":{}}}],["calendartaskschema",{"_index":545,"title":{},"body":{"classes/CalendarModule.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["calendaruser",{"_index":597,"title":{"classes/CalendarUser.html":{}},"body":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"coverage.html":{}}}],["calendaruserschema",{"_index":640,"title":{},"body":{"classes/CalendarUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["calendarworkspace",{"_index":607,"title":{"classes/CalendarWorkspace.html":{}},"body":{"classes/CalendarTask.html":{},"classes/CalendarWorkspace.html":{},"coverage.html":{}}}],["calendarworkspaceschema",{"_index":644,"title":{},"body":{"classes/CalendarWorkspace.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["call",{"_index":1467,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["callback",{"_index":2511,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["canactivate",{"_index":180,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":184,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":1780,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["cast",{"_index":2718,"title":{},"body":{"injectables/UsersService.html":{}}}],["catch",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/CommitmentsCron.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["category",{"_index":2303,"title":{},"body":{"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["category.calendar",{"_index":2325,"title":{},"body":{"classes/Task-1.html":{}}}],["center",{"_index":1259,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["change",{"_index":1418,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/CreateNotificationDto.html":{},"classes/Notification.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/typealiases.html":{}}}],["changes",{"_index":2896,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["channel",{"_index":3058,"title":{},"body":{"index.html":{}}}],["characters",{"_index":2208,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["chars",{"_index":1620,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["check",{"_index":738,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/HbsRenderService.html":{},"index.html":{}}}],["class",{"_index":0,"title":{"classes/Activity.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"classes/CalendarModule.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"classes/Commitment.html":{},"classes/CommitmentsGateway.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DashboardMetricsDto.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Subtask.html":{},"classes/SubtaskGateway.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/Team.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceGateway.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Activity.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"classes/CalendarModule.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"classes/Commitment.html":{},"classes/CommitmentsGateway.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DashboardMetricsDto.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Subtask.html":{},"classes/SubtaskGateway.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/Team.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceGateway.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"overview.html":{}}}],["clear",{"_index":1426,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["cleartimeout(this.savetimeout",{"_index":1390,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["click",{"_index":1847,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["clicks",{"_index":3044,"title":{},"body":{"index.html":{}}}],["client",{"_index":1030,"title":{},"body":{"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{}}}],["client.id",{"_index":1040,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["client.join(data.roomid",{"_index":1044,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["clientid",{"_index":1046,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["close",{"_index":2581,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["cloud",{"_index":3028,"title":{},"body":{"index.html":{}}}],["cluster_activitymodule",{"_index":116,"title":{},"body":{"modules/ActivityModule.html":{},"overview.html":{}}}],["cluster_activitymodule_providers",{"_index":117,"title":{},"body":{"modules/ActivityModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_calendartaskmodule",{"_index":623,"title":{},"body":{"modules/CalendarTaskModule.html":{},"overview.html":{}}}],["cluster_calendartaskmodule_exports",{"_index":624,"title":{},"body":{"modules/CalendarTaskModule.html":{},"overview.html":{}}}],["cluster_calendartaskmodule_providers",{"_index":625,"title":{},"body":{"modules/CalendarTaskModule.html":{},"overview.html":{}}}],["cluster_columnmodule",{"_index":716,"title":{},"body":{"modules/ColumnModule.html":{},"overview.html":{}}}],["cluster_columnmodule_exports",{"_index":718,"title":{},"body":{"modules/ColumnModule.html":{},"overview.html":{}}}],["cluster_columnmodule_providers",{"_index":717,"title":{},"body":{"modules/ColumnModule.html":{},"overview.html":{}}}],["cluster_commentmodule",{"_index":844,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_commentmodule_exports",{"_index":846,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_commentmodule_providers",{"_index":845,"title":{},"body":{"modules/CommentModule.html":{},"overview.html":{}}}],["cluster_commitmentsmodule",{"_index":1047,"title":{},"body":{"modules/CommitmentsModule.html":{},"overview.html":{}}}],["cluster_commitmentsmodule_exports",{"_index":1049,"title":{},"body":{"modules/CommitmentsModule.html":{},"overview.html":{}}}],["cluster_commitmentsmodule_providers",{"_index":1048,"title":{},"body":{"modules/CommitmentsModule.html":{},"overview.html":{}}}],["cluster_dashboardmodule",{"_index":1659,"title":{},"body":{"modules/DashboardModule.html":{},"overview.html":{}}}],["cluster_dashboardmodule_imports",{"_index":1660,"title":{},"body":{"modules/DashboardModule.html":{}}}],["cluster_dashboardmodule_providers",{"_index":1661,"title":{},"body":{"modules/DashboardModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":2080,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_exports",{"_index":2081,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_providers",{"_index":2082,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_projectmodule",{"_index":2158,"title":{},"body":{"modules/ProjectModule.html":{},"overview.html":{}}}],["cluster_projectmodule_exports",{"_index":2160,"title":{},"body":{"modules/ProjectModule.html":{},"overview.html":{}}}],["cluster_projectmodule_providers",{"_index":2159,"title":{},"body":{"modules/ProjectModule.html":{},"overview.html":{}}}],["cluster_subtaskmodule",{"_index":2251,"title":{},"body":{"modules/SubtaskModule.html":{},"overview.html":{}}}],["cluster_subtaskmodule_exports",{"_index":2253,"title":{},"body":{"modules/SubtaskModule.html":{},"overview.html":{}}}],["cluster_subtaskmodule_providers",{"_index":2252,"title":{},"body":{"modules/SubtaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":2368,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_exports",{"_index":2371,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_imports",{"_index":2369,"title":{},"body":{"modules/TaskModule.html":{}}}],["cluster_taskmodule_providers",{"_index":2370,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_teamsmodule",{"_index":2432,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_teamsmodule_providers",{"_index":2433,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule",{"_index":2585,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule_bootstrap",{"_index":2588,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule_declarations",{"_index":2586,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_templateplaygroundmodule_providers",{"_index":2587,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2686,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2687,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2688,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2704,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2705,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2706,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_workspacemodule",{"_index":2782,"title":{},"body":{"modules/WorkspaceModule.html":{},"overview.html":{}}}],["cluster_workspacemodule_exports",{"_index":2784,"title":{},"body":{"modules/WorkspaceModule.html":{},"overview.html":{}}}],["cluster_workspacemodule_providers",{"_index":2783,"title":{},"body":{"modules/WorkspaceModule.html":{},"overview.html":{}}}],["code",{"_index":1217,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["collection",{"_index":2625,"title":{},"body":{"classes/User.html":{}}}],["color",{"_index":1273,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["colors",{"_index":2889,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["column",{"_index":646,"title":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{}},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"classes/Task-1.html":{},"interfaces/Template.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{}}}],["column.controller",{"_index":720,"title":{},"body":{"modules/ColumnModule.html":{}}}],["column.gateway",{"_index":725,"title":{},"body":{"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["column.name",{"_index":727,"title":{},"body":{"modules/ColumnModule.html":{},"modules/WorkspaceModule.html":{}}}],["column.save",{"_index":746,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["column.service",{"_index":689,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{}}}],["columncontroller",{"_index":682,"title":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{}},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"coverage.html":{}}}],["columndocument",{"_index":663,"title":{},"body":{"classes/Column.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["columngateway",{"_index":698,"title":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{}},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"coverage.html":{}}}],["columnmodel",{"_index":734,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["columnmodule",{"_index":239,"title":{"modules/ColumnModule.html":{}},"body":{"modules/AppModule.html":{},"classes/Column-2.html":{},"modules/ColumnModule.html":{},"classes/Workspace-1.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["columnname",{"_index":649,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"miscellaneous/enumerations.html":{}}}],["columns",{"_index":684,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"classes/Workspace-1.html":{}}}],["columns/.../column.schema.ts",{"_index":2983,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["columns/column.controller.ts",{"_index":683,"title":{},"body":{"controllers/ColumnController.html":{},"coverage.html":{}}}],["columns/column.controller.ts:11",{"_index":687,"title":{},"body":{"controllers/ColumnController.html":{}}}],["columns/column.gateway.ts",{"_index":699,"title":{},"body":{"classes/ColumnGateway.html":{},"coverage.html":{}}}],["columns/column.gateway.ts:7",{"_index":703,"title":{},"body":{"classes/ColumnGateway.html":{}}}],["columns/column.gateway.ts:9",{"_index":705,"title":{},"body":{"classes/ColumnGateway.html":{}}}],["columns/column.module",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"classes/Workspace-1.html":{}}}],["columns/column.module.ts",{"_index":719,"title":{},"body":{"modules/ColumnModule.html":{}}}],["columns/column.service.ts",{"_index":730,"title":{},"body":{"injectables/ColumnService.html":{},"coverage.html":{}}}],["columns/column.service.ts:10",{"_index":733,"title":{},"body":{"injectables/ColumnService.html":{}}}],["columns/column.service.ts:21",{"_index":735,"title":{},"body":{"injectables/ColumnService.html":{}}}],["columns/entities/column.schema.ts",{"_index":647,"title":{},"body":{"classes/Column.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["columns/entities/column.schema.ts:18",{"_index":651,"title":{},"body":{"classes/Column.html":{}}}],["columns/entities/column.schema.ts:21",{"_index":652,"title":{},"body":{"classes/Column.html":{}}}],["columns/entities/column.schema.ts:25",{"_index":654,"title":{},"body":{"classes/Column.html":{}}}],["columns/entities/column.schema.ts:29",{"_index":653,"title":{},"body":{"classes/Column.html":{}}}],["columns/schemas/column.schema",{"_index":726,"title":{},"body":{"modules/ColumnModule.html":{},"classes/Task-1.html":{},"modules/WorkspaceModule.html":{}}}],["columns/schemas/column.schema.ts",{"_index":666,"title":{},"body":{"classes/Column-1.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["columns/schemas/column.schema.ts:21",{"_index":667,"title":{},"body":{"classes/Column-1.html":{}}}],["columns/schemas/column.schema.ts:24",{"_index":668,"title":{},"body":{"classes/Column-1.html":{}}}],["columns/schemas/column.schema.ts:30",{"_index":670,"title":{},"body":{"classes/Column-1.html":{}}}],["columns/schemas/column.schema.ts:33",{"_index":671,"title":{},"body":{"classes/Column-1.html":{}}}],["columnschema",{"_index":664,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"modules/ColumnModule.html":{},"classes/Workspace-1.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["columnservice",{"_index":688,"title":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"coverage.html":{},"overview.html":{}}}],["come",{"_index":3051,"title":{},"body":{"index.html":{}}}],["comment",{"_index":609,"title":{"classes/Comment.html":{}},"body":{"classes/CalendarTask.html":{},"classes/CalendarUser.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"injectables/TemplateEditorService.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{}}}],["comment's",{"_index":889,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment._id",{"_index":902,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.content",{"_index":894,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.controller",{"_index":849,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.dto.ts",{"_index":1515,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:3",{"_index":1517,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{}}}],["comment.dto.ts:4",{"_index":1518,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:5",{"_index":1516,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.name",{"_index":851,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.save",{"_index":871,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.schema",{"_index":848,"title":{},"body":{"modules/CommentModule.html":{},"injectables/CommentService.html":{}}}],["comment.service",{"_index":795,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{}}}],["comment.taskid",{"_index":900,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.updatedat",{"_index":895,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.userid.tostring",{"_index":891,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentcontroller",{"_index":775,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"coverage.html":{}}}],["commentgateway",{"_index":806,"title":{"classes/CommentGateway.html":{}},"body":{"classes/CommentGateway.html":{},"coverage.html":{}}}],["commentid",{"_index":785,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{}}}],["commentmodel",{"_index":856,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentmodule",{"_index":218,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules.html":{},"overview.html":{}}}],["comments",{"_index":593,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarUser.html":{},"injectables/CommentService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"injectables/TemplateEditorService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["comments/comment.module",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["comments/comment.schema",{"_index":2318,"title":{},"body":{"classes/Task-1.html":{},"classes/User-1.html":{}}}],["commentschema",{"_index":773,"title":{},"body":{"classes/Comment.html":{},"modules/CommentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentservice",{"_index":794,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"coverage.html":{},"overview.html":{}}}],["commitment",{"_index":904,"title":{"classes/Commitment.html":{}},"body":{"classes/Commitment.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"coverage.html":{}}}],["commitment.dto",{"_index":940,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/UpdateCommitmentDto.html":{}}}],["commitment.dto.ts",{"_index":1520,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{},"coverage.html":{}}}],["commitment.dto.ts:10",{"_index":1525,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:12",{"_index":2609,"title":{},"body":{"classes/UpdateCommitmentDto.html":{}}}],["commitment.dto.ts:14",{"_index":1522,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:18",{"_index":1523,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:21",{"_index":1526,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:25",{"_index":1528,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:29",{"_index":1530,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:7",{"_index":1532,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["commitment.dto.ts:9",{"_index":2610,"title":{},"body":{"classes/UpdateCommitmentDto.html":{}}}],["commitment.name",{"_index":1055,"title":{},"body":{"modules/CommitmentsModule.html":{}}}],["commitment.save",{"_index":1081,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["commitment/commitments.module",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["commitmentmodel",{"_index":1061,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["commitmentquery",{"_index":929,"title":{"interfaces/CommitmentQuery.html":{}},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"coverage.html":{}}}],["commitments",{"_index":979,"title":{},"body":{"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{}}}],["commitments.controller",{"_index":1052,"title":{},"body":{"modules/CommitmentsModule.html":{}}}],["commitments.cron",{"_index":1054,"title":{},"body":{"modules/CommitmentsModule.html":{}}}],["commitments.gateway",{"_index":1053,"title":{},"body":{"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{}}}],["commitments.schema",{"_index":1051,"title":{},"body":{"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["commitments.service",{"_index":938,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"modules/CommitmentsModule.html":{}}}],["commitmentschema",{"_index":927,"title":{},"body":{"classes/Commitment.html":{},"modules/CommitmentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commitmentscontroller",{"_index":952,"title":{"controllers/CommitmentsController.html":{}},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"modules/CommitmentsModule.html":{},"coverage.html":{}}}],["commitmentscron",{"_index":997,"title":{"injectables/CommitmentsCron.html":{}},"body":{"injectables/CommitmentsCron.html":{},"modules/CommitmentsModule.html":{},"coverage.html":{},"overview.html":{}}}],["commitmentsgateway",{"_index":1019,"title":{"classes/CommitmentsGateway.html":{}},"body":{"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"coverage.html":{}}}],["commitmentsmodule",{"_index":219,"title":{"modules/CommitmentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommitmentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commitmentsservice",{"_index":937,"title":{"injectables/CommitmentsService.html":{}},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"coverage.html":{},"overview.html":{}}}],["commitmentstatus",{"_index":921,"title":{},"body":{"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["commitmentstatus.completed",{"_index":1112,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["commitmentstatus.not_started",{"_index":926,"title":{},"body":{"classes/Commitment.html":{},"injectables/CommitmentsService.html":{}}}],["common",{"_index":1773,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["commonly",{"_index":1713,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["commonmodule",{"_index":2594,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["compare",{"_index":1776,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["comparison",{"_index":206,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["complaint",{"_index":2719,"title":{},"body":{"injectables/UsersService.html":{}}}],["complete",{"_index":981,"title":{},"body":{"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"injectables/HbsRenderService.html":{}}}],["complete(@param('id",{"_index":977,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["complete(id",{"_index":985,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["completed",{"_index":907,"title":{},"body":{"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/WorkspaceSubtask.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["completedtasks",{"_index":1650,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{}}}],["compodoc",{"_index":1209,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["compodocconfig",{"_index":1150,"title":{"interfaces/CompoDocConfig.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["component",{"_index":1178,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{},"overview.html":{}}}],["components",{"_index":1797,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["computed",{"_index":2038,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["conditional",{"_index":1786,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["config",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["configmodule",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":182,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":1210,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["confirm('are",{"_index":1450,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["connect",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":1039,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["connectedsocket",{"_index":1036,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["console.error('error",{"_index":1386,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.error('no",{"_index":1460,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log",{"_index":1904,"title":{},"body":{"injectables/MailService.html":{}}}],["console.log('creating",{"_index":1465,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('jwt",{"_index":1875,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["console.log('reset",{"_index":1458,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('session",{"_index":1397,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log('template",{"_index":1497,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["console.log(`\\n",{"_index":1903,"title":{},"body":{"injectables/MailService.html":{}}}],["console.log(`client",{"_index":1038,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["const",{"_index":42,"title":{},"body":{"classes/Activity.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{}}}],["construct",{"_index":1479,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["constructor",{"_index":131,"title":{},"body":{"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["constructor(@injectmodel(project.name",{"_index":2174,"title":{},"body":{"injectables/ProjectService.html":{}}}],["constructor(@injectmodel(task.name",{"_index":2388,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":2736,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["constructor(@injectmodel(workspace.name",{"_index":2804,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["constructor(activitymodel",{"_index":132,"title":{},"body":{"injectables/ActivityService.html":{}}}],["constructor(authservice",{"_index":1886,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(columnmodel",{"_index":731,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["constructor(commentmodel",{"_index":854,"title":{},"body":{"injectables/CommentService.html":{}}}],["constructor(commentservice",{"_index":811,"title":{},"body":{"classes/CommentGateway.html":{}}}],["constructor(commitmentmodel",{"_index":1058,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["constructor(configservice",{"_index":181,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(notificationmodel",{"_index":1967,"title":{},"body":{"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{}}}],["constructor(private",{"_index":95,"title":{},"body":{"controllers/ActivityController.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"controllers/DashboardController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["constructor(projectmodel",{"_index":2165,"title":{},"body":{"injectables/ProjectService.html":{}}}],["constructor(reflector",{"_index":2214,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(svc",{"_index":1001,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["constructor(taskmodel",{"_index":553,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{}}}],["constructor(taskservice",{"_index":1669,"title":{},"body":{"injectables/DashboardService.html":{}}}],["constructor(teammodel",{"_index":2443,"title":{},"body":{"injectables/TeamsService.html":{}}}],["constructor(usermodel",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["constructor(workspacemodel",{"_index":2795,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["constructors",{"_index":1226,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["contain",{"_index":2193,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["container",{"_index":1339,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["containing",{"_index":2884,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["contains",{"_index":2862,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["content",{"_index":761,"title":{},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommentDto.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommentDto.html":{}}}],["contentdisposition",{"_index":1480,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["contentdisposition.match(/filename",{"_index":1485,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["contents",{"_index":2865,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["context",{"_index":187,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/HbsRenderService.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":499,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":498,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":196,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":47,"title":{"controllers/ActivityController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CalendarController.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"controllers/CommitmentsController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}},"body":{"controllers/ActivityController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/DashboardController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{},"coverage.html":{}}}],["controller('activities",{"_index":94,"title":{},"body":{"controllers/ActivityController.html":{}}}],["controller('auth",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["controller('calendar",{"_index":534,"title":{},"body":{"controllers/CalendarController.html":{}}}],["controller('columns",{"_index":691,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{}}}],["controller('commitments",{"_index":951,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["controller('dashboard",{"_index":476,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["controller('notifications",{"_index":2041,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["controller('projects",{"_index":2151,"title":{},"body":{"controllers/ProjectController.html":{}}}],["controller('subtasks",{"_index":2239,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["controller('tasks",{"_index":2349,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('tasks/:taskid/comments",{"_index":796,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('teams",{"_index":2424,"title":{},"body":{"controllers/TeamsController.html":{}}}],["controller('users",{"_index":2680,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["controller('workspaces",{"_index":2769,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["controllers",{"_index":49,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/CommitmentsController.html":{},"modules/CommitmentsModule.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["cookie",{"_index":2953,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":2666,"title":{},"body":{"classes/User-1.html":{}}}],["correctly",{"_index":2669,"title":{},"body":{"classes/User-1.html":{}}}],["cors",{"_index":711,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{}}}],["count",{"_index":2017,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"injectables/TeamsService.html":{},"injectables/UsersService-1.html":{}}}],["countactiveworkspaces",{"_index":2793,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["countall",{"_index":2723,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["countallworkspaces",{"_index":2794,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["countbystatus",{"_index":2375,"title":{},"body":{"injectables/TaskService.html":{}}}],["countbystatus(status",{"_index":2379,"title":{},"body":{"injectables/TaskService.html":{}}}],["courses",{"_index":3064,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1221,"title":{"coverage.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{},"index.html":{}}}],["create",{"_index":55,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommitmentDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["create(@body",{"_index":97,"title":{},"body":{"controllers/ActivityController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["create(@body('name",{"_index":2425,"title":{},"body":{"controllers/TeamsController.html":{}}}],["create(createactivitydto",{"_index":60,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{}}}],["create(createuserdto",{"_index":2695,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":858,"title":{},"body":{"injectables/CommentService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"controllers/WorkspaceController.html":{}}}],["create(dto",{"_index":987,"title":{},"body":{"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/NotificationController.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["create(name",{"_index":2413,"title":{},"body":{"controllers/TeamsController.html":{}}}],["create(user",{"_index":2090,"title":{},"body":{"injectables/NotificationService.html":{}}}],["create(workspaceid",{"_index":685,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["createactivitydto",{"_index":61,"title":{"classes/CreateActivityDto.html":{}},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/CreateActivityDto.html":{},"classes/UpdateActivityDto.html":{},"coverage.html":{}}}],["createcommentdto",{"_index":1513,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommitmentdto",{"_index":939,"title":{"classes/CreateCommitmentDto.html":{}},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{},"coverage.html":{}}}],["created",{"_index":1398,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["created.save",{"_index":2738,"title":{},"body":{"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["createdactivity",{"_index":146,"title":{},"body":{"injectables/ActivityService.html":{}}}],["createdactivity.save",{"_index":149,"title":{},"body":{"injectables/ActivityService.html":{}}}],["createdat",{"_index":762,"title":{},"body":{"classes/Comment.html":{},"injectables/CommentService.html":{},"injectables/DashboardService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/User-1.html":{},"classes/Workspace-1.html":{}}}],["createdat/updatedat",{"_index":2652,"title":{},"body":{"classes/User-1.html":{}}}],["createdby",{"_index":2129,"title":{},"body":{"classes/Project.html":{}}}],["createdby').exec",{"_index":2178,"title":{},"body":{"injectables/ProjectService.html":{}}}],["createmeetingdto",{"_index":471,"title":{"classes/CreateMeetingDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateMeetingDto.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["createmember",{"_index":2439,"title":{},"body":{"injectables/TeamsService.html":{}}}],["createmember(name",{"_index":2447,"title":{},"body":{"injectables/TeamsService.html":{}}}],["createnotificationdto",{"_index":1577,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["createsession",{"_index":1391,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["createsubtask",{"_index":2329,"title":{},"body":{"controllers/TaskController.html":{}}}],["createsubtask(taskid",{"_index":2333,"title":{},"body":{"controllers/TaskController.html":{}}}],["createsubtaskdto",{"_index":1590,"title":{"classes/CreateSubtaskDto.html":{}},"body":{"classes/CreateSubtaskDto.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["createtask",{"_index":509,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["createtask(@body",{"_index":540,"title":{},"body":{"controllers/CalendarController.html":{}}}],["createtask(dto",{"_index":513,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["createtaskdto",{"_index":514,"title":{"classes/CreateTaskDto.html":{}},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["createteam",{"_index":2440,"title":{},"body":{"injectables/TeamsService.html":{}}}],["createteam(name",{"_index":2450,"title":{},"body":{"injectables/TeamsService.html":{}}}],["createuserdto",{"_index":1605,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"coverage.html":{}}}],["createworkspacedto",{"_index":1627,"title":{"classes/CreateWorkspaceDto.html":{}},"body":{"classes/CreateWorkspaceDto.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"coverage.html":{}}}],["creation",{"_index":1469,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["credentials",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentialsss",{"_index":1893,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["cron",{"_index":1007,"title":{},"body":{"injectables/CommitmentsCron.html":{},"injectables/NotificationCleanup.html":{}}}],["cron(cronexpression.every_day_at_midnight",{"_index":1970,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["cron(cronexpression.every_hour",{"_index":1003,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["cronexpression",{"_index":1008,"title":{},"body":{"injectables/CommitmentsCron.html":{},"injectables/NotificationCleanup.html":{}}}],["css",{"_index":2553,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["cursor",{"_index":1318,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["custom",{"_index":2547,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["customfavicon",{"_index":1154,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["customization",{"_index":2885,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customization.html",{"_index":2900,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customize",{"_index":2887,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customized",{"_index":2863,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["customizing",{"_index":2869,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["daily",{"_index":1551,"title":{},"body":{"classes/CreateMeetingDto.html":{},"injectables/NotificationCleanup.html":{}}}],["dark",{"_index":1213,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["dashboard",{"_index":1639,"title":{},"body":{"controllers/DashboardController.html":{}}}],["dashboard.controller",{"_index":1663,"title":{},"body":{"modules/DashboardModule.html":{}}}],["dashboard.service",{"_index":467,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{}}}],["dashboard/dashboard.module",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboardcontroller",{"_index":478,"title":{"controllers/DashboardController.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"coverage.html":{}}}],["dashboardmetricsdto",{"_index":1646,"title":{"classes/DashboardMetricsDto.html":{}},"body":{"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["dashboardmodule",{"_index":220,"title":{"modules/DashboardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{},"modules.html":{},"overview.html":{}}}],["dashboardservice",{"_index":466,"title":{"injectables/DashboardService.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":861,"title":{},"body":{"injectables/CommentService.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{}}}],["database.module",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["database.module.ts",{"_index":1711,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":221,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":569,"title":{},"body":{"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateTaskDto.html":{},"injectables/DashboardService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"interfaces/Session.html":{},"classes/Task-1.html":{},"interfaces/Template.html":{},"classes/UpdateTaskDto.html":{},"classes/User-1.html":{},"classes/Workspace-1.html":{},"dependencies.html":{}}}],["date(cursor",{"_index":2056,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["date(date.now",{"_index":1143,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["date(dto.duedate",{"_index":542,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CommitmentsService.html":{}}}],["date(from",{"_index":564,"title":{},"body":{"injectables/CalendarService.html":{}}}],["date(now",{"_index":1105,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["date(to",{"_index":566,"title":{},"body":{"injectables/CalendarService.html":{}}}],["date.now",{"_index":772,"title":{},"body":{"classes/Comment.html":{},"classes/Notification.html":{},"classes/Workspace-1.html":{}}}],["date:'short",{"_index":1206,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["datetime",{"_index":1541,"title":{},"body":{"classes/CreateMeetingDto.html":{},"injectables/DashboardService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{}}}],["days",{"_index":1985,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["db",{"_index":756,"title":{},"body":{"injectables/ColumnService-1.html":{}}}],["ddd",{"_index":1827,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["debounce",{"_index":1373,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["debounced",{"_index":1417,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["declarations",{"_index":112,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["declare",{"_index":1767,"title":{},"body":{"injectables/HbsRenderService.html":{},"classes/Member-1.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["decoded",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":1348,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CalendarController.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"classes/Commitment.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"classes/UpdateCommitmentDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["decrement",{"_index":2487,"title":{},"body":{"injectables/TeamsService.html":{}}}],["dee2e6",{"_index":1269,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["deeper",{"_index":3060,"title":{},"body":{"index.html":{}}}],["default",{"_index":599,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"classes/Meeting.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"miscellaneous/variables.html":{}}}],["default_secret_key",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["define",{"_index":2655,"title":{},"body":{"classes/User-1.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{}}}],["definitions",{"_index":2548,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["delete",{"_index":86,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/CalendarController.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["delete(':commentid",{"_index":786,"title":{},"body":{"controllers/CommentController.html":{}}}],["delete(':id",{"_index":75,"title":{},"body":{"controllers/ActivityController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":993,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["delete('subtasks/:id",{"_index":2337,"title":{},"body":{"controllers/TaskController.html":{}}}],["delete('tasks/:id",{"_index":518,"title":{},"body":{"controllers/CalendarController.html":{}}}],["delete(id",{"_index":2169,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TaskService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["deletecomment",{"_index":779,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["deletecomment(commentid",{"_index":862,"title":{},"body":{"injectables/CommentService.html":{}}}],["deletecomment(taskid",{"_index":784,"title":{},"body":{"controllers/CommentController.html":{}}}],["deleted",{"_index":843,"title":{},"body":{"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/UsersService-1.html":{}}}],["deletedat",{"_index":1949,"title":{},"body":{"classes/Notification.html":{},"injectables/NotificationCleanup.html":{}}}],["deletenotification",{"_index":1988,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["deletenotification(@param('id",{"_index":2072,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["deletenotification(id",{"_index":1996,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["deletesubtask",{"_index":2330,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletesubtask(@param('id",{"_index":2353,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletesubtask(id",{"_index":2336,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetask",{"_index":510,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["deletetask(id",{"_index":517,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["deletion",{"_index":896,"title":{},"body":{"injectables/CommentService.html":{}}}],["delimiter",{"_index":2573,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["demonstration",{"_index":1840,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["dependencies",{"_index":110,"title":{"dependencies.html":{}},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"interfaces/CompoDocConfig.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"interfaces/Session.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3019,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":3033,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":3026,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":3043,"title":{},"body":{"index.html":{}}}],["depth",{"_index":1791,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask-1.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateWorkspaceDto.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"interfaces/NotificationResponse.html":{},"classes/Project.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceTask.html":{},"index.html":{},"properties.html":{}}}],["designer",{"_index":2989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["destroy",{"_index":2494,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["details",{"_index":2483,"title":{},"body":{"injectables/TeamsService.html":{}}}],["developer",{"_index":1946,"title":{},"body":{"classes/Member-1.html":{},"miscellaneous/enumerations.html":{}}}],["development",{"_index":2401,"title":{},"body":{"classes/Team.html":{},"index.html":{}}}],["devtools",{"_index":3069,"title":{},"body":{"index.html":{}}}],["direction",{"_index":1241,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["directly",{"_index":2027,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["directory",{"_index":2875,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["disable",{"_index":82,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/CommitmentsController.html":{},"modules/CommitmentsModule.html":{},"interfaces/CompoDocConfig.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"interfaces/Template.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{}}}],["disableconstructors",{"_index":1155,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablecoverage",{"_index":1156,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disabledependencies",{"_index":1157,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disabledomtree",{"_index":1158,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablefilepath",{"_index":1159,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablegraph",{"_index":1160,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableinternal",{"_index":1161,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablelifecyclehooks",{"_index":1162,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablemaingraph",{"_index":1163,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableoverview",{"_index":1164,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableprivate",{"_index":1165,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableproperties",{"_index":1166,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableprotected",{"_index":1167,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disableroutesgraph",{"_index":1168,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablesearch",{"_index":1169,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablesourcecode",{"_index":1170,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disablestyletab",{"_index":1171,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disabletemplatetab",{"_index":1172,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disconnected",{"_index":1041,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["discord",{"_index":3057,"title":{},"body":{"index.html":{}}}],["display",{"_index":1239,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["disposition",{"_index":1482,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["dive",{"_index":3059,"title":{},"body":{"index.html":{}}}],["doc",{"_index":2464,"title":{},"body":{"injectables/TeamsService.html":{}}}],["docs",{"_index":2031,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["doctype",{"_index":2566,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["document",{"_index":29,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"injectables/HbsRenderService.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["document.body.appendchild(a",{"_index":1493,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["document.body.removechild(a",{"_index":1495,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["document.createelement('a",{"_index":1490,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["documentation",{"_index":1439,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"index.html":{}}}],["documentation/.../hbs",{"_index":3129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation/.../template",{"_index":3132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation/.../zip",{"_index":3130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation/template",{"_index":1151,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["documentationmainname",{"_index":1835,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["doe",{"_index":1614,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Member-1.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["dom",{"_index":1227,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["don't",{"_index":2653,"title":{},"body":{"classes/User-1.html":{}}}],["done",{"_index":662,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Task-1.html":{},"classes/WorkspaceTask.html":{},"miscellaneous/enumerations.html":{}}}],["dotenv",{"_index":2958,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1207,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["downloadblob",{"_index":2840,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["downloadblob(blob",{"_index":2843,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["downloaded",{"_index":1498,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["downloading",{"_index":1499,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["dto",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["dto.archived",{"_index":1128,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["dto.assigneeid",{"_index":1076,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["dto.description",{"_index":1075,"title":{},"body":{"injectables/CommitmentsService.html":{},"injectables/WorkspaceService.html":{}}}],["dto.duedate",{"_index":541,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CommitmentsService.html":{}}}],["dto.isrecurring",{"_index":1702,"title":{},"body":{"injectables/DashboardService.html":{}}}],["dto.linkedtaskid",{"_index":1077,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["dto.members",{"_index":2805,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["dto.name",{"_index":2812,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["dto.newpassword",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["dto.priority",{"_index":1078,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["dto.status",{"_index":1079,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["dto.title",{"_index":1074,"title":{},"body":{"injectables/CommitmentsService.html":{},"injectables/SubtaskService.html":{}}}],["dto.ts",{"_index":163,"title":{},"body":{"classes/AddMemberDto.html":{},"coverage.html":{}}}],["dto.ts:3",{"_index":166,"title":{},"body":{"classes/AddMemberDto.html":{}}}],["dto.ts:4",{"_index":169,"title":{},"body":{"classes/AddMemberDto.html":{}}}],["dto.ts:5",{"_index":167,"title":{},"body":{"classes/AddMemberDto.html":{}}}],["dto/create",{"_index":91,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["dto/dashboard",{"_index":1683,"title":{},"body":{"injectables/DashboardService.html":{}}}],["dto/forgot",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["dto/meeting",{"_index":474,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["dto/register.dto",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["dto/resend",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["dto/reset",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["dto/update",{"_index":93,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/UserController.html":{}}}],["due",{"_index":948,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/CreateNotificationDto.html":{},"classes/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["duedate",{"_index":575,"title":{},"body":{"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateTaskDto.html":{},"classes/Task-1.html":{},"classes/UpdateTaskDto.html":{},"miscellaneous/typealiases.html":{}}}],["e.g",{"_index":35,"title":{},"body":{"classes/Activity.html":{},"classes/Member-1.html":{},"classes/Team.html":{}}}],["e2e",{"_index":3014,"title":{},"body":{"index.html":{}}}],["e9ecef",{"_index":1284,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["each",{"_index":1637,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"injectables/HbsRenderService.html":{},"classes/WorkspaceTask.html":{}}}],["ease",{"_index":1287,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["edit",{"_index":831,"title":{},"body":{"classes/CommentGateway.html":{},"injectables/CommentService.html":{}}}],["editcomment",{"_index":780,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["editcomment(commentid",{"_index":864,"title":{},"body":{"injectables/CommentService.html":{}}}],["editcomment(taskid",{"_index":788,"title":{},"body":{"controllers/CommentController.html":{}}}],["editing",{"_index":888,"title":{},"body":{"injectables/CommentService.html":{}}}],["editor",{"_index":1333,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["editor.service",{"_index":1188,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["editor.service.ts",{"_index":2492,"title":{},"body":{"injectables/TemplateEditorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["editor.service.ts:10",{"_index":2514,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:12",{"_index":2505,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:167",{"_index":2499,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:59",{"_index":2508,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:67",{"_index":2510,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:71",{"_index":2501,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:87",{"_index":2506,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editor.service.ts:9",{"_index":2513,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["editorcontainer",{"_index":1364,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["editorservice",{"_index":1378,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["efficient",{"_index":2998,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":3024,"title":{},"body":{"index.html":{}}}],["elementref",{"_index":1181,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["email",{"_index":164,"title":{},"body":{"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CalendarUser.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"controllers/DashboardController.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService-1.html":{}}}],["email'})@apibody({type",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["email'})@isstring()@isnotempty({message",{"_index":2212,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["email_verification",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["emitcolumnupdate",{"_index":1721,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emitcolumnupdate(data",{"_index":1727,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emitsubtaskupdate",{"_index":1722,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emitsubtaskupdate(data",{"_index":1729,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emittaskupdate",{"_index":1723,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emittaskupdate(data",{"_index":1731,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emitworkspaceupdate",{"_index":1724,"title":{},"body":{"classes/EventsGateway.html":{}}}],["emitworkspaceupdate(data",{"_index":1733,"title":{},"body":{"classes/EventsGateway.html":{}}}],["enabled",{"_index":2524,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["end",{"_index":1107,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["end.sethours(23",{"_index":1108,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["enddate",{"_index":594,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["endpoint",{"_index":1470,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["enhanced",{"_index":2057,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["enough",{"_index":2662,"title":{},"body":{"classes/User-1.html":{}}}],["ensure",{"_index":2470,"title":{},"body":{"injectables/TeamsService.html":{},"index.html":{}}}],["enterprise",{"_index":3071,"title":{},"body":{"index.html":{}}}],["enum",{"_index":650,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Commitment.html":{},"classes/Notification.html":{},"classes/Task-1.html":{},"classes/User.html":{},"classes/WorkspaceTask.html":{}}}],["enumerations",{"_index":2981,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":1017,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["error",{"_index":582,"title":{},"body":{"injectables/CalendarService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["error('failed",{"_index":1399,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["error('subtask",{"_index":2279,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["error('task",{"_index":2272,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["error.message",{"_index":584,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/HbsRenderService.html":{}}}],["eslint",{"_index":81,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/CommitmentsController.html":{},"modules/CommitmentsModule.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{}}}],["eslint/no",{"_index":1866,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["etc",{"_index":38,"title":{},"body":{"classes/Activity.html":{},"injectables/ZipExportService.html":{}}}],["event",{"_index":706,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CommitmentsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{}}}],["events",{"_index":1848,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["events/events.gateway",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["eventsgateway",{"_index":250,"title":{"classes/EventsGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/EventsGateway.html":{},"coverage.html":{}}}],["example",{"_index":1576,"title":{},"body":{"classes/CreateMeetingDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["exec",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"injectables/UsersService-1.html":{}}}],["executioncontext",{"_index":185,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":1427,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"controllers/TaskController.html":{},"interfaces/Template.html":{}}}],["existingtasks",{"_index":2110,"title":{},"body":{"injectables/NotificationService.html":{}}}],["existingtasks.map((t",{"_index":2116,"title":{},"body":{"injectables/NotificationService.html":{}}}],["existinguser",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/TeamsService.html":{}}}],["expected",{"_index":944,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["experience",{"_index":3062,"title":{},"body":{"index.html":{}}}],["expired",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["explicitly",{"_index":197,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/User-1.html":{}}}],["export",{"_index":32,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{}}}],["export.service",{"_index":1191,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["export.service.ts",{"_index":2839,"title":{},"body":{"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["export.service.ts:10",{"_index":2846,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["export.service.ts:29",{"_index":2848,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["export.service.ts:75",{"_index":2844,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["exports",{"_index":115,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["exporttemplates",{"_index":2841,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["exporttemplates(files",{"_index":2845,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["exportzip",{"_index":1459,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["express",{"_index":193,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DashboardController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["extend",{"_index":2650,"title":{},"body":{"classes/User-1.html":{}}}],["extends",{"_index":33,"title":{},"body":{"classes/Activity.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CalendarTask.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"controllers/DashboardController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Project.html":{},"classes/Task.html":{},"classes/Team.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/User.html":{},"classes/Workspace.html":{},"classes/WorkspaceSubtask.html":{}}}],["extract",{"_index":2874,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["extractjwt",{"_index":1857,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1871,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["f0f8ff",{"_index":1829,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["f8f9fa",{"_index":1264,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["false",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CalendarTask.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateMeetingDto.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Meeting.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"classes/Task-1.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/User-1.html":{},"classes/WorkspaceSubtask.html":{}}}],["false})@isoptional()@isboolean",{"_index":1557,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1566,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["family",{"_index":1245,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fast",{"_index":3037,"title":{},"body":{"index.html":{}}}],["feature",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["features",{"_index":3047,"title":{},"body":{"index.html":{}}}],["few",{"_index":3039,"title":{},"body":{"index.html":{}}}],["ffc107",{"_index":1277,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fff5f5",{"_index":1833,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["field",{"_index":837,"title":{},"body":{"classes/CommentGateway.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/User-1.html":{}}}],["fields",{"_index":2033,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/User-1.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"coverage.html":{}}}],["file.content",{"_index":2852,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["filename",{"_index":1477,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["filenamematch",{"_index":1484,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["filenamematch[1",{"_index":1486,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["files",{"_index":2847,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["files.foreach(file",{"_index":2850,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["filetype",{"_index":2502,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["filter",{"_index":1086,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["filter((m",{"_index":2810,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["filter((notif",{"_index":2106,"title":{},"body":{"injectables/NotificationService.html":{}}}],["filter(boolean",{"_index":2806,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["filter.archived",{"_index":1103,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["filter.assigneeid",{"_index":1096,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["filter.duedate",{"_index":1101,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["filter.priority",{"_index":1098,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["filter.status",{"_index":1111,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["filter.title",{"_index":1092,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["final",{"_index":2648,"title":{},"body":{"classes/User-1.html":{}}}],["find",{"_index":572,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["find(query",{"_index":2103,"title":{},"body":{"injectables/NotificationService.html":{}}}],["findall",{"_index":56,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["findallfortask",{"_index":2260,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["findallfortask(taskid",{"_index":2265,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["findbyemail",{"_index":2724,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["findbyemail(email",{"_index":2731,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["findbyid",{"_index":2725,"title":{},"body":{"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["findbyid(id",{"_index":2733,"title":{},"body":{"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["findbyidandupdate(id",{"_index":588,"title":{},"body":{"injectables/CalendarService.html":{}}}],["findbyproject",{"_index":2376,"title":{},"body":{"injectables/TaskService.html":{}}}],["findbyproject(projectid",{"_index":2384,"title":{},"body":{"injectables/TaskService.html":{}}}],["findbyworkspace",{"_index":2139,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{}}}],["findbyworkspace(@param('workspaceid",{"_index":2154,"title":{},"body":{"controllers/ProjectController.html":{}}}],["findbyworkspace(workspaceid",{"_index":2142,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{}}}],["findone",{"_index":57,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"injectables/CommitmentsService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/UserController.html":{},"controllers/WorkspaceController.html":{}}}],["findone(@param('id",{"_index":101,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{},"controllers/WorkspaceController.html":{}}}],["findone(id",{"_index":70,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"injectables/CommitmentsService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/UserController.html":{},"controllers/WorkspaceController.html":{}}}],["findusernotifications",{"_index":1989,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["findusernotifications(userid",{"_index":1998,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["first",{"_index":1405,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UsersService.html":{}}}],["fit",{"_index":1295,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fix",{"_index":2667,"title":{},"body":{"classes/User-1.html":{}}}],["flag",{"_index":2125,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/ZipExportService.html":{}}}],["flex",{"_index":1240,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["flexible",{"_index":2035,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["fns",{"_index":2956,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":3046,"title":{},"body":{"index.html":{}}}],["follow",{"_index":3075,"title":{},"body":{"index.html":{}}}],["font",{"_index":1244,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["fonts",{"_index":2890,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["fontsize",{"_index":2526,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["forgotpassword",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(@body",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["forgotpassword(dto",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":278,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"coverage.html":{}}}],["format",{"_index":754,"title":{},"body":{"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"classes/CreateMeetingDto.html":{}}}],["formsmodule",{"_index":2596,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["forwardref",{"_index":2084,"title":{},"body":{"modules/NotificationModule.html":{}}}],["found",{"_index":155,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/SubtaskService.html":{},"injectables/TeamsService.html":{},"injectables/UsersService-1.html":{}}}],["frame",{"_index":1342,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["framework",{"_index":2996,"title":{},"body":{"index.html":{}}}],["fromdate",{"_index":563,"title":{},"body":{"injectables/CalendarService.html":{}}}],["frontend",{"_index":1945,"title":{},"body":{"classes/Member-1.html":{}}}],["full",{"_index":1615,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"index.html":{}}}],["function",{"_index":2512,"title":{},"body":{"injectables/TemplateEditorService.html":{},"coverage.html":{}}}],["functionality",{"_index":1457,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["functions",{"_index":2992,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":3041,"title":{},"body":{"index.html":{}}}],["gap",{"_index":1270,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["gateway",{"_index":1059,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["generate",{"_index":2857,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["generated",{"_index":2211,"title":{},"body":{"classes/ResetPasswordDto.html":{},"injectables/ZipExportService.html":{}}}],["generatereadme",{"_index":2842,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["generating",{"_index":2866,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["generation",{"_index":2864,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["generator",{"_index":1212,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["get(':id",{"_index":71,"title":{},"body":{"controllers/ActivityController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{},"controllers/WorkspaceController.html":{}}}],["get(':taskid/subtasks",{"_index":2340,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('meetings",{"_index":483,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["get('metrics",{"_index":479,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["get('tasks",{"_index":521,"title":{},"body":{"controllers/CalendarController.html":{}}}],["get('user/:userid",{"_index":2000,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["get('user/:userid/unread",{"_index":2016,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["get('verify",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["get('workspace/:workspaceid",{"_index":2143,"title":{},"body":{"controllers/ProjectController.html":{}}}],["get(@param('id",{"_index":955,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["get(id",{"_index":989,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["getcomments",{"_index":781,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["getcomments(@param('taskid",{"_index":804,"title":{},"body":{"controllers/CommentController.html":{}}}],["getcomments(taskid",{"_index":791,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["gethello",{"_index":209,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlanguagefromfiletype",{"_index":2495,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["getlanguagefromfiletype(filetype",{"_index":2500,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["getmeetings",{"_index":484,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["getmetrics",{"_index":1640,"title":{},"body":{"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["getmetrics(@req",{"_index":480,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["getmetrics(req",{"_index":1644,"title":{},"body":{"controllers/DashboardController.html":{}}}],["getmetrics(userid",{"_index":1677,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getmockdata",{"_index":1756,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["getsubtasks",{"_index":2331,"title":{},"body":{"controllers/TaskController.html":{}}}],["getsubtasks(@param('taskid",{"_index":2351,"title":{},"body":{"controllers/TaskController.html":{}}}],["getsubtasks(taskid",{"_index":2339,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettasks",{"_index":511,"title":{},"body":{"controllers/CalendarController.html":{}}}],["gettasks(@query",{"_index":535,"title":{},"body":{"controllers/CalendarController.html":{}}}],["gettasks(query",{"_index":520,"title":{},"body":{"controllers/CalendarController.html":{}}}],["gettasksinrange",{"_index":552,"title":{},"body":{"injectables/CalendarService.html":{}}}],["gettasksinrange(viewmode",{"_index":558,"title":{},"body":{"injectables/CalendarService.html":{}}}],["getteams",{"_index":2441,"title":{},"body":{"injectables/TeamsService.html":{}}}],["getupcomingmeetings",{"_index":1668,"title":{},"body":{"injectables/DashboardService.html":{}}}],["global",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["go",{"_index":2715,"title":{},"body":{"injectables/UsersService.html":{}}}],["google/generative",{"_index":2928,"title":{},"body":{"dependencies.html":{}}}],["graph",{"_index":1218,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{},"modules.html":{}}}],["grid",{"_index":1293,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["grow",{"_index":3084,"title":{},"body":{"index.html":{}}}],["gt",{"_index":1102,"title":{},"body":{"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{}}}],["gte",{"_index":574,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/CommitmentsService.html":{}}}],["guard",{"_index":175,"title":{"guards/ApiKeyGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":177,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["h3",{"_index":1307,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["h4",{"_index":1335,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["handle",{"_index":1846,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["handleaddcomment",{"_index":808,"title":{},"body":{"classes/CommentGateway.html":{}}}],["handleaddcomment(payload",{"_index":813,"title":{},"body":{"classes/CommentGateway.html":{}}}],["handlearchive",{"_index":1000,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["handlebars",{"_index":1424,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handlebars.create",{"_index":1772,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["handlebars_unescaped",{"_index":2564,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["handlebarsinstance",{"_index":1755,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["handleconnection",{"_index":1021,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handleconnection(client",{"_index":1027,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handledeletecomment",{"_index":809,"title":{},"body":{"classes/CommentGateway.html":{}}}],["handledeletecomment(payload",{"_index":816,"title":{},"body":{"classes/CommentGateway.html":{}}}],["handledisconnect",{"_index":1022,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handledisconnect(client",{"_index":1031,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handleeditcomment",{"_index":810,"title":{},"body":{"classes/CommentGateway.html":{}}}],["handleeditcomment(payload",{"_index":819,"title":{},"body":{"classes/CommentGateway.html":{}}}],["handlejoin",{"_index":1023,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handlejoin(@connectedsocket",{"_index":1042,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handlejoin(client",{"_index":1033,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["handleping",{"_index":1725,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handleping(@messagebody",{"_index":1744,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handleping(message",{"_index":1735,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handles",{"_index":2651,"title":{},"body":{"classes/User-1.html":{}}}],["handling",{"_index":2022,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["hands",{"_index":3061,"title":{},"body":{"index.html":{}}}],["handy",{"_index":3052,"title":{},"body":{"index.html":{}}}],["hard",{"_index":2071,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["harddeleteoldsoftdeletednotifications",{"_index":1966,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["hashedpassword",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["hbs",{"_index":1193,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{}}}],["hbsrenderservice",{"_index":1192,"title":{"injectables/HbsRenderService.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"overview.html":{}}}],["hbsservice",{"_index":1380,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["header",{"_index":198,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["headers",{"_index":1478,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["height",{"_index":1242,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hello",{"_index":266,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":2960,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":3065,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1777,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["helpers",{"_index":1774,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["here",{"_index":1717,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/ProjectController.html":{},"index.html":{}}}],["hidden",{"_index":1291,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hide",{"_index":1211,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hidedarkmodetoggle",{"_index":1173,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["hidegenerator",{"_index":1174,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["high",{"_index":916,"title":{},"body":{"classes/Commitment.html":{},"classes/CreateCommitmentDto.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["hook",{"_index":1843,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["hooks",{"_index":1225,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["horizontal",{"_index":2532,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["hour",{"_index":1010,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["href",{"_index":1851,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["hrs",{"_index":1141,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["html",{"_index":1818,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["htmlelement",{"_index":2504,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["http",{"_index":1377,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"dependencies.html":{}}}],["http://localhost:4000/api/auth/verify?token=${token",{"_index":1899,"title":{},"body":{"injectables/MailService.html":{}}}],["httpclient",{"_index":1184,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["httpclientmodule",{"_index":2598,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["httpcode",{"_index":935,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["httpcode(httpstatus.no_content",{"_index":974,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["https://compodoc.app/guides/template",{"_index":2899,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["https://meet.example.com/standup",{"_index":1559,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["https://nestjs.com",{"_index":3096,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":936,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["hurt",{"_index":2658,"title":{},"body":{"classes/User-1.html":{}}}],["hydrateddocument",{"_index":1920,"title":{},"body":{"classes/Meeting.html":{},"classes/User-1.html":{},"miscellaneous/typealiases.html":{}}}],["icon",{"_index":1327,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["id",{"_index":73,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/MeetingResponseDto.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["identifier",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1872,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["implement",{"_index":1456,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["implementation",{"_index":1448,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["implements",{"_index":194,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/CompoDocConfig.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{}}}],["imports",{"_index":125,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{}}}],["improvement",{"_index":2319,"title":{},"body":{"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["in_progress",{"_index":658,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Commitment.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["inc",{"_index":2480,"title":{},"body":{"injectables/TeamsService.html":{}}}],["includes",{"_index":1175,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["includesname",{"_index":1176,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["increment",{"_index":2477,"title":{},"body":{"injectables/TeamsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicator",{"_index":1276,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{}}}],["information",{"_index":1796,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/ZipExportService.html":{},"index.html":{}}}],["infrastructure",{"_index":3049,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":2516,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["initializeeditor",{"_index":1413,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["initializeeditor(container",{"_index":2503,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["initializehandlebars",{"_index":1757,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["initializing",{"_index":1387,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["inject",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":128,"title":{"injectables/ActivityService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}},"body":{"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{}}}],["injectables",{"_index":129,"title":{},"body":{"injectables/ActivityService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{},"overview.html":{}}}],["injectmodel",{"_index":143,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["injectmodel(activity.name",{"_index":144,"title":{},"body":{"injectables/ActivityService.html":{}}}],["injectmodel(calendartask.name",{"_index":562,"title":{},"body":{"injectables/CalendarService.html":{}}}],["injectmodel(column.name",{"_index":736,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["injectmodel(comment.name",{"_index":868,"title":{},"body":{"injectables/CommentService.html":{}}}],["injectmodel(commitment.name",{"_index":1072,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["injectmodel(meeting.name",{"_index":1686,"title":{},"body":{"injectables/DashboardService.html":{}}}],["injectmodel(member.name",{"_index":2458,"title":{},"body":{"injectables/TeamsService.html":{}}}],["injectmodel(notification.name",{"_index":1973,"title":{},"body":{"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{}}}],["injectmodel(subtask.name",{"_index":2270,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["injectmodel(task.name",{"_index":869,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotificationService.html":{},"injectables/SubtaskService.html":{}}}],["injectmodel(team.name",{"_index":2457,"title":{},"body":{"injectables/TeamsService.html":{}}}],["injectmodel(user.name",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/UsersService.html":{}}}],["injectmodel(workspace.name",{"_index":737,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["inprogresstasks",{"_index":1651,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{}}}],["inputs",{"_index":1798,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["install",{"_index":3040,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":3006,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1770,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["instanceof",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CalendarService.html":{}}}],["instead",{"_index":1900,"title":{},"body":{"injectables/MailService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["instructions",{"_index":2854,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["interact",{"_index":3067,"title":{},"body":{"index.html":{}}}],["interface",{"_index":336,"title":{"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/CommitmentQuery.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"interfaces/CompoDocConfig.html":{},"controllers/DashboardController.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["interfaces",{"_index":463,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/CommitmentQuery.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"overview.html":{}}}],["internal",{"_index":1223,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["isactive",{"_index":628,"title":{},"body":{"classes/CalendarUser.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/WorkspaceService.html":{}}}],["isarray",{"_index":1636,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["isarray()@isstring({each",{"_index":1632,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["isboolean",{"_index":1573,"title":{},"body":{"classes/CreateMeetingDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["isdate",{"_index":1571,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["isdeleted",{"_index":2036,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Task-1.html":{}}}],["isdone",{"_index":1593,"title":{},"body":{"classes/CreateSubtaskDto.html":{},"classes/Subtask.html":{},"classes/UpdateSubtaskDto.html":{}}}],["isemail",{"_index":1611,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{}}}],["isemailverified",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/User-1.html":{}}}],["isenum",{"_index":1534,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["isenum(['high",{"_index":1537,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["isenum(commitmentstatus",{"_index":1538,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["isglobal",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1588,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isin(['mention",{"_index":1584,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isinitial",{"_index":1815,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["isinitialtab",{"_index":1813,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["isiso8601",{"_index":1524,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["ismanager",{"_index":1882,"title":{},"body":{"interfaces/JwtPayload-1.html":{}}}],["isnan(fromdate.gettime",{"_index":567,"title":{},"body":{"injectables/CalendarService.html":{}}}],["isnan(todate.gettime",{"_index":568,"title":{},"body":{"injectables/CalendarService.html":{}}}],["isnotempty",{"_index":1533,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isnotempty({message",{"_index":1531,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["iso",{"_index":1536,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{}}}],["isoptional",{"_index":1511,"title":{},"body":{"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["isoptional()@isboolean",{"_index":2608,"title":{},"body":{"classes/UpdateCommitmentDto.html":{}}}],["isoptional()@isenum(['high",{"_index":1527,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["isoptional()@isenum(commitmentstatus",{"_index":1529,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["isoptional()@isstring",{"_index":1505,"title":{},"body":{"classes/CreateActivityDto.html":{}}}],["isoptional()@isuuid",{"_index":1521,"title":{},"body":{"classes/CreateCommitmentDto.html":{}}}],["ispasswordvalid",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["isread",{"_index":1950,"title":{},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["isrecurring",{"_index":1542,"title":{},"body":{"classes/CreateMeetingDto.html":{},"injectables/DashboardService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{}}}],["isstring",{"_index":1507,"title":{},"body":{"classes/CreateActivityDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{}}}],["isstring()@isoptional",{"_index":1580,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateWorkspaceDto.html":{}}}],["isstrongpassword",{"_index":2201,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["istabenabled",{"_index":1807,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["isurl",{"_index":1572,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["isuuid",{"_index":1535,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"classes/MarkReadDto.html":{}}}],["isvalid",{"_index":2040,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["isvisible",{"_index":1841,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["it.archived",{"_index":1147,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["it.save",{"_index":1148,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["italic",{"_index":1332,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["item",{"_index":1083,"title":{},"body":{"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["item._id",{"_index":1136,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.archived",{"_index":1129,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.assigneeid",{"_index":1123,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.completed",{"_index":1127,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.description",{"_index":1121,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.duedate",{"_index":1122,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.linkedtaskid",{"_index":1124,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.name",{"_index":1501,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["item.priority",{"_index":1125,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.save",{"_index":1130,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.status",{"_index":1126,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["item.title",{"_index":1120,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["items",{"_index":1258,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["javascript",{"_index":2556,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["job",{"_index":3078,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":3080,"title":{},"body":{"index.html":{}}}],["john",{"_index":1613,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Member-1.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["john@example.com",{"_index":1616,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["joi",{"_index":2962,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":3090,"title":{},"body":{"index.html":{}}}],["js",{"_index":2555,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["jsonwebtoken",{"_index":2964,"title":{},"body":{"dependencies.html":{}}}],["jszip",{"_index":2849,"title":{},"body":{"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["justify",{"_index":1254,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["jwt",{"_index":1861,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":468,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1870,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":415,"title":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["jwtstrategy",{"_index":379,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":3093,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2034,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/ZipExportService.html":{}}}],["keeping",{"_index":2656,"title":{},"body":{"classes/User-1.html":{}}}],["key",{"_index":203,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/HbsRenderService.html":{},"index.html":{}}}],["keys.guard.ts",{"_index":179,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["keys.guard.ts:11",{"_index":186,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys.guard.ts:8",{"_index":183,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keyword",{"_index":2563,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["label",{"_index":1300,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["lang.id",{"_index":2559,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["language",{"_index":2519,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["last",{"_index":1204,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["lastsaved",{"_index":1205,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["later",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["layout",{"_index":2891,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["lean",{"_index":2029,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["lean().exec",{"_index":2114,"title":{},"body":{"injectables/NotificationService.html":{}}}],["learn",{"_index":3054,"title":{},"body":{"index.html":{}}}],["left",{"_index":1330,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["legend",{"_index":111,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["letter",{"_index":1312,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["li",{"_index":1317,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["li.active",{"_index":1324,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["li:hover",{"_index":1323,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["license",{"_index":3099,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":3083,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":1224,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["lightweight",{"_index":2023,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["limit",{"_index":1999,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["limit(limit",{"_index":2104,"title":{},"body":{"injectables/NotificationService.html":{}}}],["limit=20&cursor=2025",{"_index":2048,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["line",{"_index":1864,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/Task.html":{}}}],["linenumbers",{"_index":2529,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["link",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/DashboardService.html":{},"injectables/MailService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{}}}],["linkedin",{"_index":3077,"title":{},"body":{"index.html":{}}}],["linkedtaskid",{"_index":908,"title":{},"body":{"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{}}}],["list",{"_index":982,"title":{},"body":{"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["list(@query",{"_index":960,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["list(params",{"_index":1066,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["list(q",{"_index":991,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["listener",{"_index":1742,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/TemplateEditorService.html":{}}}],["literal",{"_index":465,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":1235,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["loading",{"_index":1232,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["loadsessionconfig",{"_index":1409,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["loadsessiontemplates",{"_index":1400,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["local",{"_index":1890,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthenticatedrequest",{"_index":286,"title":{"interfaces/LocalAuthenticatedRequest.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"coverage.html":{}}}],["localstrategy",{"_index":380,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1902,"title":{},"body":{"injectables/MailService.html":{}}}],["logger",{"_index":999,"title":{},"body":{"injectables/CommitmentsCron.html":{},"injectables/NotificationCleanup.html":{}}}],["logger(commitmentscron.name",{"_index":1006,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["logger(notificationcleanup.name",{"_index":1972,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["login",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["login(req",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":2213,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["long'})@isnotempty({message",{"_index":2209,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["looking",{"_index":3027,"title":{},"body":{"index.html":{}}}],["loop",{"_index":3073,"title":{},"body":{"index.html":{}}}],["low",{"_index":918,"title":{},"body":{"classes/Commitment.html":{},"classes/CreateCommitmentDto.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["lowercase",{"_index":2194,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["lt",{"_index":1980,"title":{},"body":{"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{}}}],["lte",{"_index":576,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/CommitmentsService.html":{}}}],["m",{"_index":2811,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["m._id.tostring",{"_index":1696,"title":{},"body":{"injectables/DashboardService.html":{}}}],["m.createdat",{"_index":1701,"title":{},"body":{"injectables/DashboardService.html":{}}}],["m.datetime",{"_index":1699,"title":{},"body":{"injectables/DashboardService.html":{}}}],["m.description",{"_index":1698,"title":{},"body":{"injectables/DashboardService.html":{}}}],["m.link",{"_index":1700,"title":{},"body":{"injectables/DashboardService.html":{}}}],["m.title",{"_index":1697,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mail/mail.service",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["mailservice",{"_index":322,"title":{"injectables/MailService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1219,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["make",{"_index":1718,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["makes",{"_index":3035,"title":{},"body":{"index.html":{}}}],["making",{"_index":2895,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["manager",{"_index":2934,"title":{},"body":{"dependencies.html":{}}}],["managing",{"_index":3048,"title":{},"body":{"index.html":{}}}],["many",{"_index":639,"title":{},"body":{"classes/CalendarUser.html":{},"classes/Workspace-1.html":{}}}],["map((m",{"_index":2807,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["map((notif",{"_index":2108,"title":{},"body":{"injectables/NotificationService.html":{}}}],["mapping",{"_index":1794,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["margin",{"_index":1298,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["mark",{"_index":1132,"title":{},"body":{"injectables/CommitmentsService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["markallasread",{"_index":1990,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["markallasread(@param('userid",{"_index":2063,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["markallasread(userid",{"_index":2002,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["markcomplete",{"_index":1057,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["markcomplete(id",{"_index":1068,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["markoneasread",{"_index":1991,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["markoneasread(@param('id",{"_index":2066,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["markoneasread(id",{"_index":2006,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["markoneasunread",{"_index":1992,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["markoneasunread(@param('id",{"_index":2069,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["markoneasunread(id",{"_index":2009,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["markreaddto",{"_index":1906,"title":{"classes/MarkReadDto.html":{}},"body":{"classes/MarkReadDto.html":{},"coverage.html":{}}}],["master",{"_index":2991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["match",{"_index":943,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["matching",{"_index":46,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":3031,"title":{},"body":{"index.html":{}}}],["max",{"_index":1288,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["medium",{"_index":917,"title":{},"body":{"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["meeting",{"_index":1548,"title":{"classes/Meeting.html":{}},"body":{"classes/CreateMeetingDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"classes/Meeting.html":{},"coverage.html":{}}}],["meeting.dto",{"_index":472,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["meeting.dto.ts",{"_index":1540,"title":{},"body":{"classes/CreateMeetingDto.html":{},"coverage.html":{}}}],["meeting.dto.ts:14",{"_index":1570,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["meeting.dto.ts:23",{"_index":1554,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["meeting.dto.ts:32",{"_index":1550,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["meeting.dto.ts:41",{"_index":1561,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["meeting.dto.ts:50",{"_index":1558,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["meeting.dto.ts:59",{"_index":1567,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["meeting.name",{"_index":1666,"title":{},"body":{"modules/DashboardModule.html":{}}}],["meeting.save",{"_index":1703,"title":{},"body":{"injectables/DashboardService.html":{}}}],["meetingdocument",{"_index":1921,"title":{},"body":{"classes/Meeting.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["meetingmodel",{"_index":1674,"title":{},"body":{"injectables/DashboardService.html":{}}}],["meetingresponsedto",{"_index":473,"title":{"classes/MeetingResponseDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/MeetingResponseDto.html":{},"coverage.html":{}}}],["meetings",{"_index":1693,"title":{},"body":{"injectables/DashboardService.html":{}}}],["meetings.map((m",{"_index":1695,"title":{},"body":{"injectables/DashboardService.html":{}}}],["meetingschema",{"_index":1664,"title":{},"body":{"modules/DashboardModule.html":{},"classes/Meeting.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["member",{"_index":162,"title":{"classes/Member.html":{},"classes/Member-1.html":{}},"body":{"classes/AddMemberDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Workspace-1.html":{},"coverage.html":{}}}],["member._id",{"_index":2481,"title":{},"body":{"injectables/TeamsService.html":{}}}],["member.dto.ts",{"_index":171,"title":{},"body":{"classes/AddMemberDto-1.html":{},"coverage.html":{}}}],["member.dto.ts:3",{"_index":172,"title":{},"body":{"classes/AddMemberDto-1.html":{}}}],["member.dto.ts:4",{"_index":174,"title":{},"body":{"classes/AddMemberDto-1.html":{}}}],["member.dto.ts:5",{"_index":173,"title":{},"body":{"classes/AddMemberDto-1.html":{}}}],["member.name",{"_index":2437,"title":{},"body":{"modules/TeamsModule.html":{}}}],["member.save",{"_index":2475,"title":{},"body":{"injectables/TeamsService.html":{}}}],["member.team",{"_index":2491,"title":{},"body":{"injectables/TeamsService.html":{}}}],["membercount",{"_index":2396,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["membermodel",{"_index":2444,"title":{},"body":{"injectables/TeamsService.html":{}}}],["members",{"_index":1630,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"injectables/WorkspaceService.html":{}}}],["members').exec",{"_index":2816,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["members.length",{"_index":2813,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["memberschema",{"_index":1937,"title":{},"body":{"classes/Member.html":{},"classes/Member-1.html":{},"modules/TeamsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mention",{"_index":1961,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["merges",{"_index":2668,"title":{},"body":{"classes/User-1.html":{}}}],["message",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["messagebody",{"_index":823,"title":{},"body":{"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"classes/TaskGateway-1.html":{}}}],["metadata",{"_index":2974,"title":{},"body":{"dependencies.html":{}}}],["metatag",{"_index":2568,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["metatag.content",{"_index":2567,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["methods",{"_index":53,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}}}],["metrics.dto",{"_index":1684,"title":{},"body":{"injectables/DashboardService.html":{}}}],["metrics.dto.ts",{"_index":1648,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"coverage.html":{}}}],["metrics.dto.ts:3",{"_index":1655,"title":{},"body":{"classes/DashboardMetricsDto.html":{}}}],["metrics.dto.ts:4",{"_index":1656,"title":{},"body":{"classes/DashboardMetricsDto.html":{}}}],["metrics.dto.ts:5",{"_index":1657,"title":{},"body":{"classes/DashboardMetricsDto.html":{}}}],["metrics.dto.ts:6",{"_index":1654,"title":{},"body":{"classes/DashboardMetricsDto.html":{}}}],["metrics.dto.ts:7",{"_index":1658,"title":{},"body":{"classes/DashboardMetricsDto.html":{}}}],["midnight",{"_index":1975,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["min",{"_index":1619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["minimal",{"_index":1177,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["minimap",{"_index":2523,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["minlength",{"_index":1612,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(8",{"_index":1622,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlowercase",{"_index":2196,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["minmax(200px",{"_index":1296,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["minnumbers",{"_index":2198,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["minsymbols",{"_index":2199,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["minuppercase",{"_index":2197,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["miscellaneous",{"_index":2980,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mistake",{"_index":2717,"title":{},"body":{"injectables/UsersService.html":{}}}],["mit",{"_index":3082,"title":{},"body":{"index.html":{}}}],["mock",{"_index":1831,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/MailService.html":{}}}],["mode",{"_index":1214,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["model",{"_index":133,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{}}}],["models",{"_index":1716,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["modify",{"_index":2888,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["module",{"_index":107,"title":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{}},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"injectables/HbsRenderService.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["modules",{"_index":109,"title":{"modules.html":{}},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"injectables/HbsRenderService.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"modules.html":{},"overview.html":{}}}],["monaco",{"_index":2515,"title":{},"body":{"injectables/TemplateEditorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["monaco.editor.create(container",{"_index":2518,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.editor.createmodel(content",{"_index":2551,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.getlanguages().find((lang",{"_index":2558,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.register",{"_index":2560,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.setlanguageconfiguration('handlebars",{"_index":2576,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["monaco.languages.setmonarchtokensprovider('handlebars",{"_index":2561,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["mongo",{"_index":2632,"title":{},"body":{"classes/User.html":{}}}],["mongodb",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"classes/User-1.html":{}}}],["mongodb://localhost:27017/scrumdb",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":30,"title":{},"body":{"classes/Activity.html":{},"injectables/ActivityService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Subtask.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":122,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{}}}],["mongoosemodule.forfeature",{"_index":126,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_uri",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["monospace",{"_index":1275,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["more",{"_index":2897,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{}}}],["mouseevent",{"_index":1850,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["multiple",{"_index":2835,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["myśliwiec",{"_index":3094,"title":{},"body":{"index.html":{}}}],["name",{"_index":65,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/Member-1.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}}}],["namespace",{"_index":2362,"title":{},"body":{"classes/TaskGateway.html":{}}}],["navtabs",{"_index":1809,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["navtabs.find((t",{"_index":1811,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["navtabs.length",{"_index":1816,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["navtabs[0].id",{"_index":1817,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["need",{"_index":2654,"title":{},"body":{"classes/User-1.html":{},"index.html":{}}}],["needed",{"_index":622,"title":{},"body":{"classes/CalendarTask-1.html":{},"injectables/NotificationService.html":{}}}],["nest",{"_index":3001,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":3098,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":3020,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":2931,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cache",{"_index":2933,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":88,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"modules/CalendarTaskModule.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":191,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":493,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2603,"title":{},"body":{"classes/UpdateActivityDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["nestjs/mau",{"_index":3042,"title":{},"body":{"index.html":{}}}],["nestjs/mongoose",{"_index":28,"title":{},"body":{"classes/Activity.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/Subtask.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2941,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommitmentsCron.html":{},"modules/CommitmentsModule.html":{},"injectables/NotificationCleanup.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":2944,"title":{},"body":{"dependencies.html":{}}}],["nestjs/websockets",{"_index":709,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{},"dependencies.html":{}}}],["new",{"_index":147,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{},"coverage.html":{}}}],["newcontent",{"_index":865,"title":{},"body":{"injectables/CommentService.html":{}}}],["newpassword",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["newuser",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.save",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":1863,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/TemplateEditorService.html":{}}}],["ngmodule",{"_index":2590,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["ngondestroy",{"_index":1388,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["ngoninit",{"_index":1381,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["node.js",{"_index":2995,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":2967,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1315,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["not_started",{"_index":924,"title":{},"body":{"classes/Commitment.html":{},"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":142,"title":{},"body":{"injectables/ActivityService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsService.html":{},"injectables/TeamsService.html":{},"injectables/UsersService-1.html":{}}}],["notfoundexception('comment",{"_index":886,"title":{},"body":{"injectables/CommentService.html":{}}}],["notfoundexception('commitment",{"_index":1085,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["notfoundexception('member",{"_index":2486,"title":{},"body":{"injectables/TeamsService.html":{}}}],["notfoundexception('task",{"_index":589,"title":{},"body":{"injectables/CalendarService.html":{}}}],["notfoundexception('team",{"_index":2472,"title":{},"body":{"injectables/TeamsService.html":{}}}],["notfoundexception('user",{"_index":2741,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["notfoundexception(`activity",{"_index":154,"title":{},"body":{"injectables/ActivityService.html":{}}}],["notfoundexception(`workspace",{"_index":740,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["notice",{"_index":1828,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["notif",{"_index":2120,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notif.link?.split('/tasks/')[1",{"_index":2109,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notif.link?.startswith('/tasks",{"_index":2107,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification",{"_index":1947,"title":{"classes/Notification.html":{}},"body":{"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/User-1.html":{},"coverage.html":{}}}],["notification.cleanup",{"_index":2086,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.controller",{"_index":2085,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.dto",{"_index":2021,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["notification.dto.ts",{"_index":1579,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":1582,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":1581,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:7",{"_index":1587,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.name",{"_index":2087,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.save",{"_index":2101,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.service",{"_index":2020,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{}}}],["notificationcleanup",{"_index":1964,"title":{"injectables/NotificationCleanup.html":{}},"body":{"injectables/NotificationCleanup.html":{},"modules/NotificationModule.html":{},"coverage.html":{},"overview.html":{}}}],["notificationcontroller",{"_index":1986,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"coverage.html":{}}}],["notificationdocument",{"_index":1960,"title":{},"body":{"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notificationid",{"_index":1909,"title":{},"body":{"classes/MarkReadDto.html":{}}}],["notificationmodel",{"_index":1969,"title":{},"body":{"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{}}}],["notificationmodule",{"_index":222,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationresponse",{"_index":2032,"title":{"interfaces/NotificationResponse.html":{}},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"coverage.html":{}}}],["notifications",{"_index":1983,"title":{},"body":{"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/User-1.html":{}}}],["notifications.map((notif",{"_index":2119,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifications/notification.module",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["notifications/schemas/notification.schema",{"_index":2649,"title":{},"body":{"classes/User-1.html":{}}}],["notificationschema",{"_index":1962,"title":{},"body":{"classes/Notification.html":{},"modules/NotificationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notificationservice",{"_index":2019,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtype",{"_index":1583,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["now",{"_index":1088,"title":{},"body":{"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{}}}],["npm",{"_index":3005,"title":{},"body":{"index.html":{}}}],["null",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/User-1.html":{}}}],["number",{"_index":168,"title":{},"body":{"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateSubtaskDto.html":{},"classes/DashboardMetricsDto.html":{},"injectables/HbsRenderService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/RegisterDto-1.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/Team.html":{},"interfaces/Template.html":{}}}],["object.values(category",{"_index":2324,"title":{},"body":{"classes/Task-1.html":{}}}],["object.values(columnname).includes(name",{"_index":742,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["object.values(priority",{"_index":2322,"title":{},"body":{"classes/Task-1.html":{}}}],["object.values(taskstatus",{"_index":2320,"title":{},"body":{"classes/Task-1.html":{}}}],["object.values(userrole",{"_index":2627,"title":{},"body":{"classes/User.html":{}}}],["objectids",{"_index":2631,"title":{},"body":{"classes/User.html":{}}}],["objects",{"_index":2030,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["observable",{"_index":189,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["observe",{"_index":1474,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["offer",{"_index":3079,"title":{},"body":{"index.html":{}}}],["official",{"_index":3032,"title":{},"body":{"index.html":{}}}],["old",{"_index":1139,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["old.length",{"_index":1149,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["older",{"_index":1984,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["omit",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["onchangecallback",{"_index":2493,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["onclick",{"_index":1845,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["onclick(event",{"_index":1849,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["ondestroy",{"_index":1182,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["one",{"_index":638,"title":{},"body":{"classes/CalendarUser.html":{},"injectables/CommitmentsService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceTask.html":{}}}],["onetomany",{"_index":2629,"title":{},"body":{"classes/User.html":{}}}],["oninit",{"_index":1179,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["opacity",{"_index":1328,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["open",{"_index":2580,"title":{},"body":{"injectables/TemplateEditorService.html":{},"index.html":{}}}],["operator",{"_index":697,"title":{},"body":{"controllers/ColumnController-1.html":{},"injectables/HbsRenderService.html":{}}}],["optional",{"_index":66,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarUser.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{}}}],["options",{"_index":1094,"title":{},"body":{"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["options.fn(this",{"_index":1782,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["options.inverse(this",{"_index":1783,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["order",{"_index":648,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["origin",{"_index":824,"title":{},"body":{"classes/CommentGateway.html":{}}}],["original",{"_index":2893,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["orlength",{"_index":1801,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["out",{"_index":120,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"index.html":{},"overview.html":{}}}],["outputs",{"_index":1799,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["overflow",{"_index":1290,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["overview",{"_index":1216,"title":{"overview.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"overview.html":{}}}],["overviewrulerlanes",{"_index":2534,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["owner",{"_index":890,"title":{},"body":{"injectables/CommentService.html":{},"classes/Workspace.html":{}}}],["p",{"_index":2879,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["package",{"_index":1466,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["padding",{"_index":1260,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["page",{"_index":1463,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["page.hbs",{"_index":2882,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["pages",{"_index":2867,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["pagination",{"_index":2047,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["panel",{"_index":1283,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["panel.collapsed",{"_index":1292,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["param",{"_index":85,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/CalendarController.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["param('commentid",{"_index":801,"title":{},"body":{"controllers/CommentController.html":{}}}],["param('id",{"_index":958,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{}}}],["param('taskid",{"_index":797,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TaskController.html":{}}}],["param('userid",{"_index":2050,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/WorkspaceController.html":{}}}],["param('workspaceid",{"_index":692,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{}}}],["parameterhints",{"_index":2536,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["parameters",{"_index":64,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}}}],["params",{"_index":961,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{}}}],["params.assigneeid",{"_index":1095,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["params.priority",{"_index":1097,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["params.q",{"_index":1091,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["params.sort",{"_index":1114,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["params.tab",{"_index":1100,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["parsedcursor",{"_index":2055,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["parsedlimit",{"_index":2053,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["parseint(limit",{"_index":2054,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["parser",{"_index":2954,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":3070,"title":{},"body":{"index.html":{}}}],["partial",{"_index":859,"title":{},"body":{"injectables/CommentService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"interfaces/Session.html":{},"injectables/TaskService.html":{},"interfaces/Template.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}}}],["partials",{"_index":2883,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["partialtype",{"_index":2602,"title":{},"body":{"classes/UpdateActivityDto.html":{},"classes/UpdateCommitmentDto.html":{}}}],["partialtype(createactivitydto",{"_index":2601,"title":{},"body":{"classes/UpdateActivityDto.html":{}}}],["partialtype(createcommitmentdto",{"_index":2607,"title":{},"body":{"classes/UpdateCommitmentDto.html":{}}}],["passport",{"_index":1860,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1856,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1862,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CalendarUser.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["password')@apioperation({summary",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["password.dto.ts",{"_index":1747,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":2210,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:9",{"_index":1751,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["patch",{"_index":528,"title":{},"body":{"controllers/CalendarController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/TeamsController.html":{}}}],["patch(':id",{"_index":957,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/TeamsController.html":{}}}],["patch(':id/archive",{"_index":968,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["patch(':id/complete",{"_index":976,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["patch(':id/read",{"_index":2007,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["patch(':id/restore",{"_index":2013,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["patch(':id/unread",{"_index":2010,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["patch('members/:id",{"_index":2417,"title":{},"body":{"controllers/TeamsController.html":{}}}],["patch('tasks/:id",{"_index":526,"title":{},"body":{"controllers/CalendarController.html":{}}}],["patch('user/:userid/mark",{"_index":2003,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["path",{"_index":1195,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["path/to/custom/templates",{"_index":2881,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["payload",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{}}}],["payload.commentid",{"_index":834,"title":{},"body":{"classes/CommentGateway.html":{}}}],["payload.content",{"_index":828,"title":{},"body":{"classes/CommentGateway.html":{}}}],["payload.email",{"_index":1878,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1881,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"coverage.html":{}}}],["payload.name",{"_index":1879,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1877,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.taskid",{"_index":826,"title":{},"body":{"classes/CommentGateway.html":{}}}],["payload.userid",{"_index":827,"title":{},"body":{"classes/CommentGateway.html":{}}}],["pending",{"_index":2296,"title":{},"body":{"classes/Task.html":{}}}],["pings",{"_index":1743,"title":{},"body":{"classes/EventsGateway.html":{}}}],["pino",{"_index":2971,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":3030,"title":{},"body":{"index.html":{}}}],["playground",{"_index":1199,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["playground.component",{"_index":2599,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["playground.component.ts",{"_index":1153,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["playground.module.ts",{"_index":2589,"title":{},"body":{"modules/TemplatePlaygroundModule.html":{}}}],["playground/hbs",{"_index":1753,"title":{},"body":{"injectables/HbsRenderService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["playground/template",{"_index":1152,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["playground/zip",{"_index":2838,"title":{},"body":{"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["please",{"_index":1462,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["pointer",{"_index":1319,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["polaris",{"_index":2626,"title":{},"body":{"classes/User.html":{}}}],["pong",{"_index":1745,"title":{},"body":{"classes/EventsGateway.html":{}}}],["pop",{"_index":2565,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["populate('assignedto').exec",{"_index":2392,"title":{},"body":{"injectables/TaskService.html":{}}}],["populate('calendaruser",{"_index":577,"title":{},"body":{"injectables/CalendarService.html":{}}}],["populate('createdby').exec",{"_index":2180,"title":{},"body":{"injectables/ProjectService.html":{}}}],["populate('members').exec",{"_index":2482,"title":{},"body":{"injectables/TeamsService.html":{}}}],["populate('task').exec",{"_index":2278,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["populate('team').exec",{"_index":2485,"title":{},"body":{"injectables/TeamsService.html":{}}}],["populate('userid').exec",{"_index":883,"title":{},"body":{"injectables/CommentService.html":{}}}],["populated",{"_index":2461,"title":{},"body":{"injectables/TeamsService.html":{}}}],["position",{"_index":1340,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["possible",{"_index":3025,"title":{},"body":{"index.html":{}}}],["post",{"_index":62,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/DashboardController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["post(':id/members",{"_index":2411,"title":{},"body":{"controllers/TeamsController.html":{}}}],["post(':taskid/subtasks",{"_index":2334,"title":{},"body":{"controllers/TaskController.html":{}}}],["post(':workspaceid",{"_index":686,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{}}}],["post('forgot",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["post('login",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["post('login')@useguards(undefined",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('meetings",{"_index":486,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["post('register",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["post('register')@apibody({type",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('resend",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["post('reset",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["post('tasks",{"_index":515,"title":{},"body":{"controllers/CalendarController.html":{}}}],["prefix",{"_index":51,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/AuthController.html":{},"controllers/CalendarController.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"controllers/CommentController.html":{},"controllers/CommitmentsController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["prettier/prettier",{"_index":83,"title":{},"body":{"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"modules/ColumnModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/CommitmentsController.html":{},"modules/CommitmentsModule.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{}}}],["preview",{"_index":1236,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["previewframe",{"_index":1366,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["previewurl",{"_index":1374,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["primary",{"_index":1349,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["primary:hover",{"_index":1350,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["priority",{"_index":909,"title":{},"body":{"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/CreateCommitmentDto.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["priority.medium",{"_index":2323,"title":{},"body":{"classes/Task-1.html":{}}}],["private",{"_index":145,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}}}],["production",{"_index":3009,"title":{},"body":{"index.html":{}}}],["progress",{"_index":659,"title":{},"body":{"classes/Column.html":{},"classes/Column-2.html":{},"classes/Commitment.html":{},"injectables/DashboardService.html":{},"classes/Task-1.html":{},"classes/WorkspaceTask.html":{},"miscellaneous/enumerations.html":{}}}],["progressive",{"_index":2994,"title":{},"body":{"index.html":{}}}],["project",{"_index":2127,"title":{"classes/Project.html":{}},"body":{"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/Task.html":{},"coverage.html":{},"index.html":{}}}],["project.controller",{"_index":2162,"title":{},"body":{"modules/ProjectModule.html":{}}}],["project.name",{"_index":2163,"title":{},"body":{"modules/ProjectModule.html":{}}}],["project.save",{"_index":2176,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project.schema",{"_index":2149,"title":{},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{}}}],["project.service",{"_index":2148,"title":{},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{}}}],["project/project.module",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["projectcontroller",{"_index":2136,"title":{"controllers/ProjectController.html":{}},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"coverage.html":{}}}],["projectid",{"_index":2291,"title":{},"body":{"classes/Task.html":{},"injectables/TaskService.html":{}}}],["projectmodel",{"_index":2167,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectmodule",{"_index":223,"title":{"modules/ProjectModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProjectModule.html":{},"modules.html":{},"overview.html":{}}}],["projects",{"_index":2138,"title":{},"body":{"controllers/ProjectController.html":{}}}],["projectschema",{"_index":2134,"title":{},"body":{"classes/Project.html":{},"modules/ProjectModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projectservice",{"_index":2147,"title":{"injectables/ProjectService.html":{}},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":137,"title":{},"body":{"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"injectables/WorkspaceService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":1687,"title":{},"body":{"injectables/DashboardService.html":{}}}],["prop",{"_index":25,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["prop({default",{"_index":604,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Commitment.html":{},"classes/Meeting.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/WorkspaceSubtask.html":{}}}],["prop({enum",{"_index":919,"title":{},"body":{"classes/Commitment.html":{}}}],["prop({required",{"_index":16,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Commitment.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["prop({type",{"_index":21,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["prop({unique",{"_index":631,"title":{},"body":{"classes/CalendarUser.html":{},"classes/User-1.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/Activity.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"classes/DashboardMetricsDto.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"interfaces/NotificationResponse.html":{},"classes/Project.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"classes/SubtaskGateway.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/Team.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceGateway.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"properties.html":{}}}],["property",{"_index":2660,"title":{},"body":{"classes/User-1.html":{}}}],["protected",{"_index":1222,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["providedin",{"_index":1768,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["providers",{"_index":114,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["pull",{"_index":901,"title":{},"body":{"injectables/CommentService.html":{},"injectables/TeamsService.html":{}}}],["purpose",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["push",{"_index":2478,"title":{},"body":{"injectables/TeamsService.html":{}}}],["put",{"_index":87,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/TaskController.html":{},"controllers/UserController.html":{},"controllers/WorkspaceController.html":{}}}],["put(':commentid",{"_index":789,"title":{},"body":{"controllers/CommentController.html":{}}}],["put(':id",{"_index":79,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{}}}],["put(':id/members/:userid",{"_index":2761,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["put('subtasks/:id",{"_index":2343,"title":{},"body":{"controllers/TaskController.html":{}}}],["q",{"_index":931,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{}}}],["q.assigneeid",{"_index":963,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["q.priority",{"_index":965,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["q.q",{"_index":964,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["q.sort",{"_index":966,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["q.tab",{"_index":962,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["qa",{"_index":660,"title":{},"body":{"classes/Column.html":{},"classes/Column-2.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["query",{"_index":523,"title":{},"body":{"controllers/CalendarController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["query('cursor",{"_index":2052,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["query('limit",{"_index":2051,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["query('userid",{"_index":2043,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["query.from",{"_index":538,"title":{},"body":{"controllers/CalendarController.html":{}}}],["query.to",{"_index":539,"title":{},"body":{"controllers/CalendarController.html":{}}}],["query['createdat",{"_index":2102,"title":{},"body":{"injectables/NotificationService.html":{}}}],["questions",{"_index":3055,"title":{},"body":{"index.html":{}}}],["quicksuggestions",{"_index":2535,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["radius",{"_index":1320,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["range",{"_index":570,"title":{},"body":{"injectables/CalendarService.html":{}}}],["read",{"_index":2062,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"index.html":{}}}],["read')@httpcode(httpstatus.no_content",{"_index":2004,"title":{},"body":{"controllers/NotificationController.html":{}}}],["read.dto.ts",{"_index":1908,"title":{},"body":{"classes/MarkReadDto.html":{},"coverage.html":{}}}],["read.dto.ts:6",{"_index":1910,"title":{},"body":{"classes/MarkReadDto.html":{}}}],["readme",{"_index":2853,"title":{"index.html":{}},"body":{"injectables/ZipExportService.html":{}}}],["readonly",{"_index":96,"title":{},"body":{"controllers/ActivityController.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"controllers/WorkspaceController.html":{}}}],["ready",{"_index":3018,"title":{},"body":{"index.html":{}}}],["real",{"_index":758,"title":{},"body":{"injectables/ColumnService-1.html":{},"index.html":{}}}],["recipient",{"_index":1951,"title":{},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["record",{"_index":1087,"title":{},"body":{"injectables/CommitmentsService.html":{},"injectables/NotificationService.html":{}}}],["recurrence",{"_index":1563,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["recurrencerule",{"_index":1543,"title":{},"body":{"classes/CreateMeetingDto.html":{},"classes/MeetingResponseDto.html":{}}}],["recurring",{"_index":1565,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["recurs",{"_index":1556,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["red",{"_index":1832,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["ref",{"_index":596,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["reference",{"_index":897,"title":{},"body":{"injectables/CommentService.html":{},"classes/Task.html":{}}}],["references",{"_index":2665,"title":{},"body":{"classes/User-1.html":{}}}],["reflect",{"_index":2973,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":492,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1237,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["refreshpreview",{"_index":1444,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["regenerated",{"_index":1440,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["regex",{"_index":1093,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["register",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["register(@body",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["register(registerdto",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":291,"title":{"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"coverage.html":{}}}],["registered",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TemplateEditorService.html":{}}}],["registerhandlebarslanguage",{"_index":2496,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["registerhelpers",{"_index":1758,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["related",{"_index":39,"title":{},"body":{"classes/Activity.html":{}}}],["relation",{"_index":2755,"title":{},"body":{"classes/Workspace-1.html":{},"classes/WorkspaceTask.html":{}}}],["relations",{"_index":2633,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["relationship",{"_index":637,"title":{},"body":{"classes/CalendarUser.html":{},"classes/Column.html":{}}}],["relative",{"_index":1341,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["relativeurl",{"_index":1789,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["remove",{"_index":58,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"injectables/AuthService.html":{},"controllers/ColumnController-1.html":{},"injectables/CommentService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"injectables/TeamsService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WorkspaceController.html":{}}}],["remove(@param('id",{"_index":105,"title":{},"body":{"controllers/ActivityController.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"controllers/WorkspaceController.html":{}}}],["remove(id",{"_index":74,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WorkspaceController.html":{}}}],["removemember",{"_index":2442,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removemember(id",{"_index":2453,"title":{},"body":{"injectables/TeamsService.html":{}}}],["render.service",{"_index":1194,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{}}}],["render.service.ts",{"_index":1754,"title":{},"body":{"injectables/HbsRenderService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["render.service.ts:131",{"_index":1765,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:15",{"_index":1762,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:184",{"_index":1761,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:23",{"_index":1763,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["render.service.ts:9",{"_index":1760,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["rendered",{"_index":1820,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["rendertemplate",{"_index":1759,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["rendertemplate(templatecontent",{"_index":1764,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["repeat(auto",{"_index":1294,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["repository",{"_index":3003,"title":{},"body":{"index.html":{}}}],["req",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DashboardController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"guards/RolesGuard.html":{}}}],["req.user",{"_index":502,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["req.user.userid",{"_index":481,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["request",{"_index":192,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DashboardController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"guards/RolesGuard.html":{}}}],["request.headers['x",{"_index":201,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["required",{"_index":34,"title":{},"body":{"classes/Activity.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/Project.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["required.length",{"_index":500,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["required.some((role",{"_index":504,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["requiring",{"_index":3038,"title":{},"body":{"index.html":{}}}],["res",{"_index":1013,"title":{},"body":{"injectables/CommitmentsCron.html":{},"injectables/UsersService-1.html":{}}}],["res.archived",{"_index":1016,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["resendverification",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["resendverification(@body",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["resendverification(body",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["resendverificationdto",{"_index":295,"title":{"classes/ResendVerificationDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/ResendVerificationDto.html":{},"coverage.html":{}}}],["resendverificationuser",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["reset",{"_index":119,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"interfaces/CompoDocConfig.html":{},"modules/DashboardModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"interfaces/Session.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["resetpassword(dto",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(token",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":300,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resetting",{"_index":1449,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["resettodefault",{"_index":1447,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["resolve",{"_index":2465,"title":{},"body":{"injectables/TeamsService.html":{}}}],["resources",{"_index":3050,"title":{},"body":{"index.html":{}}}],["response",{"_index":1392,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.body",{"_index":1475,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.config",{"_index":1412,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.dto",{"_index":475,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["response.dto.ts",{"_index":1924,"title":{},"body":{"classes/MeetingResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":1931,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:3",{"_index":1928,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:4",{"_index":1932,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:5",{"_index":1927,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:6",{"_index":1926,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:7",{"_index":1930,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:8",{"_index":1925,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1929,"title":{},"body":{"classes/MeetingResponseDto.html":{}}}],["response.headers.get('content",{"_index":1481,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.sessionid",{"_index":1396,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.success",{"_index":1395,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["response.templates",{"_index":1403,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["responsetype",{"_index":1472,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["restore",{"_index":1993,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["restore(@param('id",{"_index":2076,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["restore(id",{"_index":2012,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["restored",{"_index":2077,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["restored.toobject",{"_index":2079,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["restrict",{"_index":887,"title":{},"body":{"injectables/CommentService.html":{}}}],["result",{"_index":158,"title":{},"body":{"injectables/ActivityService.html":{},"injectables/CalendarService.html":{},"injectables/HbsRenderService.html":{},"injectables/NotificationCleanup.html":{},"injectables/SubtaskService.html":{}}}],["result.deletedcount",{"_index":1982,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["results",{"_index":45,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":1788,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["return",{"_index":98,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{}}}],["returning",{"_index":2026,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["returns",{"_index":67,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TemplateEditorService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"injectables/ZipExportService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":673,"title":{},"body":{"classes/Column-1.html":{},"miscellaneous/enumerations.html":{}}}],["right",{"_index":1304,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["roboto",{"_index":1251,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["role",{"_index":165,"title":{},"body":{"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"interfaces/JwtPayload-1.html":{},"classes/Member-1.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/User.html":{}}}],["role.enum",{"_index":2624,"title":{},"body":{"classes/User.html":{}}}],["role.enum.ts",{"_index":2987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":491,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":972,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["roles.decorator",{"_index":495,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"guards/RolesGuard.html":{}}}],["roles.guard",{"_index":942,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["roles_key",{"_index":494,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":496,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["room",{"_index":829,"title":{},"body":{"classes/CommentGateway.html":{}}}],["roomid",{"_index":1043,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["root",{"_index":1200,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"injectables/ZipExportService.html":{}}}],["roundedselection",{"_index":2530,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["routes",{"_index":1220,"title":{"routes.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"controllers/TaskController.html":{},"interfaces/Template.html":{},"routes.html":{}}}],["rrule:freq=weekly;interval=1",{"_index":1562,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["rule",{"_index":1564,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["run",{"_index":1009,"title":{},"body":{"injectables/CommitmentsCron.html":{},"index.html":{}}}],["running",{"_index":2876,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["runs",{"_index":1974,"title":{},"body":{"injectables/NotificationCleanup.html":{},"index.html":{}}}],["runvalidators",{"_index":2283,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["rxjs",{"_index":190,"title":{},"body":{"guards/ApiKeyGuard.html":{},"dependencies.html":{}}}],["sample",{"_index":1836,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["samplecomponent",{"_index":1837,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["sans",{"_index":1252,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["save",{"_index":755,"title":{},"body":{"injectables/ColumnService-1.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["save_delay",{"_index":1370,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["saved",{"_index":1080,"title":{},"body":{"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/DashboardService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/UsersService.html":{}}}],["saved._id.tostring",{"_index":1704,"title":{},"body":{"injectables/DashboardService.html":{}}}],["saved.createdat",{"_index":1709,"title":{},"body":{"injectables/DashboardService.html":{}}}],["saved.datetime",{"_index":1707,"title":{},"body":{"injectables/DashboardService.html":{}}}],["saved.description",{"_index":1706,"title":{},"body":{"injectables/DashboardService.html":{}}}],["saved.link",{"_index":1708,"title":{},"body":{"injectables/DashboardService.html":{}}}],["saved.title",{"_index":1705,"title":{},"body":{"injectables/DashboardService.html":{}}}],["savedcolumn",{"_index":757,"title":{},"body":{"injectables/ColumnService-1.html":{}}}],["savedcomment",{"_index":878,"title":{},"body":{"injectables/CommentService.html":{}}}],["savetemplate(content",{"_index":1435,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["savetimeout",{"_index":1369,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["saving",{"_index":1203,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["scalable",{"_index":2999,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":1430,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["scheduleautosave(content",{"_index":1425,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["scheduled",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/CommitmentsModule.html":{}}}],["schedulemodule.forroot",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"modules/CommitmentsModule.html":{}}}],["schema",{"_index":26,"title":{},"body":{"classes/Activity.html":{},"modules/ActivityModule.html":{},"modules/AuthModule.html":{},"classes/CalendarModule.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"modules/ColumnModule.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"classes/Commitment.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"modules/NotificationModule.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"classes/Subtask.html":{},"modules/SubtaskModule.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"modules/TaskModule.html":{},"classes/Team.html":{},"modules/TeamsModule.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"modules/WorkspaceModule.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["schemafactory",{"_index":27,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["schemafactory.createforclass(activity",{"_index":44,"title":{},"body":{"classes/Activity.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(calendartask",{"_index":611,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(calendaruser",{"_index":641,"title":{},"body":{"classes/CalendarUser.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(calendarworkspace",{"_index":645,"title":{},"body":{"classes/CalendarWorkspace.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(column",{"_index":665,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(comment",{"_index":774,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(commitment",{"_index":928,"title":{},"body":{"classes/Commitment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(meeting",{"_index":1922,"title":{},"body":{"classes/Meeting.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(member",{"_index":1938,"title":{},"body":{"classes/Member.html":{},"classes/Member-1.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(notification",{"_index":1963,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(project",{"_index":2135,"title":{},"body":{"classes/Project.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(subtask",{"_index":2225,"title":{},"body":{"classes/Subtask.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(task",{"_index":2300,"title":{},"body":{"classes/Task.html":{},"classes/Task-1.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(team",{"_index":2403,"title":{},"body":{"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":2634,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(workspace",{"_index":2747,"title":{},"body":{"classes/Workspace.html":{},"classes/Workspace-1.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(workspacesubtask",{"_index":2826,"title":{},"body":{"classes/WorkspaceSubtask.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(workspacetask",{"_index":2837,"title":{},"body":{"classes/WorkspaceTask.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":1715,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["schemas/activity.schema",{"_index":124,"title":{},"body":{"modules/ActivityModule.html":{},"injectables/ActivityService.html":{}}}],["schemas/calendar",{"_index":546,"title":{},"body":{"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{}}}],["schemas/calendartask.schema",{"_index":561,"title":{},"body":{"injectables/CalendarService.html":{},"classes/TaskGateway.html":{}}}],["schemas/column.schema",{"_index":690,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["schemas/meeting.schema",{"_index":1665,"title":{},"body":{"modules/DashboardModule.html":{},"injectables/DashboardService.html":{}}}],["schemas/notification.schema",{"_index":1589,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/NotificationCleanup.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{}}}],["schemas/subtask.schema",{"_index":2255,"title":{},"body":{"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{}}}],["schemas/team.schema",{"_index":2423,"title":{},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{}}}],["schemas/workspace.schema",{"_index":1936,"title":{},"body":{"classes/Member.html":{}}}],["schemas/workspacetask.schema",{"_index":2790,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["scripts",{"_index":2871,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["scrollbar",{"_index":2531,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["scrollbeyondlastline",{"_index":2525,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["scrum",{"_index":2990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scrum_master",{"_index":973,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"miscellaneous/enumerations.html":{}}}],["scrum_master')@httpcode(httpstatus.no_content",{"_index":994,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["scss",{"_index":2554,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["search",{"_index":1090,"title":{},"body":{"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["secondary",{"_index":1353,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["secondary:hover",{"_index":1354,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["secret",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1873,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["segoe",{"_index":1249,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["select",{"_index":1404,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectedfile",{"_index":1367,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectedfile.path",{"_index":1233,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectedfile.type",{"_index":1234,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selectfile(template",{"_index":1421,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["selector",{"_index":1198,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["send",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["sending",{"_index":1901,"title":{},"body":{"injectables/MailService.html":{}}}],["sendverificationemail",{"_index":1895,"title":{},"body":{"injectables/MailService.html":{}}}],["sendverificationemail(to",{"_index":1896,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/MailService.html":{}}}],["serif",{"_index":1253,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["server",{"_index":700,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"interfaces/CompoDocConfig.html":{},"classes/EventsGateway.html":{},"interfaces/Session.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"interfaces/Template.html":{},"classes/WorkspaceGateway.html":{},"index.html":{}}}],["service",{"_index":946,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["session",{"_index":1196,"title":{"interfaces/Session.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"coverage.html":{}}}],["sessionid",{"_index":1197,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["sessionid.substring(0",{"_index":1201,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["set",{"_index":1415,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/NotificationService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["seteditorcontent",{"_index":2497,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["seteditorcontent(content",{"_index":2507,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["setmetadata(roles_key",{"_index":3137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setonchangecallback",{"_index":2498,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["setonchangecallback(callback",{"_index":2509,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["setup",{"_index":3004,"title":{},"body":{"index.html":{}}}],["setups",{"_index":2075,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["shape",{"_index":945,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["shapes",{"_index":2024,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["showconfigpanel",{"_index":1368,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["side",{"_index":1468,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"index.html":{}}}],["sidebar",{"_index":1301,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["signature",{"_index":1844,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["signoptions",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1792,"title":{},"body":{"injectables/HbsRenderService.html":{},"index.html":{}}}],["size",{"_index":1271,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["sm",{"_index":1360,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["socket",{"_index":1028,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["socket.io",{"_index":710,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":2074,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["solid",{"_index":1268,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["soon",{"_index":1586,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["sort",{"_index":578,"title":{},"body":{"injectables/CalendarService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"injectables/DashboardService.html":{},"injectables/NotificationService.html":{}}}],["sort.assigneeid",{"_index":1116,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["sort.duedate",{"_index":1115,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["sort.updatedat",{"_index":1117,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["sorting",{"_index":1113,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["sorttype",{"_index":933,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"modules/ActivityModule.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"classes/CalendarModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"modules/CalendarTaskModule.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"modules/CommitmentsModule.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"index.html":{}}}],["space",{"_index":1255,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["spacing",{"_index":1313,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["specific",{"_index":881,"title":{},"body":{"injectables/CommentService.html":{}}}],["specify",{"_index":2877,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["sponsors",{"_index":3086,"title":{},"body":{"index.html":{}}}],["src/.../activity.schema.ts",{"_index":3124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.ts",{"_index":3115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../auth.service.ts",{"_index":3112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../calendar",{"_index":3111,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../calendartask.schema.ts",{"_index":3125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../calendaruser.schema.ts",{"_index":3126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../calendarworkspace.schema.ts",{"_index":3127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../column.schema.ts",{"_index":2984,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../comment.schema.ts",{"_index":3128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../commitments.controller.ts",{"_index":3116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../commitments.schema.ts",{"_index":2985,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../meeting.schema.ts",{"_index":3113,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../member.schema.ts",{"_index":3131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notification.schema.ts",{"_index":3114,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../project.schema.ts",{"_index":3133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":3134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../subtask.schema.ts",{"_index":3117,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../task.schema.ts",{"_index":2982,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../team.schema.ts",{"_index":3135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":3119,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":3120,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../workspace.schema.ts",{"_index":3121,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../workspacesubtask.schema.ts",{"_index":3136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../workspacetask.schema.ts",{"_index":3122,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/activity/activity.controller.ts",{"_index":50,"title":{},"body":{"controllers/ActivityController.html":{},"coverage.html":{}}}],["src/activity/activity.controller.ts:12",{"_index":63,"title":{},"body":{"controllers/ActivityController.html":{}}}],["src/activity/activity.controller.ts:17",{"_index":69,"title":{},"body":{"controllers/ActivityController.html":{}}}],["src/activity/activity.controller.ts:22",{"_index":72,"title":{},"body":{"controllers/ActivityController.html":{}}}],["src/activity/activity.controller.ts:27",{"_index":80,"title":{},"body":{"controllers/ActivityController.html":{}}}],["src/activity/activity.controller.ts:32",{"_index":76,"title":{},"body":{"controllers/ActivityController.html":{}}}],["src/activity/activity.module.ts",{"_index":121,"title":{},"body":{"modules/ActivityModule.html":{}}}],["src/activity/activity.service.ts",{"_index":130,"title":{},"body":{"injectables/ActivityService.html":{},"coverage.html":{}}}],["src/activity/activity.service.ts:10",{"_index":134,"title":{},"body":{"injectables/ActivityService.html":{}}}],["src/activity/activity.service.ts:15",{"_index":136,"title":{},"body":{"injectables/ActivityService.html":{}}}],["src/activity/activity.service.ts:20",{"_index":138,"title":{},"body":{"injectables/ActivityService.html":{}}}],["src/activity/activity.service.ts:24",{"_index":139,"title":{},"body":{"injectables/ActivityService.html":{}}}],["src/activity/activity.service.ts:30",{"_index":141,"title":{},"body":{"injectables/ActivityService.html":{}}}],["src/activity/activity.service.ts:41",{"_index":140,"title":{},"body":{"injectables/ActivityService.html":{}}}],["src/activity/dto/create",{"_index":1502,"title":{},"body":{"classes/CreateActivityDto.html":{},"coverage.html":{}}}],["src/activity/dto/update",{"_index":2600,"title":{},"body":{"classes/UpdateActivityDto.html":{},"coverage.html":{}}}],["src/activity/schemas/activity.schema.ts",{"_index":6,"title":{},"body":{"classes/Activity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/activity/schemas/activity.schema.ts:11",{"_index":19,"title":{},"body":{"classes/Activity.html":{}}}],["src/activity/schemas/activity.schema.ts:14",{"_index":22,"title":{},"body":{"classes/Activity.html":{}}}],["src/activity/schemas/activity.schema.ts:17",{"_index":23,"title":{},"body":{"classes/Activity.html":{}}}],["src/activity/schemas/activity.schema.ts:8",{"_index":20,"title":{},"body":{"classes/Activity.html":{}}}],["src/app.controller.ts",{"_index":208,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":210,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":264,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":265,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app/sample/sample.component.ts",{"_index":1839,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["src/auth/auth.controller.ts",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:91",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:98",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.service.ts:104",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:71",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/forgot",{"_index":1746,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2189,"title":{},"body":{"classes/RegisterDto-1.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:11",{"_index":2192,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["src/auth/dto/register.dto.ts:18",{"_index":2191,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["src/auth/dto/register.dto.ts:31",{"_index":2200,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["src/auth/dto/resend",{"_index":2203,"title":{},"body":{"classes/ResendVerificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/reset",{"_index":2206,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1880,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":1852,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1855,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":1883,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:26",{"_index":1884,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":1885,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:14",{"_index":1889,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":1887,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/mail/mail.service.ts",{"_index":1894,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/auth/mail/mail.service.ts:6",{"_index":1897,"title":{},"body":{"injectables/MailService.html":{}}}],["src/calendar/calendar.controller.ts",{"_index":507,"title":{},"body":{"controllers/CalendarController.html":{},"coverage.html":{}}}],["src/calendar/calendar.controller.ts:15",{"_index":522,"title":{},"body":{"controllers/CalendarController.html":{}}}],["src/calendar/calendar.controller.ts:20",{"_index":516,"title":{},"body":{"controllers/CalendarController.html":{}}}],["src/calendar/calendar.controller.ts:31",{"_index":527,"title":{},"body":{"controllers/CalendarController.html":{}}}],["src/calendar/calendar.controller.ts:43",{"_index":519,"title":{},"body":{"controllers/CalendarController.html":{}}}],["src/calendar/calendar.gateway.ts",{"_index":2354,"title":{},"body":{"classes/TaskGateway.html":{},"coverage.html":{}}}],["src/calendar/calendar.gateway.ts:10",{"_index":2361,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/calendar/calendar.gateway.ts:14",{"_index":2359,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/calendar/calendar.gateway.ts:8",{"_index":2357,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/calendar/calendar.module.ts",{"_index":543,"title":{},"body":{"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"coverage.html":{}}}],["src/calendar/calendar.service.ts",{"_index":551,"title":{},"body":{"injectables/CalendarService.html":{},"coverage.html":{}}}],["src/calendar/calendar.service.ts:10",{"_index":554,"title":{},"body":{"injectables/CalendarService.html":{}}}],["src/calendar/calendar.service.ts:16",{"_index":559,"title":{},"body":{"injectables/CalendarService.html":{}}}],["src/calendar/calendar.service.ts:36",{"_index":556,"title":{},"body":{"injectables/CalendarService.html":{}}}],["src/calendar/calendar.service.ts:51",{"_index":560,"title":{},"body":{"injectables/CalendarService.html":{}}}],["src/calendar/calendar.service.ts:66",{"_index":557,"title":{},"body":{"injectables/CalendarService.html":{}}}],["src/calendar/dto/create",{"_index":1597,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/calendar/dto/update",{"_index":2612,"title":{},"body":{"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["src/calendar/schemas/calendar",{"_index":612,"title":{},"body":{"classes/CalendarTask-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/columns/column.controller.ts",{"_index":695,"title":{},"body":{"controllers/ColumnController-1.html":{},"coverage.html":{}}}],["src/columns/column.controller.ts:11",{"_index":696,"title":{},"body":{"controllers/ColumnController-1.html":{}}}],["src/columns/column.gateway.ts",{"_index":713,"title":{},"body":{"classes/ColumnGateway-1.html":{},"coverage.html":{}}}],["src/columns/column.gateway.ts:7",{"_index":714,"title":{},"body":{"classes/ColumnGateway-1.html":{}}}],["src/columns/column.gateway.ts:9",{"_index":715,"title":{},"body":{"classes/ColumnGateway-1.html":{}}}],["src/columns/column.service.ts",{"_index":750,"title":{},"body":{"injectables/ColumnService-1.html":{},"coverage.html":{}}}],["src/columns/column.service.ts:10",{"_index":751,"title":{},"body":{"injectables/ColumnService-1.html":{}}}],["src/columns/column.service.ts:21",{"_index":752,"title":{},"body":{"injectables/ColumnService-1.html":{}}}],["src/columns/schemas/column.schema.ts",{"_index":675,"title":{},"body":{"classes/Column-2.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/columns/schemas/column.schema.ts:22",{"_index":676,"title":{},"body":{"classes/Column-2.html":{}}}],["src/columns/schemas/column.schema.ts:25",{"_index":677,"title":{},"body":{"classes/Column-2.html":{}}}],["src/columns/schemas/column.schema.ts:28",{"_index":679,"title":{},"body":{"classes/Column-2.html":{}}}],["src/columns/schemas/column.schema.ts:31",{"_index":678,"title":{},"body":{"classes/Column-2.html":{}}}],["src/comments/comment.controller.ts",{"_index":776,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/comments/comment.controller.ts:10",{"_index":783,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comment.controller.ts:18",{"_index":790,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comment.controller.ts:28",{"_index":787,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comment.controller.ts:36",{"_index":792,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comment.gateway.ts",{"_index":807,"title":{},"body":{"classes/CommentGateway.html":{},"coverage.html":{}}}],["src/comments/comment.gateway.ts:18",{"_index":812,"title":{},"body":{"classes/CommentGateway.html":{}}}],["src/comments/comment.gateway.ts:24",{"_index":815,"title":{},"body":{"classes/CommentGateway.html":{}}}],["src/comments/comment.gateway.ts:40",{"_index":821,"title":{},"body":{"classes/CommentGateway.html":{}}}],["src/comments/comment.gateway.ts:62",{"_index":818,"title":{},"body":{"classes/CommentGateway.html":{}}}],["src/comments/comment.module.ts",{"_index":847,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/comments/comment.schema",{"_index":610,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarUser.html":{}}}],["src/comments/comment.schema.ts",{"_index":760,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/comments/comment.schema.ts:11",{"_index":769,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.schema.ts:14",{"_index":767,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.schema.ts:17",{"_index":766,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.schema.ts:20",{"_index":768,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.schema.ts:8",{"_index":765,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.service.ts",{"_index":853,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/comments/comment.service.ts:16",{"_index":860,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comment.service.ts:22",{"_index":857,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comment.service.ts:50",{"_index":867,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comment.service.ts:55",{"_index":866,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comment.service.ts:77",{"_index":863,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comment.service.ts:9",{"_index":855,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/dto/create",{"_index":1514,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/update",{"_index":2605,"title":{},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["src/commitment/commitments.controller.ts",{"_index":930,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/commitment/commitments.controller.ts:38",{"_index":988,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.controller.ts:43",{"_index":990,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.controller.ts:48",{"_index":996,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.controller.ts:56",{"_index":992,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.controller.ts:69",{"_index":984,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.controller.ts:77",{"_index":995,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.controller.ts:82",{"_index":986,"title":{},"body":{"controllers/CommitmentsController.html":{}}}],["src/commitment/commitments.cron.ts",{"_index":998,"title":{},"body":{"injectables/CommitmentsCron.html":{},"coverage.html":{}}}],["src/commitment/commitments.cron.ts:14",{"_index":1004,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["src/commitment/commitments.cron.ts:8",{"_index":1002,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["src/commitment/commitments.gateway.ts",{"_index":1020,"title":{},"body":{"classes/CommitmentsGateway.html":{},"coverage.html":{}}}],["src/commitment/commitments.gateway.ts:14",{"_index":1024,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["src/commitment/commitments.gateway.ts:17",{"_index":1029,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["src/commitment/commitments.gateway.ts:21",{"_index":1032,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["src/commitment/commitments.gateway.ts:26",{"_index":1035,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["src/commitment/commitments.gateway.ts:31",{"_index":1026,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["src/commitment/commitments.module.ts",{"_index":1050,"title":{},"body":{"modules/CommitmentsModule.html":{}}}],["src/commitment/commitments.schema.ts",{"_index":905,"title":{},"body":{"classes/Commitment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/commitment/commitments.schema.ts:14",{"_index":923,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:17",{"_index":913,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:20",{"_index":912,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:23",{"_index":914,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:26",{"_index":911,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:29",{"_index":915,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:32",{"_index":920,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:35",{"_index":922,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.schema.ts:38",{"_index":910,"title":{},"body":{"classes/Commitment.html":{}}}],["src/commitment/commitments.service.ts",{"_index":1056,"title":{},"body":{"injectables/CommitmentsService.html":{},"coverage.html":{}}}],["src/commitment/commitments.service.ts:11",{"_index":1060,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:113",{"_index":1069,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:126",{"_index":1062,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:138",{"_index":1070,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:146",{"_index":1063,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:19",{"_index":1064,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:38",{"_index":1065,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:45",{"_index":1067,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/commitments.service.ts:94",{"_index":1071,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["src/commitment/dto/create",{"_index":1519,"title":{},"body":{"classes/CreateCommitmentDto.html":{},"coverage.html":{}}}],["src/commitment/dto/update",{"_index":2606,"title":{},"body":{"classes/UpdateCommitmentDto.html":{},"coverage.html":{}}}],["src/commitment/roles.decorator.ts",{"_index":2920,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commitment/roles.guard.ts",{"_index":490,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/commitment/roles.guard.ts:13",{"_index":2215,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/commitment/roles.guard.ts:16",{"_index":2216,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/api",{"_index":178,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["src/dashboard/dashboard.controller.ts",{"_index":464,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{},"coverage.html":{}}}],["src/dashboard/dashboard.controller.ts:30",{"_index":1645,"title":{},"body":{"controllers/DashboardController.html":{}}}],["src/dashboard/dashboard.controller.ts:36",{"_index":1643,"title":{},"body":{"controllers/DashboardController.html":{}}}],["src/dashboard/dashboard.controller.ts:41",{"_index":1642,"title":{},"body":{"controllers/DashboardController.html":{}}}],["src/dashboard/dashboard.module.ts",{"_index":1662,"title":{},"body":{"modules/DashboardModule.html":{}}}],["src/dashboard/dashboard.service.ts",{"_index":1667,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["src/dashboard/dashboard.service.ts:14",{"_index":1675,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/dashboard/dashboard.service.ts:23",{"_index":1678,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/dashboard/dashboard.service.ts:42",{"_index":1680,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/dashboard/dashboard.service.ts:60",{"_index":1676,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/dashboard/dto/create",{"_index":1539,"title":{},"body":{"classes/CreateMeetingDto.html":{},"coverage.html":{}}}],["src/dashboard/dto/dashboard",{"_index":1647,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"coverage.html":{}}}],["src/dashboard/dto/meeting",{"_index":1923,"title":{},"body":{"classes/MeetingResponseDto.html":{},"coverage.html":{}}}],["src/dashboard/schemas/meeting.schema.ts",{"_index":1911,"title":{},"body":{"classes/Meeting.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:10",{"_index":1918,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:13",{"_index":1915,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:16",{"_index":1914,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:19",{"_index":1917,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:22",{"_index":1916,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:24",{"_index":1913,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:25",{"_index":1919,"title":{},"body":{"classes/Meeting.html":{}}}],["src/dashboard/schemas/meeting.schema.ts:7",{"_index":1912,"title":{},"body":{"classes/Meeting.html":{}}}],["src/database.module.ts",{"_index":1710,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/events/events.gateway.ts",{"_index":1720,"title":{},"body":{"classes/EventsGateway.html":{},"coverage.html":{}}}],["src/events/events.gateway.ts:10",{"_index":1732,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:14",{"_index":1728,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:18",{"_index":1730,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:22",{"_index":1734,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:28",{"_index":1737,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:8",{"_index":1726,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/main.ts",{"_index":2921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notifications/dto/create",{"_index":1578,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notifications/dto/mark",{"_index":1907,"title":{},"body":{"classes/MarkReadDto.html":{},"coverage.html":{}}}],["src/notifications/notification.cleanup.ts",{"_index":1965,"title":{},"body":{"injectables/NotificationCleanup.html":{},"coverage.html":{}}}],["src/notifications/notification.cleanup.ts:10",{"_index":1968,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["src/notifications/notification.cleanup.ts:19",{"_index":1971,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["src/notifications/notification.controller.ts",{"_index":1987,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"coverage.html":{}}}],["src/notifications/notification.controller.ts:104",{"_index":1997,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:112",{"_index":2014,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:43",{"_index":1995,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:57",{"_index":2001,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:75",{"_index":2018,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:83",{"_index":2005,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:90",{"_index":2008,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.controller.ts:97",{"_index":2011,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notifications/notification.module.ts",{"_index":2083,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/notifications/notification.service.ts",{"_index":2088,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notifications/notification.service.ts:104",{"_index":2098,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:12",{"_index":2089,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:21",{"_index":2091,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:30",{"_index":2093,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:65",{"_index":2099,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:73",{"_index":2095,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:81",{"_index":2096,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:90",{"_index":2097,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/notification.service.ts:99",{"_index":2092,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notifications/schemas/notification.schema.ts",{"_index":1948,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/notifications/schemas/notification.schema.ts:13",{"_index":1954,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:16",{"_index":1958,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:19",{"_index":1959,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:22",{"_index":1957,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:25",{"_index":1956,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:28",{"_index":1955,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:31",{"_index":1952,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/schemas/notification.schema.ts:34",{"_index":1953,"title":{},"body":{"classes/Notification.html":{}}}],["src/project/project.controller.ts",{"_index":2137,"title":{},"body":{"controllers/ProjectController.html":{},"coverage.html":{}}}],["src/project/project.controller.ts:11",{"_index":2140,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:16",{"_index":2141,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:21",{"_index":2144,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:26",{"_index":2146,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:31",{"_index":2145,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.module.ts",{"_index":2161,"title":{},"body":{"modules/ProjectModule.html":{}}}],["src/project/project.schema.ts",{"_index":2128,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/project/project.schema.ts:11",{"_index":2131,"title":{},"body":{"classes/Project.html":{}}}],["src/project/project.schema.ts:14",{"_index":2133,"title":{},"body":{"classes/Project.html":{}}}],["src/project/project.schema.ts:17",{"_index":2130,"title":{},"body":{"classes/Project.html":{}}}],["src/project/project.schema.ts:8",{"_index":2132,"title":{},"body":{"classes/Project.html":{}}}],["src/project/project.service.ts",{"_index":2164,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{}}}],["src/project/project.service.ts:11",{"_index":2168,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:16",{"_index":2171,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:20",{"_index":2172,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:24",{"_index":2173,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:28",{"_index":2170,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:8",{"_index":2166,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/schemas/calendartask.schema.ts",{"_index":591,"title":{},"body":{"classes/CalendarTask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/calendartask.schema.ts:12",{"_index":601,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:15",{"_index":603,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:18",{"_index":602,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:21",{"_index":605,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:24",{"_index":608,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:27",{"_index":598,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:30",{"_index":600,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendartask.schema.ts:9",{"_index":606,"title":{},"body":{"classes/CalendarTask.html":{}}}],["src/schemas/calendaruser.schema.ts",{"_index":626,"title":{},"body":{"classes/CalendarUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/calendaruser.schema.ts:12",{"_index":635,"title":{},"body":{"classes/CalendarUser.html":{}}}],["src/schemas/calendaruser.schema.ts:15",{"_index":634,"title":{},"body":{"classes/CalendarUser.html":{}}}],["src/schemas/calendaruser.schema.ts:18",{"_index":633,"title":{},"body":{"classes/CalendarUser.html":{}}}],["src/schemas/calendaruser.schema.ts:22",{"_index":629,"title":{},"body":{"classes/CalendarUser.html":{}}}],["src/schemas/calendaruser.schema.ts:26",{"_index":630,"title":{},"body":{"classes/CalendarUser.html":{}}}],["src/schemas/calendaruser.schema.ts:9",{"_index":632,"title":{},"body":{"classes/CalendarUser.html":{}}}],["src/schemas/calendarworkspace.schema.ts",{"_index":642,"title":{},"body":{"classes/CalendarWorkspace.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/calendarworkspace.schema.ts:8",{"_index":643,"title":{},"body":{"classes/CalendarWorkspace.html":{}}}],["src/subtask/dto/create",{"_index":1591,"title":{},"body":{"classes/CreateSubtaskDto.html":{},"coverage.html":{}}}],["src/subtask/dto/update",{"_index":2611,"title":{},"body":{"classes/UpdateSubtaskDto.html":{},"coverage.html":{}}}],["src/subtask/schemas/subtask.schema.ts",{"_index":2218,"title":{},"body":{"classes/Subtask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/subtask/schemas/subtask.schema.ts:12",{"_index":2219,"title":{},"body":{"classes/Subtask.html":{}}}],["src/subtask/schemas/subtask.schema.ts:15",{"_index":2222,"title":{},"body":{"classes/Subtask.html":{}}}],["src/subtask/schemas/subtask.schema.ts:18",{"_index":2220,"title":{},"body":{"classes/Subtask.html":{}}}],["src/subtask/schemas/subtask.schema.ts:21",{"_index":2221,"title":{},"body":{"classes/Subtask.html":{}}}],["src/subtask/subtask.controller.ts",{"_index":2227,"title":{},"body":{"controllers/SubtaskController.html":{},"coverage.html":{}}}],["src/subtask/subtask.controller.ts:13",{"_index":2229,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["src/subtask/subtask.controller.ts:18",{"_index":2230,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["src/subtask/subtask.controller.ts:23",{"_index":2231,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["src/subtask/subtask.controller.ts:28",{"_index":2234,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["src/subtask/subtask.controller.ts:33",{"_index":2232,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["src/subtask/subtask.gateway.ts",{"_index":2246,"title":{},"body":{"classes/SubtaskGateway.html":{},"coverage.html":{}}}],["src/subtask/subtask.gateway.ts:7",{"_index":2248,"title":{},"body":{"classes/SubtaskGateway.html":{}}}],["src/subtask/subtask.gateway.ts:9",{"_index":2250,"title":{},"body":{"classes/SubtaskGateway.html":{}}}],["src/subtask/subtask.module.ts",{"_index":2254,"title":{},"body":{"modules/SubtaskModule.html":{}}}],["src/subtask/subtask.service.ts",{"_index":2259,"title":{},"body":{"injectables/SubtaskService.html":{},"coverage.html":{}}}],["src/subtask/subtask.service.ts:12",{"_index":2262,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtask/subtask.service.ts:19",{"_index":2263,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtask/subtask.service.ts:27",{"_index":2264,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtask/subtask.service.ts:31",{"_index":2267,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtask/subtask.service.ts:40",{"_index":2269,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtask/subtask.service.ts:49",{"_index":2268,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtask/subtask.service.ts:56",{"_index":2266,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["src/subtasks/subtask.controller.ts",{"_index":2235,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["src/tasks/schemas/task.schema.ts",{"_index":2301,"title":{},"body":{"classes/Task-1.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/schemas/task.schema.ts:33",{"_index":2316,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:36",{"_index":2309,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:39",{"_index":2304,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:42",{"_index":2310,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:45",{"_index":2314,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:48",{"_index":2312,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:51",{"_index":2311,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:54",{"_index":2306,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:57",{"_index":2307,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:60",{"_index":2305,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:63",{"_index":2315,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/schemas/task.schema.ts:66",{"_index":2308,"title":{},"body":{"classes/Task-1.html":{}}}],["src/tasks/task.controller.ts",{"_index":2328,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/tasks/task.controller.ts:19",{"_index":2335,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.controller.ts:27",{"_index":2341,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.controller.ts:32",{"_index":2344,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.controller.ts:40",{"_index":2338,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.gateway.ts",{"_index":2364,"title":{},"body":{"classes/TaskGateway-1.html":{},"coverage.html":{}}}],["src/tasks/task.gateway.ts:10",{"_index":2365,"title":{},"body":{"classes/TaskGateway-1.html":{}}}],["src/tasks/task.gateway.ts:12",{"_index":2367,"title":{},"body":{"classes/TaskGateway-1.html":{}}}],["src/tasks/task.module.ts",{"_index":2372,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/tasks/task.schema.ts",{"_index":2290,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/task.schema.ts:11",{"_index":2294,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.schema.ts:15",{"_index":2293,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.schema.ts:18",{"_index":2299,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.schema.ts:21",{"_index":2295,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.schema.ts:24",{"_index":2292,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.schema.ts:27",{"_index":2297,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.schema.ts:8",{"_index":2298,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.service.ts",{"_index":2374,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/tasks/task.service.ts:11",{"_index":2381,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:16",{"_index":2383,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:20",{"_index":2385,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:24",{"_index":2387,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:28",{"_index":2382,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:32",{"_index":2380,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:8",{"_index":2378,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/teammember/entities/member.schema.ts",{"_index":1939,"title":{},"body":{"classes/Member-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/teammember/entities/member.schema.ts:11",{"_index":1941,"title":{},"body":{"classes/Member-1.html":{}}}],["src/teammember/entities/member.schema.ts:14",{"_index":1942,"title":{},"body":{"classes/Member-1.html":{}}}],["src/teammember/entities/member.schema.ts:17",{"_index":1943,"title":{},"body":{"classes/Member-1.html":{}}}],["src/teammember/entities/member.schema.ts:8",{"_index":1940,"title":{},"body":{"classes/Member-1.html":{}}}],["src/teams/schemas/team.schema.ts",{"_index":2395,"title":{},"body":{"classes/Team.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/teams/schemas/team.schema.ts:12",{"_index":2397,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schemas/team.schema.ts:15",{"_index":2398,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schemas/team.schema.ts:9",{"_index":2399,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/teams.controller.ts",{"_index":2405,"title":{},"body":{"controllers/TeamsController.html":{},"coverage.html":{}}}],["src/teams/teams.controller.ts:12",{"_index":2414,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:17",{"_index":2415,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:22",{"_index":2412,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:31",{"_index":2420,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:39",{"_index":2418,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.module.ts",{"_index":2434,"title":{},"body":{"modules/TeamsModule.html":{}}}],["src/teams/teams.service.ts",{"_index":2438,"title":{},"body":{"injectables/TeamsService.html":{},"coverage.html":{}}}],["src/teams/teams.service.ts:16",{"_index":2451,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:22",{"_index":2452,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:27",{"_index":2449,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:50",{"_index":2456,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:62",{"_index":2455,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:74",{"_index":2454,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:9",{"_index":2445,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/users/dto/create",{"_index":1623,"title":{},"body":{"classes/CreateUserDto-1.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2614,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/user.controller.ts",{"_index":2671,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:12",{"_index":2673,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:17",{"_index":2674,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:22",{"_index":2675,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:27",{"_index":2677,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:32",{"_index":2676,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.schema.ts",{"_index":2635,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/user.schema.ts:12",{"_index":2639,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:15",{"_index":2644,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:18",{"_index":2642,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:21",{"_index":2640,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:24",{"_index":2641,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:27",{"_index":2647,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:32",{"_index":2638,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:33",{"_index":2646,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:37",{"_index":2643,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:40",{"_index":2637,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.schema.ts:43",{"_index":2645,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.service.ts",{"_index":2722,"title":{},"body":{"injectables/UsersService-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/user.service.ts:11",{"_index":2726,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:15",{"_index":2728,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:21",{"_index":2730,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:26",{"_index":2734,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:31",{"_index":2732,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:36",{"_index":2735,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:43",{"_index":2729,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/user.service.ts:50",{"_index":2727,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["src/users/users.module.ts",{"_index":2689,"title":{},"body":{"modules/UserModule.html":{}}}],["src/workspace/dto/add",{"_index":161,"title":{},"body":{"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"coverage.html":{}}}],["src/workspace/dto/create",{"_index":1628,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"coverage.html":{}}}],["src/workspace/member.schema.ts",{"_index":1933,"title":{},"body":{"classes/Member.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/workspace/member.schema.ts:12",{"_index":1935,"title":{},"body":{"classes/Member.html":{}}}],["src/workspace/member.schema.ts:9",{"_index":1934,"title":{},"body":{"classes/Member.html":{}}}],["src/workspace/schemas/workspace.schema.ts",{"_index":2748,"title":{},"body":{"classes/Workspace-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/workspace/schemas/workspace.schema.ts:11",{"_index":2752,"title":{},"body":{"classes/Workspace-1.html":{}}}],["src/workspace/schemas/workspace.schema.ts:15",{"_index":2751,"title":{},"body":{"classes/Workspace-1.html":{}}}],["src/workspace/schemas/workspace.schema.ts:19",{"_index":2753,"title":{},"body":{"classes/Workspace-1.html":{}}}],["src/workspace/schemas/workspace.schema.ts:23",{"_index":2749,"title":{},"body":{"classes/Workspace-1.html":{}}}],["src/workspace/schemas/workspace.schema.ts:26",{"_index":2750,"title":{},"body":{"classes/Workspace-1.html":{}}}],["src/workspace/schemas/workspacesubtask.schema",{"_index":724,"title":{},"body":{"modules/ColumnModule.html":{}}}],["src/workspace/schemas/workspacesubtask.schema.ts",{"_index":2822,"title":{},"body":{"classes/WorkspaceSubtask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/workspace/schemas/workspacesubtask.schema.ts:12",{"_index":2823,"title":{},"body":{"classes/WorkspaceSubtask.html":{}}}],["src/workspace/schemas/workspacesubtask.schema.ts:15",{"_index":2824,"title":{},"body":{"classes/WorkspaceSubtask.html":{}}}],["src/workspace/schemas/workspacesubtask.schema.ts:9",{"_index":2825,"title":{},"body":{"classes/WorkspaceSubtask.html":{}}}],["src/workspace/schemas/workspacetask.schema.ts",{"_index":2827,"title":{},"body":{"classes/WorkspaceTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/workspace/schemas/workspacetask.schema.ts:10",{"_index":2831,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["src/workspace/schemas/workspacetask.schema.ts:13",{"_index":2828,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["src/workspace/schemas/workspacetask.schema.ts:20",{"_index":2829,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["src/workspace/schemas/workspacetask.schema.ts:24",{"_index":2832,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["src/workspace/schemas/workspacetask.schema.ts:28",{"_index":2830,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["src/workspace/workspace.controller.ts",{"_index":2758,"title":{},"body":{"controllers/WorkspaceController.html":{},"coverage.html":{}}}],["src/workspace/workspace.controller.ts:11",{"_index":2763,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:16",{"_index":2764,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:21",{"_index":2765,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:26",{"_index":2762,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.controller.ts:31",{"_index":2766,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["src/workspace/workspace.gateway.ts",{"_index":2777,"title":{},"body":{"classes/WorkspaceGateway.html":{},"coverage.html":{}}}],["src/workspace/workspace.gateway.ts:10",{"_index":2781,"title":{},"body":{"classes/WorkspaceGateway.html":{}}}],["src/workspace/workspace.gateway.ts:8",{"_index":2779,"title":{},"body":{"classes/WorkspaceGateway.html":{}}}],["src/workspace/workspace.module.ts",{"_index":2785,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["src/workspace/workspace.schema.ts",{"_index":2743,"title":{},"body":{"classes/Workspace.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/workspace/workspace.schema.ts:11",{"_index":2746,"title":{},"body":{"classes/Workspace.html":{}}}],["src/workspace/workspace.schema.ts:14",{"_index":2744,"title":{},"body":{"classes/Workspace.html":{}}}],["src/workspace/workspace.schema.ts:8",{"_index":2745,"title":{},"body":{"classes/Workspace.html":{}}}],["src/workspace/workspace.service.ts",{"_index":2792,"title":{},"body":{"injectables/WorkspaceService.html":{},"coverage.html":{}}}],["src/workspace/workspace.service.ts:12",{"_index":2800,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:30",{"_index":2802,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:34",{"_index":2803,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:38",{"_index":2797,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:46",{"_index":2801,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:50",{"_index":2798,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:54",{"_index":2799,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["src/workspace/workspace.service.ts:9",{"_index":2796,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["standard",{"_index":2663,"title":{},"body":{"classes/User-1.html":{}}}],["standup",{"_index":1569,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["start",{"_index":1104,"title":{},"body":{"injectables/CommitmentsService.html":{},"index.html":{}}}],["start.sethours(0",{"_index":1106,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["start:dev",{"_index":3008,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":3010,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":573,"title":{},"body":{"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["started",{"_index":925,"title":{},"body":{"classes/Commitment.html":{},"miscellaneous/enumerations.html":{}}}],["starter",{"_index":3002,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1363,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["status",{"_index":580,"title":{},"body":{"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/Notification.html":{},"interfaces/Session.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"injectables/TaskService.html":{},"interfaces/Template.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateTaskDto.html":{},"classes/WorkspaceTask.html":{},"miscellaneous/typealiases.html":{}}}],["stay",{"_index":3072,"title":{},"body":{"index.html":{}}}],["steps",{"_index":3022,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":3036,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1858,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategyoptions",{"_index":1859,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":14,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"miscellaneous/variables.html":{}}}],["string(user._id",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["string(user.password",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["strings",{"_index":1638,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"injectables/TemplateEditorService.html":{}}}],["strong",{"_index":1621,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["strong)'})@isstring()@minlength(8",{"_index":2187,"title":{},"body":{"classes/RegisterDto.html":{}}}],["strongly",{"_index":195,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["strongpass123",{"_index":1618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResetPasswordDto.html":{}}}],["strongpass123!'})@isstring()@minlength(8",{"_index":2207,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["structure",{"_index":1823,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/ZipExportService.html":{}}}],["style",{"_index":1229,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["styles",{"_index":1238,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["stylesheets",{"_index":2868,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["sub",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["subscribemessage",{"_index":822,"title":{},"body":{"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{}}}],["subscribemessage('addcomment",{"_index":814,"title":{},"body":{"classes/CommentGateway.html":{}}}],["subscribemessage('deletecomment",{"_index":817,"title":{},"body":{"classes/CommentGateway.html":{}}}],["subscribemessage('editcomment",{"_index":820,"title":{},"body":{"classes/CommentGateway.html":{}}}],["subscribemessage('joinroom",{"_index":1034,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["subscribemessage('ping",{"_index":1736,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subtask",{"_index":2217,"title":{"classes/Subtask.html":{}},"body":{"classes/Subtask.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task-1.html":{},"coverage.html":{}}}],["subtask.controller",{"_index":2256,"title":{},"body":{"modules/SubtaskModule.html":{}}}],["subtask.dto",{"_index":2238,"title":{},"body":{"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{}}}],["subtask.dto.ts",{"_index":1592,"title":{},"body":{"classes/CreateSubtaskDto.html":{},"classes/UpdateSubtaskDto.html":{},"coverage.html":{}}}],["subtask.dto.ts:3",{"_index":1596,"title":{},"body":{"classes/CreateSubtaskDto.html":{},"classes/UpdateSubtaskDto.html":{}}}],["subtask.dto.ts:4",{"_index":1594,"title":{},"body":{"classes/CreateSubtaskDto.html":{},"classes/UpdateSubtaskDto.html":{}}}],["subtask.dto.ts:5",{"_index":1595,"title":{},"body":{"classes/CreateSubtaskDto.html":{}}}],["subtask.gateway",{"_index":2257,"title":{},"body":{"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{}}}],["subtask.name",{"_index":2258,"title":{},"body":{"modules/SubtaskModule.html":{}}}],["subtask.save",{"_index":2275,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["subtask.service",{"_index":2237,"title":{},"body":{"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{}}}],["subtask/dto/create",{"_index":2346,"title":{},"body":{"controllers/TaskController.html":{}}}],["subtask/dto/update",{"_index":2347,"title":{},"body":{"controllers/TaskController.html":{}}}],["subtask/schemas/subtask.schema",{"_index":2317,"title":{},"body":{"classes/Task-1.html":{}}}],["subtask/subtask.module",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["subtask/subtask.service",{"_index":2348,"title":{},"body":{"controllers/TaskController.html":{}}}],["subtaskcontroller",{"_index":2226,"title":{"controllers/SubtaskController.html":{}},"body":{"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"coverage.html":{}}}],["subtaskdocument",{"_index":2223,"title":{},"body":{"classes/Subtask.html":{},"injectables/SubtaskService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subtaskgateway",{"_index":2245,"title":{"classes/SubtaskGateway.html":{}},"body":{"classes/SubtaskGateway.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"coverage.html":{}}}],["subtaskmodel",{"_index":2261,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["subtaskmodule",{"_index":224,"title":{"modules/SubtaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["subtasks",{"_index":2228,"title":{},"body":{"controllers/SubtaskController.html":{},"classes/Task-1.html":{},"classes/WorkspaceTask.html":{}}}],["subtaskschema",{"_index":2224,"title":{},"body":{"classes/Subtask.html":{},"modules/SubtaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subtaskservice",{"_index":2236,"title":{"injectables/SubtaskService.html":{}},"body":{"controllers/SubtaskController.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"coverage.html":{},"overview.html":{}}}],["success",{"_index":1138,"title":{},"body":{"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{}}}],["success:hover",{"_index":1357,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["successful",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["suggestontriggercharacters",{"_index":2540,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["summary",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["super",{"_index":1868,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":3056,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":1451,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["surroundingpairs",{"_index":2582,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["svc",{"_index":953,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{}}}],["svg",{"_index":3100,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2978,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":1779,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["symbol",{"_index":2202,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["symbol'})@isstrongpassword({minlength",{"_index":2195,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["sync",{"_index":1552,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["syntax",{"_index":1834,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/ZipExportService.html":{}}}],["system",{"_index":1247,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["t._id",{"_index":2117,"title":{},"body":{"injectables/NotificationService.html":{}}}],["t.id",{"_index":1812,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["t\\r\\n",{"_index":2570,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tab",{"_index":932,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["tabcompletion",{"_index":2542,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["tabid",{"_index":1810,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["table",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["tabs",{"_index":1099,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["tabtype",{"_index":934,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tag",{"_index":2569,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["take",{"_index":3023,"title":{},"body":{"index.html":{}}}],["task",{"_index":579,"title":{"classes/Task.html":{},"classes/Task-1.html":{}},"body":{"injectables/CalendarService.html":{},"classes/Column.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/CommentGateway.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/Subtask.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/WorkspaceModule.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["task.comments",{"_index":898,"title":{},"body":{"injectables/CommentService.html":{}}}],["task.comments.push(savedcomment._id",{"_index":880,"title":{},"body":{"injectables/CommentService.html":{}}}],["task.controller",{"_index":2373,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.dto",{"_index":531,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["task.dto.ts",{"_index":1598,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:3",{"_index":1603,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:4",{"_index":1599,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:5",{"_index":1600,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:6",{"_index":1602,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:7",{"_index":1601,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:8",{"_index":1604,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.name",{"_index":852,"title":{},"body":{"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/WorkspaceModule.html":{}}}],["task.save",{"_index":581,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{}}}],["task.schema",{"_index":547,"title":{},"body":{"classes/CalendarModule.html":{},"modules/CalendarTaskModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["task.schema.ts",{"_index":613,"title":{},"body":{"classes/CalendarTask-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["task.schema.ts:11",{"_index":619,"title":{},"body":{"classes/CalendarTask-1.html":{}}}],["task.schema.ts:14",{"_index":615,"title":{},"body":{"classes/CalendarTask-1.html":{}}}],["task.schema.ts:17",{"_index":617,"title":{},"body":{"classes/CalendarTask-1.html":{}}}],["task.schema.ts:20",{"_index":616,"title":{},"body":{"classes/CalendarTask-1.html":{}}}],["task.schema.ts:23",{"_index":618,"title":{},"body":{"classes/CalendarTask-1.html":{}}}],["task.schema.ts:26",{"_index":614,"title":{},"body":{"classes/CalendarTask-1.html":{}}}],["task.service",{"_index":2345,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task:${updatedcomment.taskid.tostring()}:commentupdated",{"_index":840,"title":{},"body":{"classes/CommentGateway.html":{}}}],["task_created",{"_index":36,"title":{},"body":{"classes/Activity.html":{}}}],["taskcontroller",{"_index":2327,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskdocument",{"_index":2326,"title":{},"body":{"classes/Task-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["taskgateway",{"_index":532,"title":{"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{}},"body":{"controllers/CalendarController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"coverage.html":{}}}],["taskid",{"_index":763,"title":{},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateSubtaskDto.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{}}}],["tasklinks",{"_index":2105,"title":{},"body":{"injectables/NotificationService.html":{}}}],["tasklinks.filter(boolean",{"_index":2113,"title":{},"body":{"injectables/NotificationService.html":{}}}],["tasklinks.length",{"_index":2111,"title":{},"body":{"injectables/NotificationService.html":{}}}],["taskmodel",{"_index":555,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/CommentService.html":{},"injectables/NotificationService.html":{},"injectables/SubtaskService.html":{},"injectables/TaskService.html":{}}}],["taskmodule",{"_index":225,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["tasks",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"injectables/CalendarService.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace-1.html":{}}}],["tasks/:taskid/comments",{"_index":777,"title":{},"body":{"controllers/CommentController.html":{}}}],["tasks/schemas/task.schema",{"_index":656,"title":{},"body":{"classes/Column.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"classes/User-1.html":{},"modules/WorkspaceModule.html":{}}}],["tasks/task.module",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{}}}],["tasks/task.schema",{"_index":681,"title":{},"body":{"classes/Column-2.html":{},"injectables/CommentService.html":{},"injectables/NotificationService.html":{},"classes/Subtask.html":{},"modules/SubtaskModule.html":{},"injectables/SubtaskService.html":{}}}],["tasks/task.service",{"_index":1681,"title":{},"body":{"injectables/DashboardService.html":{}}}],["taskschema",{"_index":850,"title":{},"body":{"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/SubtaskModule.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"modules/TaskModule.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskservice",{"_index":1670,"title":{"injectables/TaskService.html":{}},"body":{"injectables/DashboardService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":2313,"title":{},"body":{"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.to_do",{"_index":2321,"title":{},"body":{"classes/Task-1.html":{}}}],["team",{"_index":1568,"title":{"classes/Team.html":{}},"body":{"classes/CreateMeetingDto.html":{},"classes/Member-1.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"coverage.html":{}}}],["team._id",{"_index":2474,"title":{},"body":{"injectables/TeamsService.html":{}}}],["team.name",{"_index":2436,"title":{},"body":{"modules/TeamsModule.html":{}}}],["team.save",{"_index":2460,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teamid",{"_index":2466,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teamidordoc",{"_index":2448,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teamidordoc._id",{"_index":2469,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teammember/entities/member.schema",{"_index":2400,"title":{},"body":{"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Workspace-1.html":{}}}],["teammembers",{"_index":1652,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{}}}],["teammodel",{"_index":2446,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teams",{"_index":2406,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["teams.controller",{"_index":2435,"title":{},"body":{"modules/TeamsModule.html":{}}}],["teams.service",{"_index":2422,"title":{},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{}}}],["teams/teams.module",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["teamschema",{"_index":2402,"title":{},"body":{"classes/Team.html":{},"modules/TeamsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teamscontroller",{"_index":2404,"title":{"controllers/TeamsController.html":{}},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"coverage.html":{}}}],["teamsmodule",{"_index":226,"title":{"modules/TeamsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TeamsModule.html":{},"modules.html":{},"overview.html":{}}}],["teamsservice",{"_index":2421,"title":{"injectables/TeamsService.html":{}},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1187,"title":{"interfaces/Template.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{},"coverage.html":{}}}],["template.name",{"_index":1230,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["template.type",{"_index":1231,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["templatecontent",{"_index":1766,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["templateeditorservice",{"_index":1186,"title":{"injectables/TemplateEditorService.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"overview.html":{}}}],["templateplaygroundcomponent",{"_index":1361,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"coverage.html":{},"overview.html":{}}}],["templateplaygroundmodule",{"_index":2584,"title":{"modules/TemplatePlaygroundModule.html":{}},"body":{"modules/TemplatePlaygroundModule.html":{},"modules.html":{},"overview.html":{}}}],["templates",{"_index":1208,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["templates.zip",{"_index":2861,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["test",{"_index":3013,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":3016,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3015,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3011,"title":{},"body":{"index.html":{}}}],["text",{"_index":1089,"title":{},"body":{"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["thanks",{"_index":3085,"title":{},"body":{"index.html":{}}}],["theme",{"_index":2520,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["then((content",{"_index":2859,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["there's",{"_index":836,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.activitymodel(createactivitydto",{"_index":148,"title":{},"body":{"injectables/ActivityService.html":{}}}],["this.activitymodel.find().exec",{"_index":150,"title":{},"body":{"injectables/ActivityService.html":{}}}],["this.activitymodel.findbyid(id).exec",{"_index":152,"title":{},"body":{"injectables/ActivityService.html":{}}}],["this.activitymodel.findbyidanddelete(id).exec",{"_index":159,"title":{},"body":{"injectables/ActivityService.html":{}}}],["this.activitymodel.findbyidandupdate",{"_index":157,"title":{},"body":{"injectables/ActivityService.html":{}}}],["this.activityservice.create(createactivitydto",{"_index":99,"title":{},"body":{"controllers/ActivityController.html":{}}}],["this.activityservice.findall",{"_index":100,"title":{},"body":{"controllers/ActivityController.html":{}}}],["this.activityservice.findone(id",{"_index":102,"title":{},"body":{"controllers/ActivityController.html":{}}}],["this.activityservice.remove(id",{"_index":106,"title":{},"body":{"controllers/ActivityController.html":{}}}],["this.activityservice.update(id",{"_index":104,"title":{},"body":{"controllers/ActivityController.html":{}}}],["this.appservice.gethello",{"_index":213,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.forgotpassword(dto.email",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.authservice.login(req.user",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.authservice.register(registerdto",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.authservice.resetpassword(dto.token",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.authservice.validateuser(email",{"_index":1892,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.verifyemail(token",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.calendarservice.gettasksinrange(query.viewmode",{"_index":537,"title":{},"body":{"controllers/CalendarController.html":{}}}],["this.columngateway.broadcastcolumnupdate('column.created",{"_index":749,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["this.columnmodel",{"_index":744,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["this.columnservice.create(workspaceid",{"_index":694,"title":{},"body":{"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{}}}],["this.commentmodel",{"_index":875,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentmodel(data",{"_index":870,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentmodel.find",{"_index":882,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentmodel.findbyid(commentid",{"_index":885,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentmodel.findbyidanddelete(commentid",{"_index":903,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentservice.addcomment",{"_index":825,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.commentservice.addcomment(taskid",{"_index":798,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.deletecomment(commentid",{"_index":803,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.deletecomment(payload.commentid",{"_index":841,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.commentservice.editcomment",{"_index":833,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.commentservice.editcomment(commentid",{"_index":802,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.getcomments(taskid",{"_index":805,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commitmentmodel",{"_index":1073,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.commitmentmodel.deleteone",{"_index":1135,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.commitmentmodel.find",{"_index":1146,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.commitmentmodel.find(filter).sort(sort).exec",{"_index":1118,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.commitmentmodel.findbyid(id).exec",{"_index":1084,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.config",{"_index":1411,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.configservice.get('api_key",{"_index":205,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.createsession",{"_index":1382,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.dashboardservice.addmeeting(dto",{"_index":488,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["this.dashboardservice.getmetrics(userid",{"_index":482,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["this.dashboardservice.getupcomingmeetings",{"_index":485,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["this.downloadblob(content",{"_index":2860,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["this.editor",{"_index":2517,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editor.dispose",{"_index":2583,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editor.ondidchangemodelcontent",{"_index":2544,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editor.setmodel(model",{"_index":2552,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.editorservice.initializeeditor(this.editorcontainer.nativeelement",{"_index":1414,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.editorservice.seteditorcontent(response.content",{"_index":1423,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.editorservice.setonchangecallback((content",{"_index":1419,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.findone(id",{"_index":1119,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.gateway.broadcast('commitment.archived",{"_index":1134,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.gateway.broadcast('commitment.completed",{"_index":1133,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.gateway.broadcast('commitment.created",{"_index":1082,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.gateway.broadcast('commitment.deleted",{"_index":1137,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.gateway.broadcast('commitment.updated",{"_index":1131,"title":{},"body":{"injectables/CommitmentsService.html":{}}}],["this.generatereadme",{"_index":2855,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["this.getlanguagefromfiletype(filetype",{"_index":2550,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.handlebarsinstance",{"_index":1771,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.compile(templatecontent",{"_index":1819,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('compare",{"_index":1778,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('each",{"_index":1787,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('isinitialtab",{"_index":1814,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('istabenabled",{"_index":1808,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('orlength",{"_index":1802,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('relativeurl",{"_index":1790,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.handlebarsinstance.registerhelper('unless",{"_index":1785,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.http.get(`/api/session/${this.sessionid}/config`).topromise",{"_index":1410,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.get(`/api/session/${this.sessionid}/template/${template.path}`).topromise",{"_index":1422,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.get(`/api/session/${this.sessionid}/templates`).topromise",{"_index":1401,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post('/api/session/create",{"_index":1393,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post(`/api/session/${this.sessionid}/config",{"_index":1438,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post(`/api/session/${this.sessionid}/download",{"_index":1471,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.http.post(`/api/session/${this.sessionid}/template/${this.selectedfile.path",{"_index":1436,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.initializeeditor",{"_index":1385,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.initializehandlebars",{"_index":1769,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.jwtservice.sign",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.jwtservice.signasync",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastsaved",{"_index":1433,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.loadsessionconfig",{"_index":1384,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.loadsessiontemplates",{"_index":1383,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.logger.error('error",{"_index":1018,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["this.logger.log",{"_index":1981,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["this.logger.log('running",{"_index":1011,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["this.logger.log(`archived",{"_index":1015,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["this.mailservice.sendverificationemail(user.email",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["this.meetingmodel",{"_index":1694,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.membermodel",{"_index":2473,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.membermodel.deleteone",{"_index":2490,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.membermodel.findbyid(id).exec",{"_index":2489,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.membermodel.findbyidandupdate",{"_index":2484,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.notificationmodel",{"_index":2100,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.countdocuments",{"_index":2122,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.deletemany",{"_index":1979,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["this.notificationmodel.findbyidanddelete(id",{"_index":2126,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.findbyidandupdate",{"_index":2124,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationmodel.updatemany",{"_index":2123,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notifications.create(userid",{"_index":2046,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.deletenotification(id",{"_index":2073,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.findusernotifications",{"_index":2058,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.markallasread(userid",{"_index":2064,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.markoneasread(id",{"_index":2067,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.markoneasunread(id",{"_index":2070,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.restore(id",{"_index":2078,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.notifications.unreadcount(userid",{"_index":2061,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["this.onchangecallback",{"_index":2545,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.onchangecallback(this.editor.getvalue",{"_index":2546,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.previewframe.nativeelement.src",{"_index":1446,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.previewframe?.nativeelement",{"_index":1445,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.projectmodel(data",{"_index":2175,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.find",{"_index":2179,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.find().populate('workspaceid",{"_index":2177,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.findbyidanddelete(id).exec",{"_index":2182,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.findbyidandupdate(id",{"_index":2181,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectservice.create(data",{"_index":2152,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.delete(id",{"_index":2157,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.findall",{"_index":2153,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.findbyworkspace(workspaceid",{"_index":2155,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.update(id",{"_index":2156,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":497,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["this.registerhandlebarslanguage",{"_index":2549,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["this.registerhelpers",{"_index":1775,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["this.save_delay",{"_index":1434,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.savetemplate(content",{"_index":1432,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.savetimeout",{"_index":1389,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.saving",{"_index":1429,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.scheduleautosave(content",{"_index":1420,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.selectedfile",{"_index":1407,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.selectfile(this.templates[0",{"_index":1408,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.server.emit",{"_index":839,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.server.emit('columnupdated",{"_index":1739,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.server.emit('subtaskupdated",{"_index":1740,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.server.emit('taskdeleted",{"_index":2363,"title":{},"body":{"classes/TaskGateway.html":{}}}],["this.server.emit('taskupdated",{"_index":1738,"title":{},"body":{"classes/EventsGateway.html":{},"classes/TaskGateway.html":{}}}],["this.server.emit('workspaceupdated",{"_index":1741,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.server.emit(`task:${payload.taskid}:commentadded",{"_index":830,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.server.emit(`task:${payload.taskid}:commentdeleted",{"_index":842,"title":{},"body":{"classes/CommentGateway.html":{}}}],["this.server.emit(event",{"_index":712,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommitmentsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{}}}],["this.server.to(data.roomid).emit('joined",{"_index":1045,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["this.sessionid",{"_index":1375,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.sessionid}.zip",{"_index":1483,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.showconfigpanel",{"_index":1443,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.subtaskgateway.broadcastsubtaskupdate('subtask.created",{"_index":2274,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskgateway.broadcastsubtaskupdate('subtask.deleted",{"_index":2286,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskgateway.broadcastsubtaskupdate('subtask.found",{"_index":2280,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskgateway.broadcastsubtaskupdate('subtask.updated",{"_index":2284,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskgateway.broadcastsubtaskupdate('subtasks.foundfortask",{"_index":2288,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskmodel",{"_index":2273,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskmodel.find",{"_index":2289,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskmodel.find().populate('task').exec",{"_index":2276,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskmodel.findbyidanddelete(id).exec",{"_index":2285,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskmodel.findone",{"_index":2277,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskmodel.findoneandupdate",{"_index":2282,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.subtaskservice.create",{"_index":2350,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.subtaskservice.create(dto",{"_index":2240,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["this.subtaskservice.findall",{"_index":2241,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["this.subtaskservice.findallfortask(taskid",{"_index":2352,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.subtaskservice.findone(id",{"_index":2242,"title":{},"body":{"controllers/SubtaskController.html":{}}}],["this.subtaskservice.remove(id",{"_index":2244,"title":{},"body":{"controllers/SubtaskController.html":{},"controllers/TaskController.html":{}}}],["this.subtaskservice.update(id",{"_index":2243,"title":{},"body":{"controllers/SubtaskController.html":{},"controllers/TaskController.html":{}}}],["this.svc.archive(id",{"_index":970,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.svc.archiveoldcompleted",{"_index":1014,"title":{},"body":{"injectables/CommitmentsCron.html":{}}}],["this.svc.create(dto",{"_index":954,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.svc.findone(id",{"_index":956,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.svc.list(params",{"_index":967,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.svc.markcomplete(id",{"_index":978,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.svc.remove(id",{"_index":975,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.svc.update(id",{"_index":959,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["this.taskmodel",{"_index":571,"title":{},"body":{"injectables/CalendarService.html":{}}}],["this.taskmodel(data",{"_index":2389,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.countdocuments",{"_index":2394,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find",{"_index":2112,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/TaskService.html":{}}}],["this.taskmodel.find().populate('projectid",{"_index":2390,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyid(dto.taskid).exec",{"_index":2271,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.taskmodel.findbyid(taskid",{"_index":873,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.taskmodel.findbyid(taskid).exec",{"_index":2287,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["this.taskmodel.findbyidanddelete(id).exec",{"_index":590,"title":{},"body":{"injectables/CalendarService.html":{},"injectables/TaskService.html":{}}}],["this.taskmodel.findbyidandupdate(id",{"_index":2393,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.updateone",{"_index":899,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.taskservice.countbystatus('done",{"_index":1688,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.taskservice.countbystatus('in",{"_index":1689,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.teammodel",{"_index":2459,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.find().populate('members').exec",{"_index":2462,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findbyid(teamid).exec",{"_index":2471,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findbyidandupdate",{"_index":2479,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teamsservice.createmember(name",{"_index":2429,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.createteam(name",{"_index":2426,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.getteams",{"_index":2427,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.updatemember(id",{"_index":2431,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.updateteam(id",{"_index":2430,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.templates",{"_index":1402,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.templates.length",{"_index":1406,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["this.usermodel",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel(createuserdto",{"_index":2714,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(dto",{"_index":2737,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["this.usermodel.countdocuments().exec",{"_index":2742,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["this.usermodel.find().exec",{"_index":2720,"title":{},"body":{"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["this.usermodel.findbyid(decoded.sub).exec",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findbyid(id).exec",{"_index":2739,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["this.usermodel.findbyidanddelete(id).exec",{"_index":2721,"title":{},"body":{"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":2740,"title":{},"body":{"injectables/UsersService-1.html":{}}}],["this.usermodel.findone",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/UsersService-1.html":{}}}],["this.userservice.countall",{"_index":1690,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.userservice.create(data",{"_index":2681,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(id",{"_index":2685,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":2682,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":2683,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":2684,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":2701,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2700,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":2702,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.workspacemodel(payload",{"_index":2814,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacemodel.countdocuments",{"_index":2821,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacemodel.find().populate('owner",{"_index":2815,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacemodel.findbyid(id).populate('owner",{"_index":2817,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacemodel.findbyid(workspaceid",{"_index":739,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["this.workspacemodel.findbyidanddelete(id",{"_index":2820,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspacemodel.findbyidandupdate",{"_index":2818,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["this.workspaceservice.addmember(workspaceid",{"_index":2774,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["this.workspaceservice.countactiveworkspaces",{"_index":1691,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.workspaceservice.countallworkspaces",{"_index":1692,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.workspaceservice.create(data",{"_index":2770,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["this.workspaceservice.delete(id",{"_index":2775,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["this.workspaceservice.findall",{"_index":2771,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["this.workspaceservice.findbyid(id",{"_index":2772,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["though",{"_index":2659,"title":{},"body":{"classes/User-1.html":{}}}],["threedaysago",{"_index":1976,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["threedaysago.setdate(threedaysago.getdate",{"_index":1977,"title":{},"body":{"injectables/NotificationCleanup.html":{}}}],["through",{"_index":2716,"title":{},"body":{"injectables/UsersService.html":{}}}],["throw",{"_index":153,"title":{},"body":{"injectables/ActivityService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/CommentService.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"injectables/SubtaskService.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/UsersService-1.html":{}}}],["time",{"_index":759,"title":{},"body":{"injectables/ColumnService-1.html":{},"classes/CreateMeetingDto.html":{},"index.html":{}}}],["timeout",{"_index":1428,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["timestamp",{"_index":2664,"title":{},"body":{"classes/User-1.html":{}}}],["timestamps",{"_index":31,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{}}}],["tips",{"_index":2886,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["title",{"_index":595,"title":{},"body":{"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"injectables/DashboardService.html":{},"injectables/HbsRenderService.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["to_do",{"_index":657,"title":{},"body":{"classes/Column.html":{},"classes/Column-2.html":{},"classes/Task-1.html":{},"miscellaneous/enumerations.html":{}}}],["todate",{"_index":565,"title":{},"body":{"injectables/CalendarService.html":{}}}],["today",{"_index":949,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"miscellaneous/typealiases.html":{}}}],["todo",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"classes/Column-1.html":{},"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"classes/WorkspaceTask.html":{},"miscellaneous/enumerations.html":{}}}],["toggle",{"_index":1215,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["toggleconfigpanel",{"_index":1442,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["token",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/MailService.html":{},"classes/ResetPasswordDto.html":{},"injectables/TemplateEditorService.html":{}}}],["token'})@apibody({type",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokenizer",{"_index":2562,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["top",{"_index":1299,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["topromise",{"_index":1394,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["totalworkspaces",{"_index":1653,"title":{},"body":{"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{}}}],["touch",{"_index":3091,"title":{},"body":{"index.html":{}}}],["trackbyname(index",{"_index":1500,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["transform",{"_index":1310,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["transformer",{"_index":1574,"title":{},"body":{"classes/CreateMeetingDto.html":{},"dependencies.html":{}}}],["transition",{"_index":1285,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["translation",{"_index":1793,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["translations",{"_index":1795,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["translations[key",{"_index":1800,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["transparent",{"_index":1345,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["tree",{"_index":1228,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["trigger",{"_index":1487,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["true",{"_index":17,"title":{},"body":{"classes/Activity.html":{},"injectables/ActivityService.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/EventsGateway.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["true})@isdate()@type(undefined",{"_index":1549,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["true})@isoptional",{"_index":1633,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["true})@isstring()@isnotempty",{"_index":1553,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["true})@isurl()@isnotempty",{"_index":1560,"title":{},"body":{"classes/CreateMeetingDto.html":{}}}],["try",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"injectables/CommitmentsCron.html":{},"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["ts",{"_index":2557,"title":{},"body":{"injectables/TemplateEditorService.html":{},"injectables/UsersService.html":{}}}],["tsconfig.json",{"_index":2880,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["twitter",{"_index":3097,"title":{},"body":{"index.html":{}}}],["type",{"_index":10,"title":{},"body":{"classes/Activity.html":{},"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/CalendarWorkspace.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsCron.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"interfaces/CompoDocConfig.html":{},"classes/CreateActivityDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateSubtaskDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateWorkspaceDto.html":{},"controllers/DashboardController.html":{},"classes/DashboardMetricsDto.html":{},"injectables/DashboardService.html":{},"classes/EventsGateway.html":{},"classes/ForgotPasswordDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/MarkReadDto.html":{},"classes/Meeting.html":{},"classes/MeetingResponseDto.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"injectables/NotificationCleanup.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/Session.html":{},"classes/Subtask.html":{},"controllers/SubtaskController.html":{},"classes/SubtaskGateway.html":{},"injectables/SubtaskService.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"injectables/TaskService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/UpdateSubtaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"controllers/WorkspaceController.html":{},"classes/WorkspaceGateway.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3109,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1037,"title":{},"body":{"classes/CommitmentsGateway.html":{}}}],["typeof",{"_index":2467,"title":{},"body":{"injectables/TeamsService.html":{}}}],["types",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CalendarService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"injectables/ColumnService-1.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"classes/UpdateActivityDto.html":{},"classes/UpdateCommitmentDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["types.objectid",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"classes/Commitment.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Meeting.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["types.objectid().tostring",{"_index":1944,"title":{},"body":{"classes/Member-1.html":{},"classes/Notification.html":{}}}],["types.objectid(string(m",{"_index":2809,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["types.objectid(taskid",{"_index":877,"title":{},"body":{"injectables/CommentService.html":{}}}],["types.objectid(teamidordoc",{"_index":2468,"title":{},"body":{"injectables/TeamsService.html":{}}}],["types.objectid(userid",{"_index":876,"title":{},"body":{"injectables/CommentService.html":{}}}],["types.objectid).tostring",{"_index":2118,"title":{},"body":{"injectables/NotificationService.html":{}}}],["types.objectid.isvalid(commentid",{"_index":884,"title":{},"body":{"injectables/CommentService.html":{}}}],["types.objectid.isvalid(id",{"_index":586,"title":{},"body":{"injectables/CalendarService.html":{}}}],["types.objectid.isvalid(string(m",{"_index":2808,"title":{},"body":{"injectables/WorkspaceService.html":{}}}],["types.objectid.isvalid(taskid",{"_index":872,"title":{},"body":{"injectables/CommentService.html":{}}}],["types.objectid.isvalid(workspaceid",{"_index":753,"title":{},"body":{"injectables/ColumnService-1.html":{}}}],["types/cache",{"_index":2946,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1865,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/TemplateEditorService.html":{},"index.html":{}}}],["ui",{"_index":1250,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"dependencies.html":{}}}],["unauthorizedexception",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('user",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":199,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/CalendarTask.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"injectables/CommitmentsService.html":{},"classes/Member.html":{},"classes/Member-1.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"classes/Project.html":{},"classes/Subtask.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Team.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{}}}],["undone",{"_index":1455,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["unique",{"_index":636,"title":{},"body":{"classes/CalendarUser.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/Workspace-1.html":{}}}],["unique)'})@isemail",{"_index":2183,"title":{},"body":{"classes/RegisterDto.html":{}}}],["unit",{"_index":3012,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":68,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CalendarController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/CommitmentsGateway.html":{},"injectables/CommitmentsService.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["unless",{"_index":1784,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["unlicensed",{"_index":3108,"title":{},"body":{"properties.html":{}}}],["unread",{"_index":2059,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{}}}],["unreadcount",{"_index":1994,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["unreadcount(@param('userid",{"_index":2060,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["unreadcount(userid",{"_index":2015,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["unsafe",{"_index":1867,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["up",{"_index":1416,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["upcoming",{"_index":947,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"miscellaneous/typealiases.html":{}}}],["update",{"_index":59,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"injectables/CommentService.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"injectables/TeamsService.html":{},"controllers/UserController.html":{},"injectables/UsersService-1.html":{}}}],["update(@param('id",{"_index":103,"title":{},"body":{"controllers/ActivityController.html":{},"controllers/ProjectController.html":{},"controllers/SubtaskController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":77,"title":{},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/UserController.html":{},"injectables/UsersService-1.html":{}}}],["updateactivitydto",{"_index":78,"title":{"classes/UpdateActivityDto.html":{}},"body":{"controllers/ActivityController.html":{},"injectables/ActivityService.html":{},"classes/UpdateActivityDto.html":{},"coverage.html":{}}}],["updatecommentdto",{"_index":2604,"title":{"classes/UpdateCommentDto.html":{}},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["updatecommitmentdto",{"_index":941,"title":{"classes/UpdateCommitmentDto.html":{}},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/UpdateCommitmentDto.html":{},"coverage.html":{}}}],["updateconfig",{"_index":1437,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["updated",{"_index":587,"title":{},"body":{"injectables/CalendarService.html":{},"interfaces/CompoDocConfig.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"interfaces/Session.html":{},"injectables/TeamsService.html":{},"interfaces/Template.html":{},"injectables/UsersService-1.html":{}}}],["updated.toobject",{"_index":2068,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{}}}],["updatedactivity",{"_index":156,"title":{},"body":{"injectables/ActivityService.html":{}}}],["updatedat",{"_index":764,"title":{},"body":{"classes/Comment.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"injectables/CommitmentsService.html":{},"classes/Meeting.html":{},"classes/Notification.html":{},"classes/User-1.html":{},"miscellaneous/typealiases.html":{}}}],["updatedcomment",{"_index":832,"title":{},"body":{"classes/CommentGateway.html":{}}}],["updatedcomment.taskid",{"_index":838,"title":{},"body":{"classes/CommentGateway.html":{}}}],["updatedsubtask",{"_index":2281,"title":{},"body":{"injectables/SubtaskService.html":{}}}],["updatemember",{"_index":2408,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["updatemember(id",{"_index":2416,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["updates",{"_index":3074,"title":{},"body":{"index.html":{}}}],["updatestatus",{"_index":2377,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatestatus(id",{"_index":2386,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatesubtask",{"_index":2332,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatesubtask(id",{"_index":2342,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatesubtaskdto",{"_index":2233,"title":{"classes/UpdateSubtaskDto.html":{}},"body":{"controllers/SubtaskController.html":{},"injectables/SubtaskService.html":{},"controllers/TaskController.html":{},"classes/UpdateSubtaskDto.html":{},"coverage.html":{}}}],["updatetask",{"_index":512,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["updatetask(id",{"_index":524,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["updatetaskdto",{"_index":525,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updateteam",{"_index":2409,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["updateteam(id",{"_index":2419,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["updateuserdto",{"_index":2613,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updating",{"_index":1441,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["uppercase",{"_index":1311,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/RegisterDto-1.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["url",{"_index":1488,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"classes/CreateMeetingDto.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/ZipExportService.html":{}}}],["url.createobjecturl(zipblob",{"_index":1489,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["url.revokeobjecturl(url",{"_index":1496,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["usage",{"_index":2873,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["use",{"_index":835,"title":{},"body":{"classes/CommentGateway.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/ZipExportService.html":{}}}],["used",{"_index":1714,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/HbsRenderService.html":{},"classes/User-1.html":{}}}],["usefactory",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{},"controllers/DashboardController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["useguards(authguard('local",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["useguards(jwtauthguard",{"_index":477,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DashboardController.html":{}}}],["useguards(rolesguard",{"_index":971,"title":{},"body":{"interfaces/CommitmentQuery.html":{},"controllers/CommitmentsController.html":{}}}],["user",{"_index":40,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/Activity.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CalendarTask-1.html":{},"classes/CalendarUser.html":{},"classes/Comment.html":{},"classes/Commitment.html":{},"classes/CreateUserDto.html":{},"controllers/DashboardController.html":{},"modules/DatabaseModule.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/LocalStrategy.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"classes/Project.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"classes/Workspace.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@isemail",{"_index":2190,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["user'})@isstring",{"_index":2185,"title":{},"body":{"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["user._id",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{}}}],["user._id.tohexstring",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["user._id.tostring",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["user.controller",{"_index":2692,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":2679,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["user.dto.ts",{"_index":1607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":2186,"title":{},"body":{"classes/RegisterDto.html":{}}}],["user.dto.ts:20",{"_index":2184,"title":{},"body":{"classes/RegisterDto.html":{}}}],["user.dto.ts:28",{"_index":2188,"title":{},"body":{"classes/RegisterDto.html":{}}}],["user.dto.ts:3",{"_index":1625,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:32",{"_index":1609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":1608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":1610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":1624,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:5",{"_index":1626,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.isemailverified",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["user.name",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles.includes(role",{"_index":505,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"guards/RolesGuard.html":{}}}],["user.save",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.schema",{"_index":2691,"title":{},"body":{"modules/UserModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["user.service",{"_index":2678,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/.../user",{"_index":2986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user/.../user.schema.ts",{"_index":3118,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user/dto/create",{"_index":1606,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["user/user",{"_index":2988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user/user.schema",{"_index":1712,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["user/user.schema.ts",{"_index":2615,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user/user.schema.ts:11",{"_index":2617,"title":{},"body":{"classes/User.html":{}}}],["user/user.schema.ts:14",{"_index":2620,"title":{},"body":{"classes/User.html":{}}}],["user/user.schema.ts:17",{"_index":2619,"title":{},"body":{"classes/User.html":{}}}],["user/user.schema.ts:24",{"_index":2622,"title":{},"body":{"classes/User.html":{}}}],["user/user.schema.ts:27",{"_index":2618,"title":{},"body":{"classes/User.html":{}}}],["user/user.schema.ts:31",{"_index":2623,"title":{},"body":{"classes/User.html":{}}}],["user/user.schema.ts:34",{"_index":2616,"title":{},"body":{"classes/User.html":{}}}],["user/users.controller.ts",{"_index":2694,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["user/users.controller.ts:11",{"_index":2697,"title":{},"body":{"controllers/UsersController.html":{}}}],["user/users.controller.ts:16",{"_index":2696,"title":{},"body":{"controllers/UsersController.html":{}}}],["user/users.controller.ts:21",{"_index":2698,"title":{},"body":{"controllers/UsersController.html":{}}}],["user/users.module.ts",{"_index":2707,"title":{},"body":{"modules/UsersModule.html":{}}}],["user/users.service.ts",{"_index":2709,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["user/users.service.ts:15",{"_index":2711,"title":{},"body":{"injectables/UsersService.html":{}}}],["user/users.service.ts:23",{"_index":2712,"title":{},"body":{"injectables/UsersService.html":{}}}],["user/users.service.ts:29",{"_index":2713,"title":{},"body":{"injectables/UsersService.html":{}}}],["user/users.service.ts:9",{"_index":2710,"title":{},"body":{"injectables/UsersService.html":{}}}],["user@example.com",{"_index":1752,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["user@example.com'})@isemail",{"_index":1748,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["user_joined",{"_index":37,"title":{},"body":{"classes/Activity.html":{}}}],["usercontroller",{"_index":2670,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/NotificationService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":11,"title":{},"body":{"classes/Activity.html":{},"classes/AddMemberDto.html":{},"classes/AddMemberDto-1.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentGateway.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"interfaces/JwtPayload-1.html":{},"controllers/NotificationController.html":{},"interfaces/NotificationResponse.html":{},"injectables/NotificationService.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["userid.tostring",{"_index":892,"title":{},"body":{"injectables/CommentService.html":{}}}],["usermodel",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["usermodule",{"_index":227,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":1891,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrole",{"_index":2621,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.developer",{"_index":2628,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":2672,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}}}],["users.controller",{"_index":2708,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2699,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.schema",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Task-1.html":{}}}],["users/user.service",{"_index":1682,"title":{},"body":{"injectables/DashboardService.html":{}}}],["users/users.module",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{}}}],["users/users.module.ts",{"_index":2690,"title":{},"body":{"modules/UserModule.html":{}}}],["userschema",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":2693,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1671,"title":{},"body":{"injectables/DashboardService.html":{},"controllers/UserController.html":{}}}],["usersmodule",{"_index":2703,"title":{"modules/UsersModule.html":{}},"body":{"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1672,"title":{"injectables/UsersService.html":{},"injectables/UsersService-1.html":{}},"body":{"injectables/DashboardService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersService-1.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":3068,"title":{},"body":{"index.html":{}}}],["usually",{"_index":2661,"title":{},"body":{"classes/User-1.html":{}}}],["valid",{"_index":1749,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/RegisterDto-1.html":{}}}],["validapikey",{"_index":204,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["validate",{"_index":741,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1888,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1874,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validated",{"_index":1876,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":1512,"title":{},"body":{"classes/CreateActivityDto.html":{},"classes/CreateCommitmentDto.html":{},"classes/CreateMeetingDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateWorkspaceDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/MarkReadDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"classes/ResendVerificationDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateCommitmentDto.html":{},"dependencies.html":{}}}],["validtaskids",{"_index":2115,"title":{},"body":{"injectables/NotificationService.html":{}}}],["validtaskids.has(notif.link?.split('/tasks/')[1",{"_index":2121,"title":{},"body":{"injectables/NotificationService.html":{}}}],["value",{"_index":1005,"title":{},"body":{"injectables/CommitmentsCron.html":{},"injectables/CommitmentsService.html":{},"injectables/HbsRenderService.html":{},"injectables/NotificationCleanup.html":{},"injectables/NotificationService.html":{},"injectables/TemplateEditorService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":1806,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["values",{"_index":1453,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"injectables/HbsRenderService.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["variable",{"_index":2909,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":3123,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{},"injectables/MailService.html":{}}}],["verification.dto",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["verification.dto.ts",{"_index":2204,"title":{},"body":{"classes/ResendVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:6",{"_index":2205,"title":{},"body":{"classes/ResendVerificationDto.html":{}}}],["verificationtoken",{"_index":2636,"title":{},"body":{"classes/User-1.html":{}}}],["verified",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["verifyemail",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyemail(@body('token",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/LocalAuthenticatedRequest.html":{}}}],["verifyemail(token",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyurl",{"_index":1898,"title":{},"body":{"injectables/MailService.html":{}}}],["verifyurl}\\n",{"_index":1905,"title":{},"body":{"injectables/MailService.html":{}}}],["version",{"_index":3106,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":2533,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["via",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"injectables/ColumnService.html":{}}}],["video",{"_index":3063,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":1180,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["viewchild('editorcontainer",{"_index":1362,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["viewchild('previewframe",{"_index":1365,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["viewmode",{"_index":536,"title":{},"body":{"controllers/CalendarController.html":{},"injectables/CalendarService.html":{}}}],["visible",{"_index":1842,"title":{},"body":{"injectables/HbsRenderService.html":{},"injectables/TemplateEditorService.html":{}}}],["visit",{"_index":2898,"title":{},"body":{"injectables/ZipExportService.html":{},"index.html":{}}}],["visualize",{"_index":3066,"title":{},"body":{"index.html":{}}}],["void",{"_index":707,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommitmentsGateway.html":{},"interfaces/CompoDocConfig.html":{},"classes/EventsGateway.html":{},"injectables/HbsRenderService.html":{},"injectables/MailService.html":{},"interfaces/Session.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{},"classes/WorkspaceGateway.html":{},"injectables/ZipExportService.html":{}}}],["vs",{"_index":2521,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["w",{"_index":2575,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["w+)(\\s*=\\s",{"_index":2571,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["want",{"_index":1452,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["watch",{"_index":3007,"title":{},"body":{"index.html":{}}}],["website",{"_index":3095,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":748,"title":{},"body":{"injectables/ColumnService.html":{}}}],["websocketgateway",{"_index":708,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{}}}],["websocketserver",{"_index":702,"title":{},"body":{"classes/ColumnGateway.html":{},"classes/ColumnGateway-1.html":{},"classes/CommentGateway.html":{},"classes/CommitmentsGateway.html":{},"classes/EventsGateway.html":{},"classes/SubtaskGateway.html":{},"classes/TaskGateway.html":{},"classes/TaskGateway-1.html":{},"classes/WorkspaceGateway.html":{}}}],["weight",{"_index":1278,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["whether",{"_index":1555,"title":{},"body":{"classes/CreateMeetingDto.html":{},"injectables/HbsRenderService.html":{}}}],["white",{"_index":1326,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"injectables/TemplateEditorService.html":{}}}],["width",{"_index":1302,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["window.settimeout(async",{"_index":1431,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["window.url.createobjecturl(blob",{"_index":2901,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["window.url.revokeobjecturl(url",{"_index":2903,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["won't",{"_index":2657,"title":{},"body":{"classes/User-1.html":{}}}],["wordbasedsuggestions",{"_index":2543,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["wordwrap",{"_index":2528,"title":{},"body":{"injectables/TemplateEditorService.html":{}}}],["working",{"_index":3053,"title":{},"body":{"index.html":{}}}],["workspace",{"_index":41,"title":{"classes/Workspace.html":{},"classes/Workspace-1.html":{}},"body":{"classes/Activity.html":{},"classes/Column.html":{},"classes/Column-1.html":{},"classes/Column-2.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/Member.html":{},"classes/Project.html":{},"classes/Task.html":{},"classes/Task-1.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceTask.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["workspace._id",{"_index":745,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{}}}],["workspace.controller",{"_index":2787,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["workspace.dto",{"_index":2768,"title":{},"body":{"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["workspace.dto.ts",{"_index":1629,"title":{},"body":{"classes/CreateWorkspaceDto.html":{},"coverage.html":{}}}],["workspace.dto.ts:11",{"_index":1631,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.dto.ts:16",{"_index":1634,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.dto.ts:7",{"_index":1635,"title":{},"body":{"classes/CreateWorkspaceDto.html":{}}}],["workspace.gateway",{"_index":2788,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["workspace.name",{"_index":728,"title":{},"body":{"modules/ColumnModule.html":{},"modules/WorkspaceModule.html":{}}}],["workspace.schema",{"_index":2786,"title":{},"body":{"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"classes/WorkspaceTask.html":{}}}],["workspace.service",{"_index":2767,"title":{},"body":{"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{}}}],["workspace/schemas/workspace.schema",{"_index":655,"title":{},"body":{"classes/Column.html":{},"classes/Column-1.html":{},"modules/ColumnModule.html":{},"injectables/ColumnService.html":{}}}],["workspace/schemas/workspacetask.schema",{"_index":672,"title":{},"body":{"classes/Column-1.html":{}}}],["workspace/workspace.module",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{}}}],["workspace/workspace.schema",{"_index":680,"title":{},"body":{"classes/Column-2.html":{},"injectables/ColumnService-1.html":{}}}],["workspace/workspace.service",{"_index":1685,"title":{},"body":{"injectables/DashboardService.html":{}}}],["workspacecontroller",{"_index":2757,"title":{"controllers/WorkspaceController.html":{}},"body":{"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{}}}],["workspacedocument",{"_index":2756,"title":{},"body":{"classes/Workspace-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["workspacegateway",{"_index":2776,"title":{"classes/WorkspaceGateway.html":{}},"body":{"classes/WorkspaceGateway.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{}}}],["workspaceid",{"_index":12,"title":{},"body":{"classes/Activity.html":{},"classes/CalendarTask.html":{},"controllers/ColumnController.html":{},"controllers/ColumnController-1.html":{},"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"classes/CreateTaskDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/Task.html":{},"controllers/WorkspaceController.html":{},"injectables/WorkspaceService.html":{}}}],["workspacemodel",{"_index":732,"title":{},"body":{"injectables/ColumnService.html":{},"injectables/ColumnService-1.html":{},"injectables/WorkspaceService.html":{}}}],["workspacemodule",{"_index":228,"title":{"modules/WorkspaceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{},"modules/WorkspaceModule.html":{},"modules.html":{},"overview.html":{}}}],["workspaces",{"_index":2759,"title":{},"body":{"controllers/WorkspaceController.html":{}}}],["workspaceschema",{"_index":721,"title":{},"body":{"modules/ColumnModule.html":{},"classes/Workspace.html":{},"classes/Workspace-1.html":{},"modules/WorkspaceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["workspaceservice",{"_index":1673,"title":{"injectables/WorkspaceService.html":{}},"body":{"injectables/DashboardService.html":{},"controllers/WorkspaceController.html":{},"modules/WorkspaceModule.html":{},"injectables/WorkspaceService.html":{},"coverage.html":{},"overview.html":{}}}],["workspacesubtask",{"_index":722,"title":{"classes/WorkspaceSubtask.html":{}},"body":{"modules/ColumnModule.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"coverage.html":{}}}],["workspacesubtask.name",{"_index":729,"title":{},"body":{"modules/ColumnModule.html":{}}}],["workspacesubtask.schema",{"_index":2833,"title":{},"body":{"classes/WorkspaceTask.html":{}}}],["workspacesubtaskschema",{"_index":723,"title":{},"body":{"modules/ColumnModule.html":{},"classes/WorkspaceSubtask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["workspacetask",{"_index":669,"title":{"classes/WorkspaceTask.html":{}},"body":{"classes/Column-1.html":{},"classes/Workspace-1.html":{},"modules/WorkspaceModule.html":{},"classes/WorkspaceSubtask.html":{},"classes/WorkspaceTask.html":{},"coverage.html":{}}}],["workspacetask.name",{"_index":2791,"title":{},"body":{"modules/WorkspaceModule.html":{}}}],["workspacetask.schema",{"_index":2754,"title":{},"body":{"classes/Workspace-1.html":{},"classes/WorkspaceSubtask.html":{}}}],["workspacetaskdocument",{"_index":2836,"title":{},"body":{"classes/WorkspaceTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["workspacetaskschema",{"_index":2789,"title":{},"body":{"modules/WorkspaceModule.html":{},"classes/WorkspaceTask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["world",{"_index":267,"title":{},"body":{"injectables/AppService.html":{}}}],["wrap",{"_index":1821,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["wrapper",{"_index":1826,"title":{},"body":{"injectables/HbsRenderService.html":{}}}],["x",{"_index":3076,"title":{},"body":{"index.html":{}}}],["y",{"_index":1305,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["yes",{"_index":1679,"title":{},"body":{"injectables/DashboardService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["you'd",{"_index":3089,"title":{},"body":{"index.html":{}}}],["you're",{"_index":3017,"title":{},"body":{"index.html":{}}}],["zip",{"_index":1190,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{}}}],["zip.file('readme.md",{"_index":2856,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["zip.file(file.path",{"_index":2851,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["zip.generateasync",{"_index":2858,"title":{},"body":{"injectables/ZipExportService.html":{}}}],["zipblob",{"_index":1476,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["zipexportservice",{"_index":1189,"title":{"injectables/ZipExportService.html":{}},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{},"modules/TemplatePlaygroundModule.html":{},"injectables/ZipExportService.html":{},"coverage.html":{},"overview.html":{}}}],["zipservice",{"_index":1379,"title":{},"body":{"interfaces/CompoDocConfig.html":{},"interfaces/Session.html":{},"interfaces/Template.html":{}}}],["zoom",{"_index":118,"title":{},"body":{"modules/ActivityModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CalendarTaskModule.html":{},"modules/ColumnModule.html":{},"modules/CommentModule.html":{},"modules/CommitmentsModule.html":{},"modules/DashboardModule.html":{},"modules/NotificationModule.html":{},"modules/ProjectModule.html":{},"modules/SubtaskModule.html":{},"modules/TaskModule.html":{},"modules/TeamsModule.html":{},"modules/TemplatePlaygroundModule.html":{},"modules/UserModule.html":{},"modules/UsersModule.html":{},"modules/WorkspaceModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Activity.html":{"url":"classes/Activity.html","title":"class - Activity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Activity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activity/schemas/activity.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                userId\n                            \n                            \n                                    \n                                workspaceId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/schemas/activity.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/schemas/activity.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/schemas/activity.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspaceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/schemas/activity.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Activity extends Document {\n  @Prop({ required: true })\n  type: string; // e.g. 'TASK_CREATED', 'USER_JOINED', etc.\n\n  @Prop({ required: true })\n  description: string;\n\n  @Prop({ type: String })\n  userId: string; // related user\n\n  @Prop({ type: String })\n  workspaceId: string; // related workspace\n}\n\nexport const ActivitySchema = SchemaFactory.createForClass(Activity);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ActivityController.html":{"url":"controllers/ActivityController.html","title":"controller - ActivityController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  ActivityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activity/activity.controller.ts\n        \n            \n                Prefix\n            \n            \n                activities\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createActivityDto: CreateActivityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/activity/activity.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createActivityDto\n                                            \n                                                            CreateActivityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/activity/activity.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/activity/activity.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/activity/activity.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateActivityDto: UpdateActivityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/activity/activity.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateActivityDto\n                                            \n                                                            UpdateActivityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Post, Body, Param, Delete, Put } from '@nestjs/common';\nimport { ActivityService } from './activity.service';\nimport { CreateActivityDto } from './dto/create-activity.dto';\nimport { UpdateActivityDto } from './dto/update-activity.dto';\n\n@Controller('activities')\nexport class ActivityController {\n  constructor(private readonly activityService: ActivityService) {}\n\n  @Post()\n  async create(@Body() createActivityDto: CreateActivityDto) {\n    return this.activityService.create(createActivityDto);\n  }\n\n  @Get()\n  async findAll() {\n    return this.activityService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return this.activityService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() updateActivityDto: UpdateActivityDto) {\n    return this.activityService.update(id, updateActivityDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return this.activityService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ActivityModule.html":{"url":"modules/ActivityModule.html","title":"module - ActivityModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    ActivityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ActivityModule\n\n\n\ncluster_ActivityModule_providers\n\n\n\n\nActivityService\n\nActivityService\n\n\n\nActivityModule\n\nActivityModule\n\nActivityModule -->\n\nActivityService->ActivityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/activity/activity.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ActivityService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ActivityController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ActivityController } from './activity.controller';\nimport { ActivityService } from './activity.service';\nimport { Activity, ActivitySchema } from './schemas/activity.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Activity.name, schema: ActivitySchema }]),\n  ],\n  controllers: [ActivityController],\n  providers: [ActivityService],\n})\nexport class ActivityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ActivityService.html":{"url":"injectables/ActivityService.html","title":"injectable - ActivityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ActivityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activity/activity.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(activityModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/activity/activity.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        activityModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createActivityDto: CreateActivityDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/activity/activity.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createActivityDto\n                                            \n                                                            CreateActivityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/activity/activity.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/activity/activity.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/activity/activity.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateActivityDto: UpdateActivityDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/activity/activity.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateActivityDto\n                                            \n                                                            UpdateActivityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Activity } from './schemas/activity.schema';\nimport { CreateActivityDto } from './dto/create-activity.dto';\nimport { UpdateActivityDto } from './dto/update-activity.dto';\n\n@Injectable()\nexport class ActivityService {\n  constructor(\n    @InjectModel(Activity.name) private activityModel: Model,\n  ) {}\n\n  async create(createActivityDto: CreateActivityDto): Promise {\n    const createdActivity = new this.activityModel(createActivityDto);\n    return createdActivity.save();\n  }\n\n  async findAll(): Promise {\n    return this.activityModel.find().exec();\n  }\n\n  async findOne(id: string): Promise {\n    const activity = await this.activityModel.findById(id).exec();\n    if (!activity) throw new NotFoundException(`Activity with ID ${id} not found`);\n    return activity;\n  }\n\n  async update(id: string, updateActivityDto: UpdateActivityDto): Promise {\n    const updatedActivity = await this.activityModel.findByIdAndUpdate(\n      id,\n      updateActivityDto,\n      { new: true },\n    );\n    if (!updatedActivity)\n      throw new NotFoundException(`Activity with ID ${id} not found`);\n    return updatedActivity;\n  }\n\n  async remove(id: string): Promise {\n    const result = await this.activityModel.findByIdAndDelete(id).exec();\n    if (!result) throw new NotFoundException(`Activity with ID ${id} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMemberDto.html":{"url":"classes/AddMemberDto.html","title":"class - AddMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/dto/add-member .dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/add-member .dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/add-member .dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/add-member .dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddMemberDto {\n    email: string;\n  userId: number;\n  role?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMemberDto-1.html":{"url":"classes/AddMemberDto-1.html","title":"class - AddMemberDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/dto/add-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/add-member.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/add-member.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/add-member.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddMemberDto {\n\temail: string;\n\tuserId: number;\n\trole?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                src/common/guards/api-keys.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/api-keys.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/api-keys.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\n\n@Injectable()\nexport class ApiKeyGuard implements CanActivate {\n  constructor(private readonly configService: ConfigService) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    // ✅ Strongly type the request\n    const request = context.switchToHttp().getRequest();\n\n    // ✅ Explicitly type header as string | undefined\n    const apiKey = request.headers['x-api-key'] as string | undefined;\n    const validApiKey = this.configService.get('API_KEY');\n\n    // ✅ Return boolean comparison\n    return apiKey === validApiKey;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nCommitmentsModule\n\nCommitmentsModule\n\nAppModule -->\n\nCommitmentsModule->AppModule\n\n\n\n\n\nDashboardModule\n\nDashboardModule\n\nAppModule -->\n\nDashboardModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nProjectModule\n\nProjectModule\n\nAppModule -->\n\nProjectModule->AppModule\n\n\n\n\n\nSubtaskModule\n\nSubtaskModule\n\nAppModule -->\n\nSubtaskModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nTeamsModule\n\nTeamsModule\n\nAppModule -->\n\nTeamsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nAppModule -->\n\nWorkspaceModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommentModule\n                        \n                        \n                            CommitmentsModule\n                        \n                        \n                            DashboardModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            ProjectModule\n                        \n                        \n                            SubtaskModule\n                        \n                        \n                            TaskModule\n                        \n                        \n                            TeamsModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WorkspaceModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database.module';\n\n// Feature Modules\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './users/users.module';\nimport { DashboardModule } from './dashboard/dashboard.module';\nimport { WorkspaceModule } from './workspace/workspace.module';\nimport { ColumnModule } from './columns/column.module';\nimport { TaskModule } from './tasks/task.module';\nimport { SubtaskModule } from './subtask/subtask.module';\nimport { CalendarModule } from './calendar/calendar.module';\nimport { CommentModule } from './comments/comment.module';\nimport { NotificationModule } from './notifications/notification.module';\nimport { CommitmentsModule } from './commitment/commitments.module';\nimport { TeamsModule } from './teams/teams.module';\nimport { ProjectModule } from './project/project.module';\n\n// Other providers\nimport { EventsGateway } from './events/events.gateway';\n\n@Module({\n  imports: [\n    // 🔧 Global Config\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n\n    // 🧠 Connect MongoDB (via Mongoose)\nMongooseModule.forRoot(process.env.MONGO_URI || 'mongodb://localhost:27017/scrumdb'),\n\n    // 🕒 For scheduled tasks\n    ScheduleModule.forRoot(),\n\n    // 🚀 Feature modules\n    AuthModule,\n    DatabaseModule,\n    UserModule,\n    DashboardModule,\n    WorkspaceModule,\n    ColumnModule,\n    TaskModule,\n    SubtaskModule,\n    CalendarModule,\n    CommentModule,\n    NotificationModule,\n    CommitmentsModule,\n    TeamsModule,\n    ProjectModule,\n  ],\n\n  providers: [EventsGateway],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    Async\n                                resendVerification\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(dto: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('forgot-password')@ApiOperation({summary: 'Request a password reset email'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: LocalAuthenticatedRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            LocalAuthenticatedRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiBody({type: RegisterDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resendVerification\n                        \n                    \n                \n            \n            \n                \n                        \n                    resendVerification(body: ResendVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-verification')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResendVerificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(dto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')@ApiOperation({summary: 'Reset password with token'})@ApiBody({type: ResetPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('verify-email')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\n/* eslint-disable prettier/prettier */\nimport {\n  Controller,\n  Post,\n  Body,\n  Request,\n  UseGuards,\n  Get,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { ResendVerificationDto } from './dto/resend-verification.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { User, UserDocument } from '../users/user.schema';\nimport { MailService } from './mail/mail.service';\nimport { ApiBody, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\n\ntype ResendVerificationUser = Omit & {\n  _id: Types.ObjectId;\n  email: string;\n  isEmailVerified: boolean;\n};\n\ninterface LocalAuthenticatedRequest extends Request {\n  user: UserDocument;\n}\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly jwtService: JwtService,\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n    private readonly mailService: MailService,\n  ) {}\n\n  @Post('login')\n  @UseGuards(AuthGuard('local'))\n  async login(@Request() req: LocalAuthenticatedRequest) {\n    return this.authService.login(req.user);\n  }\n\n  @Post('register')\n  @ApiBody({ type: RegisterDto })\n  async register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Get('verify-email')\n  async verifyEmail(@Body('token') token: string) {\n    if (!token) {\n      throw new BadRequestException('Token is required');\n    }\n    return this.authService.verifyEmail(token);\n  }\n\n  @Post('resend-verification')\n  async resendVerification(@Body() body: ResendVerificationDto) {\n    const user = (await this.userModel.findOne({ email: body.email }).exec()) as ResendVerificationUser | null;\n\n    if (!user) {\n      throw new BadRequestException('Email not found');\n    }\n\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already verified');\n    }\n\n    const token = this.jwtService.sign(\n      { sub: user._id.toString(), purpose: 'email_verification' },\n      { expiresIn: '1d' },\n    );\n\n    this.mailService.sendVerificationEmail(user.email, token);\n\n    return { message: 'New verification email sent' };\n  }\n\n  @Post('forgot-password')\n  @ApiOperation({ summary: 'Request a password reset email' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(@Body() dto: ForgotPasswordDto) {\n    return await this.authService.forgotPassword(dto.email);\n  }\n\n  @Post('reset-password')\n  @ApiOperation({ summary: 'Reset password with token' })\n  @ApiBody({ type: ResetPasswordDto })\n  async resetPassword(@Body() dto: ResetPasswordDto) {\n    return await this.authService.resetPassword(dto.token, dto.newPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nAuthModule -->\n\nMailService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { LocalStrategy } from './local.strategy';\nimport { MailService } from './mail/mail.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../users/user.schema';\n\n@Module({\n  imports: [\n    ConfigModule,\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET') || 'default_secret_key',\n        signOptions: { expiresIn: '7d' },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, LocalStrategy, MailService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserDocument)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport * as bcrypt from 'bcryptjs';\nimport { User, UserDocument } from '../users/user.schema';\nimport { RegisterDto } from './dto/register.dto';\n\ntype JwtPayload = { sub: string; email?: string; purpose?: string };\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUser(email: string, password: string): Promise {\n    const user = await this.userModel.findOne({ email }).exec();\n    if (!user) throw new UnauthorizedException('Invalid credentials');\n\n    const isPasswordValid = await bcrypt.compare(String(password), String(user.password));\n    if (!isPasswordValid) throw new UnauthorizedException('Invalid credentials');\n\n    return user;\n  }\n\n  async login(user: UserDocument) {\n    if (!user || !user._id) throw new UnauthorizedException('User not found');\n\n    const sub = user._id instanceof Types.ObjectId ? user._id.toHexString() : String(user._id);\n\n    const payload: JwtPayload = { sub, email: user.email };\n    const access_token: string = await this.jwtService.signAsync(payload);\n\n    return {\n      message: 'Login successful',\n      access_token,\n      user: {\n        id: sub,\n        email: user.email,\n        name: user.name,\n        isEmailVerified: !!user.isEmailVerified,\n      },\n    };\n  }\n\n  async register(registerDto: RegisterDto) {\n    const { name, email, password } = registerDto;\n\n    const existingUser = await this.userModel.findOne({ email }).exec();\n    if (existingUser) throw new BadRequestException('Email already exists');\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new this.userModel({\n      name,\n      email,\n      password: hashedPassword,\n      isEmailVerified: false,\n    });\n\n    await newUser.save();\n    return { message: 'User registered successfully' };\n  }\n\n  async forgotPassword(email: string) {\n    const user = await this.userModel.findOne({ email }).exec();\n    if (!user) throw new BadRequestException('No account found with this email');\n\n    const token = await this.jwtService.signAsync(\n      { sub: user._id, email: user.email },\n      { expiresIn: '15m' },\n    );\n\n    // TODO: send email with token link\n    return {\n      message: 'Password reset link has been sent to your email',\n      token, // remove later\n    };\n  }\n\n  async resetPassword(token: string, newPassword: string) {\n    let decoded;\n    try {\n      decoded = await this.jwtService.verifyAsync(token);\n    } catch {\n      throw new BadRequestException('Invalid or expired token');\n    }\n\n    const user = await this.userModel.findById(decoded.sub).exec();\n    if (!user) throw new BadRequestException('User not found');\n\n    user.password = await bcrypt.hash(newPassword, 10);\n    await user.save();\n\n    return { message: 'Password reset successfully' };\n  }\n\n  async verifyEmail(token: string) {\n    try {\n      const decoded = await this.jwtService.verifyAsync(token);\n      const user = await this.userModel.findById(decoded.sub).exec();\n\n      if (!user) throw new BadRequestException('Invalid token or user does not exist');\n      if (user.isEmailVerified) return { message: 'Email already verified' };\n\n      user.isEmailVerified = true;\n      await user.save();\n\n      return { message: 'Email verified successfully' };\n    } catch {\n      throw new BadRequestException('Invalid or expired token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedRequest.html":{"url":"interfaces/AuthenticatedRequest.html","title":"interface - AuthenticatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { DashboardService } from './dashboard.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CreateMeetingDto } from './dto/create-meeting.dto';\nimport { MeetingResponseDto } from './dto/meeting-response.dto';\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    userId: string;\n    email?: string;\n    [key: string]: any;\n  };\n}\n\n@Controller('dashboard')\n@UseGuards(JwtAuthGuard)\nexport class DashboardController {\n  constructor(private readonly dashboardService: DashboardService) {}\n\n  @Get('metrics')\n  getMetrics(@Req() req: AuthenticatedRequest) {\n    const userId = req.user.userId; \n    return this.dashboardService.getMetrics(userId);\n  }\n\n  @Get('meetings')\n  getMeetings(): Promise {\n    return this.dashboardService.getUpcomingMeetings();\n  }\n\n  @Post('meetings')\n  addMeeting(\n    @Body() dto: CreateMeetingDto,\n  ): Promise {\n    return this.dashboardService.addMeeting(dto);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/roles.guard.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from './roles.decorator';\nimport { Request } from 'express';\n\ninterface AuthenticatedUser {\n  id: string;\n  roles: string[];\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const required = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!required || required.length === 0) return true;\n\n    // ✅ Strongly type the request\n    const req = context.switchToHttp().getRequest();\n\n    const user = req.user;\n    if (!user || !Array.isArray(user.roles)) return false;\n\n    return required.some((role) => user.roles.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CalendarController.html":{"url":"controllers/CalendarController.html","title":"controller - CalendarController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  CalendarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/calendar.controller.ts\n        \n            \n                Prefix\n            \n            \n                calendar\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createTask\n                            \n                            \n                                    \n                                    Async\n                                deleteTask\n                            \n                            \n                                    \n                                getTasks\n                            \n                            \n                                    \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTask(dto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('tasks')\n                \n            \n\n                    \n                        \n                            Defined in src/calendar/calendar.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('tasks/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/calendar/calendar.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTasks(query: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tasks')\n                \n            \n\n                    \n                        \n                            Defined in src/calendar/calendar.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(id: string, dto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('tasks/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/calendar/calendar.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Query, Param, BadRequestException } from '@nestjs/common';\nimport { CalendarService } from './calendar.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskGateway } from './calendar.gateway';\n\n@Controller('calendar')\nexport class CalendarController {\n   constructor(\n    private readonly calendarService: CalendarService,\n    private readonly taskGateway: TaskGateway\n  ) {}\n\n  @Get('tasks')\n  getTasks(@Query() query: { viewMode: string; from: string; to: string }) {\n    return this.calendarService.getTasksInRange(query.viewMode, query.from, query.to);\n  }\n\n  @Post('tasks')\n   async createTask(@Body() dto: CreateTaskDto) {\n    if (dto.dueDate && new Date(dto.dueDate) \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CalendarModule.html":{"url":"classes/CalendarModule.html","title":"class - CalendarModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CalendarModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/calendar.module.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CalendarTask, CalendarTaskSchema } from './schemas/calendar-task.schema';\nimport { CalendarController } from './calendar.controller';\nimport { CalendarService } from './calendar.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: CalendarTask.name, schema: CalendarTaskSchema }\n    ]),\n  ],\n  providers: [CalendarService],\n  controllers: [CalendarController],\n  exports: [CalendarService],\n})\nexport class CalendarTaskModule {}\nexport class CalendarModule {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CalendarService.html":{"url":"injectables/CalendarService.html","title":"injectable - CalendarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CalendarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/calendar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getTasksInRange\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/calendar/calendar.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTask(dto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/calendar/calendar.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/calendar/calendar.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTasksInRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTasksInRange(viewMode: string, from: string, to: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/calendar/calendar.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                viewMode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                from\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(id: string, dto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/calendar/calendar.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { CalendarTask } from '../schemas/calendartask.schema';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\n\n@Injectable()\nexport class CalendarService {\n  constructor(\n    @InjectModel(CalendarTask.name)\n    private readonly taskModel: Model,\n  ) {}\n\n  async getTasksInRange(viewMode: string, from: string, to: string): Promise {\n    const fromDate = new Date(from);\n    const toDate = new Date(to);\n\n    if (isNaN(fromDate.getTime()) || isNaN(toDate.getTime())) {\n      throw new BadRequestException('Invalid date range');\n    }\n\n    const tasks = await this.taskModel\n      .find({\n        startDate: { $gte: fromDate },\n        dueDate: { $lte: toDate },\n      })\n      .populate('calendarUser', 'id name')\n      .sort({ startDate: 1 })\n      .exec();\n\n    return tasks;\n  }\n\n  async createTask(dto: CreateTaskDto): Promise {\n    try {\n      const task = new this.taskModel({\n        ...dto,\n        status: 'To Do',\n      });\n      return await task.save();\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new BadRequestException(`Failed to create task: ${error.message}`);\n      }\n      throw new BadRequestException('Failed to create task');\n    }\n  }\n\n  async updateTask(id: string, dto: UpdateTaskDto): Promise {\n    if (!Types.ObjectId.isValid(id)) {\n      throw new BadRequestException('Invalid task ID');\n    }\n\n    const updated = await this.taskModel\n      .findByIdAndUpdate(id, dto, { new: true })\n      .exec();\n    \n    if (!updated) {\n      throw new NotFoundException('Task not found');\n    }\n    return updated;\n  }\n\n  async deleteTask(id: string): Promise {\n    if (!Types.ObjectId.isValid(id)) {\n      throw new BadRequestException('Invalid task ID');\n    }\n\n    const result = await this.taskModel.findByIdAndDelete(id).exec();\n    if (!result) {\n      throw new NotFoundException('Task not found');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CalendarTask.html":{"url":"classes/CalendarTask.html","title":"class - CalendarTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CalendarTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/calendartask.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                assigneeId\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                    Optional\n                                dueDate\n                            \n                            \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    Optional\n                                startDate\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                workspaceId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        assigneeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'CalendarUser', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'To Do'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspaceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'CalendarWorkspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendartask.schema.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Comment } from 'src/comments/comment.schema';\n\n@Schema({ timestamps: true })\nexport class CalendarTask extends Document {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ type: Date, required: false })\n  dueDate?: Date;\n\n  @Prop({ type: Date, required: false })\n  startDate?: Date;\n\n  @Prop({ type: Date, required: false })\n  endDate?: Date;\n\n  @Prop({ default: 'To Do' })\n  status: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'CalendarWorkspace', required: true })\n  workspaceId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'CalendarUser', required: false })\n  assigneeId?: Types.ObjectId;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], default: [] })\n  comments?: Types.ObjectId[];\n}\n\nexport const CalendarTaskSchema = SchemaFactory.createForClass(CalendarTask);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CalendarTask-1.html":{"url":"classes/CalendarTask-1.html","title":"class - CalendarTask-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CalendarTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/schemas/calendar-task.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                calendarUser\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                dueDate\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        calendarUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/schemas/calendar-task.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/schemas/calendar-task.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/schemas/calendar-task.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/schemas/calendar-task.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'To Do'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/schemas/calendar-task.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/schemas/calendar-task.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\nexport type CalendarTaskDocument = CalendarTask & Document;\n\n@Schema()\nexport class CalendarTask {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop({ required: true })\n  startDate: Date;\n\n  @Prop({ required: true })\n  dueDate: Date;\n\n  @Prop({ default: 'To Do' })\n  status: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'User' })\n  calendarUser: Types.ObjectId;\n\n  // Add other properties as needed\n}\n\nexport const CalendarTaskSchema = SchemaFactory.createForClass(CalendarTask);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CalendarTaskModule.html":{"url":"modules/CalendarTaskModule.html","title":"module - CalendarTaskModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    CalendarTaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CalendarTaskModule\n\n\n\ncluster_CalendarTaskModule_exports\n\n\n\ncluster_CalendarTaskModule_providers\n\n\n\n\nCalendarService \n\nCalendarService \n\n\n\nCalendarTaskModule\n\nCalendarTaskModule\n\nCalendarService  -->\n\nCalendarTaskModule->CalendarService \n\n\n\n\n\nCalendarService\n\nCalendarService\n\nCalendarTaskModule -->\n\nCalendarService->CalendarTaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/calendar/calendar.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CalendarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CalendarController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CalendarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CalendarTask, CalendarTaskSchema } from './schemas/calendar-task.schema';\nimport { CalendarController } from './calendar.controller';\nimport { CalendarService } from './calendar.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: CalendarTask.name, schema: CalendarTaskSchema }\n    ]),\n  ],\n  providers: [CalendarService],\n  controllers: [CalendarController],\n  exports: [CalendarService],\n})\nexport class CalendarTaskModule {}\nexport class CalendarModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CalendarUser.html":{"url":"classes/CalendarUser.html","title":"class - CalendarUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CalendarUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/calendaruser.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                calendarTasks\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        calendarTasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendaruser.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendaruser.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendaruser.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendaruser.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendaruser.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendaruser.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Comment } from 'src/comments/comment.schema';\n\n@Schema({ timestamps: true })\nexport class CalendarUser extends Document {\n  @Prop({ unique: true, required: true })\n  email: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ default: true })\n  isActive: boolean;\n\n  // Relationship: one user → many calendar tasks\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'CalendarTask' }], default: [] })\n  calendarTasks?: Types.ObjectId[];\n\n  // Relationship: one user → many comments\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], default: [] })\n  comments?: Types.ObjectId[];\n}\n\nexport const CalendarUserSchema = SchemaFactory.createForClass(CalendarUser);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CalendarWorkspace.html":{"url":"classes/CalendarWorkspace.html","title":"class - CalendarWorkspace","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CalendarWorkspace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/calendarworkspace.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/calendarworkspace.schema.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class CalendarWorkspace extends Document {\n  @Prop({ required: true })\n  name: string;\n}\n\nexport const CalendarWorkspaceSchema = SchemaFactory.createForClass(CalendarWorkspace);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Column.html":{"url":"classes/Column.html","title":"class - Column","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            columns/entities/column.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                tasks\n                            \n                            \n                                    \n                                workspace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColumnName\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: ColumnName, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/entities/column.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/entities/column.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Task | Types.ObjectId)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/entities/column.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Workspace | Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/entities/column.schema.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Workspace } from '@/workspace/schemas/workspace.schema';\nimport { Task } from '@/tasks/schemas/task.schema';\n\nexport enum ColumnName {\n  TO_DO = 'To Do',\n  IN_PROGRESS = 'In Progress',\n  QA = 'QA',\n  BLOCKED = 'Blocked',\n  DONE = 'Done',\n}\n\n@Schema({ timestamps: true })\nexport class Column extends Document {\n  @Prop({ type: String, enum: ColumnName, required: true })\n  name: ColumnName;\n\n  @Prop({ type: Number, default: 0 })\n  order: number;\n\n  // 🔗 Relationship with Workspace\n  @Prop({ type: Types.ObjectId, ref: 'Workspace', required: true })\n  workspace: Workspace | Types.ObjectId;\n\n  // 🔗 Relationship with Tasks\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Task' }], default: [] })\n  tasks: (Task | Types.ObjectId)[];\n}\n\nexport type ColumnDocument = Column & Document;\nexport const ColumnSchema = SchemaFactory.createForClass(Column);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Column-1.html":{"url":"classes/Column-1.html","title":"class - Column-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            columns/schemas/column.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                tasks\n                            \n                            \n                                    \n                                workspace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColumnName\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: ColumnName, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/schemas/column.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/schemas/column.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WorkspaceTask[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/schemas/column.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Workspace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/schemas/column.schema.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Workspace } from '@/workspace/schemas/workspace.schema';\nimport { WorkspaceTask } from '@/workspace/schemas/workspacetask.schema';\n\nexport enum ColumnName {\n  TODO = 'TODO',\n  IN_PROGRESS = 'IN_PROGRESS',\n  REVIEW = 'REVIEW',\n  DONE = 'DONE',\n}\n\n@Schema({ timestamps: true })\nexport class Column extends Document {\n  @Prop({\n    type: String,\n    enum: ColumnName,\n    required: true,\n  })\n  name: ColumnName;\n\n  @Prop({ type: Number, default: 0 })\n  order: number;\n\n  @Prop({\n    type: [{ type: Types.ObjectId, ref: 'WorkspaceTask' }],\n    default: [],\n  })\n  tasks: WorkspaceTask[];\n\n  @Prop({ type: Types.ObjectId, ref: 'Workspace', required: true })\n  workspace: Workspace;\n}\n\nexport const ColumnSchema = SchemaFactory.createForClass(Column);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Column-2.html":{"url":"classes/Column-2.html","title":"class - Column-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/columns/schemas/column.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                tasks\n                            \n                            \n                                    \n                                workspace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColumnName\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: ColumnName, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/columns/schemas/column.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/columns/schemas/column.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Task | Types.ObjectId)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/columns/schemas/column.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Workspace | Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/columns/schemas/column.schema.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Workspace } from '../../workspace/workspace.schema';\nimport { Task } from '../../tasks/task.schema';\n\nexport enum ColumnName {\n  TO_DO = 'To Do',\n  IN_PROGRESS = 'In Progress',\n  QA = 'QA',\n  BLOCKED = 'Blocked',\n  DONE = 'Done',\n}\n\n@Schema({ timestamps: true })\nexport class Column extends Document {\n  @Prop({\n    type: String,\n    enum: ColumnName,\n    required: true,\n  })\n  name: ColumnName;\n\n  @Prop({ type: Number, default: 0 })\n  order: number;\n\n  @Prop({ type: Types.ObjectId, ref: 'Workspace', required: true })\n  workspace: Workspace | Types.ObjectId;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Task' }], default: [] })\n  tasks: (Task | Types.ObjectId)[];\n}\n\nexport const ColumnSchema = SchemaFactory.createForClass(Column);\nexport const ColumnModule = SchemaFactory.createForClass(Column);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ColumnController.html":{"url":"controllers/ColumnController.html","title":"controller - ColumnController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  ColumnController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            columns/column.controller.ts\n        \n            \n                Prefix\n            \n            \n                columns\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(workspaceId: string, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':workspaceId')\n                \n            \n\n                    \n                        \n                            Defined in columns/column.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Post, Param, Body } from '@nestjs/common';\nimport { ColumnService } from './column.service';\nimport { Column } from './schemas/column.schema'; \n\n@Controller('columns')\nexport class ColumnController {\n  constructor(private readonly columnService: ColumnService) {}\n\n  @Post(':workspaceId')\n  create(\n    @Param('workspaceId') workspaceId: string, \n    @Body('name') name: string,\n  ): Promise { \n    return this.columnService.create(workspaceId, name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ColumnController-1.html":{"url":"controllers/ColumnController-1.html","title":"controller - ColumnController-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  ColumnController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/columns/column.controller.ts\n        \n            \n                Prefix\n            \n            \n                columns\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(workspaceId: string, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':workspaceId')\n                \n            \n\n                    \n                        \n                            Defined in src/columns/column.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Post, Body, Param } from '@nestjs/common';\nimport { ColumnService } from './column.service';\nimport { Column } from './schemas/column.schema';\n\n@Controller('columns')\nexport class ColumnController {\n  constructor(private readonly columnService: ColumnService) {}\n\n  @Post(':workspaceId')\n  async create(\n    @Param('workspaceId') workspaceId: string,\n    @Body('name') name: string,\n  ): Promise {\n    return this.columnService.create(workspaceId, name); // Remove the + operator\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColumnGateway.html":{"url":"classes/ColumnGateway.html","title":"class - ColumnGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColumnGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            columns/column.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastColumnUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in columns/column.gateway.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastColumnUpdate\n                        \n                    \n                \n            \n            \n                \nbroadcastColumnUpdate(event: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in columns/column.gateway.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class ColumnGateway {\n  @WebSocketServer() server: Server;\n\n  broadcastColumnUpdate(event: string, payload: any) {\n    this.server.emit(event, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColumnGateway-1.html":{"url":"classes/ColumnGateway-1.html","title":"class - ColumnGateway-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColumnGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/columns/column.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastColumnUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/columns/column.gateway.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastColumnUpdate\n                        \n                    \n                \n            \n            \n                \nbroadcastColumnUpdate(event: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/columns/column.gateway.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class ColumnGateway {\n  @WebSocketServer() server: Server;\n\n  broadcastColumnUpdate(event: string, payload: any) {\n    this.server.emit(event, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ColumnModule.html":{"url":"modules/ColumnModule.html","title":"module - ColumnModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    ColumnModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ColumnModule\n\n\n\ncluster_ColumnModule_providers\n\n\n\ncluster_ColumnModule_exports\n\n\n\n\nColumnService \n\nColumnService \n\n\n\nColumnModule\n\nColumnModule\n\nColumnService  -->\n\nColumnModule->ColumnService \n\n\n\n\n\nColumnService\n\nColumnService\n\nColumnModule -->\n\nColumnService->ColumnModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            columns/column.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ColumnService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ColumnController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ColumnService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ColumnService } from './column.service';\nimport { ColumnController } from './column.controller';\nimport { Workspace, WorkspaceSchema } from '@/workspace/schemas/workspace.schema';\nimport { WorkspaceSubtask, WorkspaceSubtaskSchema } from 'src/workspace/schemas/WorkspaceSubtask.schema';\nimport { ColumnGateway } from './column.gateway';\nimport { Column, ColumnSchema } from '@/columns/schemas/column.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Column.name, schema: ColumnSchema },\n      { name: Workspace.name, schema: WorkspaceSchema },\n      { name: WorkspaceSubtask.name, schema: WorkspaceSubtaskSchema },\n    ]),\n  ],\n  controllers: [ColumnController],\n  providers: [ColumnService, ColumnGateway],\n  exports: [ColumnService],\n})\nexport class ColumnModule {}\n\nMongooseModule.forFeature([\n  { name: Column.name, schema: ColumnSchema },\n  { name: Workspace.name, schema: WorkspaceSchema },\n])\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ColumnService.html":{"url":"injectables/ColumnService.html","title":"injectable - ColumnService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ColumnService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            columns/column.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(columnModel: Model, workspaceModel: Model, columnGateway: ColumnGateway)\n                    \n                \n                        \n                            \n                                Defined in columns/column.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        columnModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        workspaceModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        columnGateway\n                                                  \n                                                        \n                                                                        ColumnGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(workspaceId: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in columns/column.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Column, ColumnName } from './schemas/column.schema';\nimport { Workspace } from '@/workspace/schemas/workspace.schema';\nimport { ColumnGateway } from './column.gateway';\n\n@Injectable()\nexport class ColumnService {\n  constructor(\n    @InjectModel(Column.name)\n    private readonly columnModel: Model,\n\n    @InjectModel(Workspace.name)\n    private readonly workspaceModel: Model,\n\n    private readonly columnGateway: ColumnGateway,\n  ) {}\n\n  async create(workspaceId: string, name: string): Promise {\n    // Check if workspace exists\n    const workspace = await this.workspaceModel.findById(workspaceId);\n    if (!workspace) {\n      throw new NotFoundException(`Workspace with ID ${workspaceId} not found`);\n    }\n\n    // Validate column name\n    if (!Object.values(ColumnName).includes(name as ColumnName)) {\n      throw new BadRequestException(`Invalid column name: ${name}`);\n    }\n\n    // Create new column document\n    const column = new this.columnModel({\n      name: name as ColumnName,\n      workspace: workspace._id,\n      order: 0,\n      tasks: [],\n    });\n\n    await column.save();\n\n    // Broadcast event via WebSocket\n    this.columnGateway.broadcastColumnUpdate('column.created', column);\n\n    return column;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ColumnService-1.html":{"url":"injectables/ColumnService-1.html","title":"injectable - ColumnService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ColumnService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/columns/column.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(columnModel: Model, workspaceModel: Model, columnGateway: ColumnGateway)\n                    \n                \n                        \n                            \n                                Defined in src/columns/column.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        columnModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        workspaceModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        columnGateway\n                                                  \n                                                        \n                                                                        ColumnGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(workspaceId: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/columns/column.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { Column, ColumnName } from './schemas/column.schema';\nimport { Workspace } from '../workspace/workspace.schema';\nimport { ColumnGateway } from './column.gateway';\n\n@Injectable()\nexport class ColumnService {\n  constructor(\n    @InjectModel(Column.name)\n    private readonly columnModel: Model,\n\n    @InjectModel(Workspace.name)\n    private readonly workspaceModel: Model,\n\n    private readonly columnGateway: ColumnGateway,\n  ) {}\n\n  async create(workspaceId: string, name: string): Promise {\n    // Validate workspaceId\n    if (!Types.ObjectId.isValid(workspaceId)) {\n      throw new BadRequestException(`Invalid workspace ID format: ${workspaceId}`);\n    }\n\n    // Check if workspace exists\n    const workspace = await this.workspaceModel.findById(workspaceId);\n    if (!workspace) {\n      throw new NotFoundException(`Workspace with ID ${workspaceId} not found`);\n    }\n\n    // Validate column name\n    if (!Object.values(ColumnName).includes(name as ColumnName)) {\n      throw new BadRequestException(`Invalid column name: ${name}`);\n    }\n\n    // Create the column document\n    const column = new this.columnModel({\n      name: name as ColumnName,\n      workspace: workspace._id,\n      order: 0,\n      tasks: [],\n    });\n\n    // Save to DB\n    const savedColumn = await column.save();\n\n    // Broadcast real-time event\n    this.columnGateway.broadcastColumnUpdate('column.created', savedColumn);\n\n    return savedColumn;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                taskId\n                            \n                            \n                                    \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        taskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Task', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\n@Schema({ timestamps: true }) // Adds createdAt & updatedAt automatically\nexport class Comment extends Document {\n  @Prop({ type: String, required: true })\n  content: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  userId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'Task', required: true })\n  taskId: Types.ObjectId;\n\n  @Prop({ type: Date, default: Date.now })\n  createdAt?: Date;\n\n  @Prop({ type: Date })\n  updatedAt?: Date;\n}\n\nexport const CommentSchema = SchemaFactory.createForClass(Comment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.controller.ts\n        \n            \n                Prefix\n            \n            \n                tasks/:taskId/comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addComment\n                            \n                            \n                                    \n                                deleteComment\n                            \n                            \n                                    \n                                editComment\n                            \n                            \n                                    \n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(taskId: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(taskId: string, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':commentId')\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        editComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    editComment(taskId: string, commentId: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':commentId')\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(taskId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Post, Get, Param, Body,Put, Delete } from '@nestjs/common';\nimport { CommentService } from './comment.service';\n\n@Controller('tasks/:taskId/comments')\nexport class CommentController {\n  constructor(private readonly commentService: CommentService) {}\n\n  @Post()\n  addComment(\n    @Param('taskId') taskId: string,\n    @Body() body: { content: string; userId: string },\n  ) {\n    return this.commentService.addComment(taskId, body.content, body.userId);\n  }\n\n  @Put(':commentId')\n  editComment(\n    @Param('taskId') taskId: string,\n    @Param('commentId') commentId: string,\n    @Body() body: { content: string },\n  ) {\n    \n    return this.commentService.editComment(commentId, body.content, taskId);\n  }\n\n   @Delete(':commentId')\n  deleteComment(\n    @Param('taskId') taskId: string,\n    @Param('commentId') commentId: string,\n  ) {\n    return this.commentService.deleteComment(commentId, taskId);\n  }\n\n  @Get()\n  getComments(@Param('taskId') taskId: string) {\n    return this.commentService.getComments(taskId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentGateway.html":{"url":"classes/CommentGateway.html","title":"class - CommentGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleAddComment\n                            \n                            \n                                    \n                                    Async\n                                handleDeleteComment\n                            \n                            \n                                    \n                                    Async\n                                handleEditComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentService: CommentService)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comment.gateway.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentService\n                                                  \n                                                        \n                                                                        CommentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.gateway.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleAddComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAddComment(payload: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('addComment')\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.gateway.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDeleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDeleteComment(payload: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('deleteComment')\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.gateway.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleEditComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEditComment(payload: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('editComment')\n                \n            \n\n                    \n                        \n                            Defined in src/comments/comment.gateway.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { CommentService } from './comment.service';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n  },\n})\nexport class CommentGateway {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(private readonly commentService: CommentService) {}\n\n  // ✅ Add comment\n  @SubscribeMessage('addComment')\n  async handleAddComment(\n    @MessageBody() payload: { taskId: string; userId: string; content: string },\n  ) {\n    const comment = await this.commentService.addComment(\n      payload.taskId,\n      payload.userId,\n      payload.content,\n    );\n\n    // Broadcast new comment to task room\n    this.server.emit(`task:${payload.taskId}:commentAdded`, comment);\n    return comment;\n  }\n\n  // ✅ Edit comment\n  @SubscribeMessage('editComment')\n  async handleEditComment(\n    @MessageBody() payload: { commentId: string; userId: string; content: string },\n  ) {\n    const updatedComment = await this.commentService.editComment(\n      payload.commentId,\n      payload.userId,\n      payload.content,\n    );\n\n    // Use taskId since there's no 'task' field in schema\n    if (updatedComment.taskId) {\n      this.server.emit(\n        `task:${updatedComment.taskId.toString()}:commentUpdated`,\n        updatedComment,\n      );\n    }\n\n    return updatedComment;\n  }\n\n  // ✅ Delete comment\n  @SubscribeMessage('deleteComment')\n  async handleDeleteComment(\n    @MessageBody() payload: { commentId: string; taskId: string },\n  ) {\n    await this.commentService.deleteComment(payload.commentId, payload.taskId);\n\n    if (payload.taskId) {\n      this.server.emit(`task:${payload.taskId}:commentDeleted`, {\n        commentId: payload.commentId,\n      });\n    }\n\n    return { message: 'Comment deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_CommentModule_exports\n\n\n\n\nCommentService \n\nCommentService \n\n\n\nCommentModule\n\nCommentModule\n\nCommentService  -->\n\nCommentModule->CommentService \n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Comment, CommentSchema } from './comment.schema';\nimport { CommentService } from './comment.service';\nimport { CommentController } from './comment.controller';\nimport { Task, TaskSchema } from '../tasks/schemas/task.schema';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Comment.name, schema: CommentSchema },\n    { name: Task.name, schema: TaskSchema },])],\n  controllers: [CommentController],\n  providers: [CommentService],\n  exports: [CommentService],\n})\nexport class CommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                editComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentModel: Model, taskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comment.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    addComment(taskId: string, userId: string, content: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/comment.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/comment.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(commentId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/comment.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    editComment(commentId: string, newContent: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/comment.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comments/comment.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { Comment } from './comment.schema';\nimport { Task } from '../tasks/task.schema';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectModel(Comment.name) private readonly commentModel: Model,\n    @InjectModel(Task.name) private readonly taskModel: Model,\n  ) {}\n\n  // ✅ Create new comment\n  async create(data: Partial) {\n    const comment = new this.commentModel(data);\n    return comment.save();\n  }\n\n  // ✅ Add comment to a task\n  async addComment(taskId: string, userId: string, content: string) {\n    if (!Types.ObjectId.isValid(taskId)) {\n      throw new BadRequestException('Invalid task ID format');\n    }\n\n    const task = await this.taskModel.findById(taskId);\n    if (!task) {\n      throw new BadRequestException(`Task with ID ${taskId} not found`);\n    }\n\n    const comment = new this.commentModel({\n      content,\n      userId: new Types.ObjectId(userId),\n      taskId: new Types.ObjectId(taskId),\n      createdAt: new Date(),\n    });\n\n    const savedComment = await comment.save();\n\n    if (Array.isArray(task.comments)) {\n      task.comments.push(savedComment._id as Types.ObjectId);\n      await task.save();\n    }\n\n    return savedComment;\n  }\n\n  // ✅ Get all comments for a specific task\n  async getComments(taskId: string) {\n    return this.commentModel.find({ taskId }).populate('userId').exec();\n  }\n\n  // ✅ Edit a comment (update content)\n  async editComment(commentId: string, newContent: string, userId: string) {\n    if (!Types.ObjectId.isValid(commentId)) {\n      throw new BadRequestException('Invalid comment ID format');\n    }\n\n    const comment = await this.commentModel.findById(commentId);\n    if (!comment) {\n      throw new NotFoundException('Comment not found');\n    }\n\n    // Optional: Restrict editing to the comment's owner\n    if (comment.userId.toString() !== userId.toString()) {\n      throw new BadRequestException('You can only edit your own comments');\n    }\n\n    comment.content = newContent;\n    comment.updatedAt = new Date();\n\n    return comment.save();\n  }\n\n  // ✅ Delete a comment\n  async deleteComment(commentId: string, userId: string) {\n    if (!Types.ObjectId.isValid(commentId)) {\n      throw new BadRequestException('Invalid comment ID format');\n    }\n\n    const comment = await this.commentModel.findById(commentId);\n    if (!comment) {\n      throw new NotFoundException('Comment not found');\n    }\n\n    // Optional: Restrict deletion to the comment's owner\n    if (comment.userId.toString() !== userId.toString()) {\n      throw new BadRequestException('You can only delete your own comments');\n    }\n\n    // Remove comment reference from task.comments (if exists)\n    await this.taskModel.updateOne(\n      { _id: comment.taskId },\n      { $pull: { comments: comment._id } }\n    );\n\n    await this.commentModel.findByIdAndDelete(commentId);\n\n    return { message: 'Comment deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Commitment.html":{"url":"classes/Commitment.html","title":"class - Commitment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Commitment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/commitments.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                archived\n                            \n                            \n                                    \n                                    Optional\n                                assigneeId\n                            \n                            \n                                    \n                                completed\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                dueDate\n                            \n                            \n                                    \n                                    Optional\n                                linkedTaskId\n                            \n                            \n                                    \n                                priority\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        archived\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        assigneeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        linkedTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"High\" | \"Medium\" | \"Low\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({enum: undefined, default: 'Medium'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommitmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({enum: CommitmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\nexport enum CommitmentStatus {\n  NOT_STARTED = 'Not Started',\n  IN_PROGRESS = 'In Progress',\n  COMPLETED = 'Completed',\n}\n\n@Schema({ timestamps: true })\nexport class Commitment extends Document {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ default: false })\n  completed: boolean;\n\n  @Prop({ type: Date })\n  dueDate?: Date;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: false })\n  assigneeId?: string;\n\n  @Prop()\n  linkedTaskId?: string;\n\n  @Prop({ enum: ['High', 'Medium', 'Low'], default: 'Medium' })\n  priority: 'High' | 'Medium' | 'Low';\n\n  @Prop({ enum: CommitmentStatus, default: CommitmentStatus.NOT_STARTED })\n  status: CommitmentStatus;\n\n  @Prop({ default: false })\n  archived: boolean;\n}\n\nexport const CommitmentSchema = SchemaFactory.createForClass(Commitment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommitmentQuery.html":{"url":"interfaces/CommitmentQuery.html","title":"interface - CommitmentQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommitmentQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/commitments.controller.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assigneeId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            priority\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            q\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sort\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tab\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assigneeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assigneeId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        q\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        q:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sort:         SortType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tab\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tab:         TabType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TabType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Query,\n  Param,\n  Patch,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { CommitmentsService } from './commitments.service';\nimport { CreateCommitmentDto } from './dto/create-commitment.dto';\nimport { UpdateCommitmentDto } from './dto/update-commitment.dto';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\n// ✅ Match the expected shape from the service\ntype TabType = 'All' | 'Upcoming' | 'Due Today' | 'Completed' | 'Archived';\ntype SortType = 'dueDate' | 'assignee' | 'updatedAt';\n\ninterface CommitmentQuery {\n  tab?: TabType;\n  assigneeId?: string;\n  q?: string;\n  priority?: string;\n  sort?: SortType;\n}\n\n@Controller('commitments')\nexport class CommitmentsController {\n  constructor(private readonly svc: CommitmentsService) {}\n\n  @Post()\n  async create(@Body() dto: CreateCommitmentDto): Promise {\n    return await this.svc.create(dto);\n  }\n\n  @Get(':id')\n  async get(@Param('id') id: string): Promise {\n    return await this.svc.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() dto: UpdateCommitmentDto,\n  ): Promise {\n    return await this.svc.update(id, dto);\n  }\n\n  @Get()\n  async list(@Query() q: CommitmentQuery): Promise {\n    const params = {\n      tab: q.tab,\n      assigneeId: q.assigneeId,\n      q: q.q,\n      priority: q.priority,\n      sort: q.sort,\n    };\n\n    return await this.svc.list(params);\n  }\n\n  @Patch(':id/archive')\n  async archive(@Param('id') id: string): Promise {\n    return await this.svc.archive(id);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'scrum_master')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    await this.svc.remove(id);\n  }\n\n  @Patch(':id/complete')\n  async complete(@Param('id') id: string): Promise {\n    return await this.svc.markComplete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommitmentsController.html":{"url":"controllers/CommitmentsController.html","title":"controller - CommitmentsController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  CommitmentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/commitments.controller.ts\n        \n            \n                Prefix\n            \n            \n                commitments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                archive\n                            \n                            \n                                    \n                                    Async\n                                complete\n                            \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                get\n                            \n                            \n                                    \n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        archive\n                        \n                    \n                \n            \n            \n                \n                        \n                    archive(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/archive')\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        complete\n                        \n                    \n                \n            \n            \n                \n                        \n                    complete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/complete')\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCommitmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCommitmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(q: CommitmentQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            CommitmentQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'scrum_master')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateCommitmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateCommitmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Query,\n  Param,\n  Patch,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { CommitmentsService } from './commitments.service';\nimport { CreateCommitmentDto } from './dto/create-commitment.dto';\nimport { UpdateCommitmentDto } from './dto/update-commitment.dto';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\n// ✅ Match the expected shape from the service\ntype TabType = 'All' | 'Upcoming' | 'Due Today' | 'Completed' | 'Archived';\ntype SortType = 'dueDate' | 'assignee' | 'updatedAt';\n\ninterface CommitmentQuery {\n  tab?: TabType;\n  assigneeId?: string;\n  q?: string;\n  priority?: string;\n  sort?: SortType;\n}\n\n@Controller('commitments')\nexport class CommitmentsController {\n  constructor(private readonly svc: CommitmentsService) {}\n\n  @Post()\n  async create(@Body() dto: CreateCommitmentDto): Promise {\n    return await this.svc.create(dto);\n  }\n\n  @Get(':id')\n  async get(@Param('id') id: string): Promise {\n    return await this.svc.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() dto: UpdateCommitmentDto,\n  ): Promise {\n    return await this.svc.update(id, dto);\n  }\n\n  @Get()\n  async list(@Query() q: CommitmentQuery): Promise {\n    const params = {\n      tab: q.tab,\n      assigneeId: q.assigneeId,\n      q: q.q,\n      priority: q.priority,\n      sort: q.sort,\n    };\n\n    return await this.svc.list(params);\n  }\n\n  @Patch(':id/archive')\n  async archive(@Param('id') id: string): Promise {\n    return await this.svc.archive(id);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'scrum_master')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise {\n    await this.svc.remove(id);\n  }\n\n  @Patch(':id/complete')\n  async complete(@Param('id') id: string): Promise {\n    return await this.svc.markComplete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitmentsCron.html":{"url":"injectables/CommitmentsCron.html","title":"injectable - CommitmentsCron","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitmentsCron\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/commitments.cron.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleArchive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(svc: CommitmentsService)\n                    \n                \n                        \n                            \n                                Defined in src/commitment/commitments.cron.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        svc\n                                                  \n                                                        \n                                                                        CommitmentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleArchive\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleArchive()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_HOUR)\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.cron.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CommitmentsCron.name)\n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.cron.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { CommitmentsService } from './commitments.service';\n\n@Injectable()\nexport class CommitmentsCron {\n  private readonly logger = new Logger(CommitmentsCron.name);\n\n  constructor(private readonly svc: CommitmentsService) {}\n\n  // run every hour\n@Cron(CronExpression.EVERY_HOUR)\n  async handleArchive() {\n    this.logger.log('Running archiveOldCompleted');\n    try {\n      const res = await this.svc.archiveOldCompleted();\n      this.logger.log(`Archived ${res.archived} commitments`);\n    } catch (err) {\n      this.logger.error('Error in archive cron', err);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitmentsGateway.html":{"url":"classes/CommitmentsGateway.html","title":"class - CommitmentsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitmentsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/commitments.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcast\n                            \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleJoin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/commitments.gateway.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcast\n                        \n                    \n                \n            \n            \n                \nbroadcast(event: string, payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.gateway.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.gateway.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.gateway.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoin\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoin(client: Socket, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinRoom')\n                \n            \n\n                    \n                        \n                            Defined in src/commitment/commitments.gateway.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class CommitmentsGateway {\n  @WebSocketServer()\n  server: Server;\n\n  // ✅ Typed client socket\n  handleConnection(client: Socket) {\n    console.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    console.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinRoom')\n  async handleJoin(@ConnectedSocket() client: Socket, @MessageBody() data: { roomId: string }) {\n    await client.join(data.roomId);\n    this.server.to(data.roomId).emit('joined', { clientId: client.id });\n  }\n\n  broadcast(event: string, payload: unknown): void {\n    this.server.emit(event, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommitmentsModule.html":{"url":"modules/CommitmentsModule.html","title":"module - CommitmentsModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    CommitmentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommitmentsModule\n\n\n\ncluster_CommitmentsModule_providers\n\n\n\ncluster_CommitmentsModule_exports\n\n\n\n\nCommitmentsService \n\nCommitmentsService \n\n\n\nCommitmentsModule\n\nCommitmentsModule\n\nCommitmentsService  -->\n\nCommitmentsModule->CommitmentsService \n\n\n\n\n\nCommitmentsCron\n\nCommitmentsCron\n\nCommitmentsModule -->\n\nCommitmentsCron->CommitmentsModule\n\n\n\n\n\nCommitmentsService\n\nCommitmentsService\n\nCommitmentsModule -->\n\nCommitmentsService->CommitmentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commitment/commitments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommitmentsCron\n                        \n                        \n                            CommitmentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommitmentsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommitmentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Commitment, CommitmentSchema } from './commitments.schema';\nimport { CommitmentsService } from './commitments.service';\nimport { CommitmentsController } from './commitments.controller';\nimport { CommitmentsGateway } from './commitments.gateway';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { CommitmentsCron } from './commitments.cron';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Commitment.name, schema: CommitmentSchema }]),\n    ScheduleModule.forRoot(),\n  ],\n  providers: [CommitmentsService, CommitmentsGateway, CommitmentsCron],\n  controllers: [CommitmentsController],\n  exports: [CommitmentsService],\n})\nexport class CommitmentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitmentsService.html":{"url":"injectables/CommitmentsService.html","title":"injectable - CommitmentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitmentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/commitments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                archive\n                            \n                            \n                                    Async\n                                archiveOldCompleted\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                markComplete\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitmentModel: Model, gateway: CommitmentsGateway)\n                    \n                \n                        \n                            \n                                Defined in src/commitment/commitments.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gateway\n                                                  \n                                                        \n                                                                        CommitmentsGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        archive\n                        \n                    \n                \n            \n            \n                \n                        \n                    archive(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        archiveOldCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    archiveOldCompleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCommitmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCommitmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markComplete\n                        \n                    \n                \n            \n            \n                \n                        \n                    markComplete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateCommitmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/commitments.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateCommitmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Commitment, CommitmentStatus } from './commitments.schema';\nimport { CreateCommitmentDto } from './dto/create-commitment.dto';\nimport { UpdateCommitmentDto } from './dto/update-commitment.dto';\nimport { CommitmentsGateway } from './commitments.gateway';\n\n@Injectable()\nexport class CommitmentsService {\n  constructor(\n    @InjectModel(Commitment.name)\n    private readonly commitmentModel: Model,\n    private readonly gateway: CommitmentsGateway,\n  ) {}\n\n  // ✅ Create\n  async create(dto: CreateCommitmentDto): Promise {\n    const commitment = new this.commitmentModel({\n      title: dto.title,\n      description: dto.description ?? null,\n      dueDate: dto.dueDate ? new Date(dto.dueDate) : null,\n      assigneeId: dto.assigneeId ?? null,\n      linkedTaskId: dto.linkedTaskId ?? null,\n      priority: dto.priority ?? 'Medium',\n      status: dto.status ?? CommitmentStatus.NOT_STARTED,\n      archived: false,\n      completed: false,\n    });\n\n    const saved = await commitment.save();\n    this.gateway.broadcast('commitment.created', saved);\n    return saved;\n  }\n\n  // ✅ Find One\n  async findOne(id: string): Promise {\n    const item = await this.commitmentModel.findById(id).exec();\n    if (!item) throw new NotFoundException('Commitment not found');\n    return item;\n  }\n\n  // ✅ List / Filter\n  async list(params: {\n    tab?: 'All' | 'Upcoming' | 'Due Today' | 'Completed' | 'Archived';\n    assigneeId?: string;\n    q?: string;\n    priority?: string;\n    sort?: 'dueDate' | 'assignee' | 'updatedAt';\n  } = {}) {\n    const filter: Record = {};\n    const now = new Date();\n\n    // Text search\n    if (params.q) filter.title = { $regex: params.q, $options: 'i' };\n\n    // Assignee\n    if (params.assigneeId) filter.assigneeId = params.assigneeId;\n\n    // Priority\n    if (params.priority) filter.priority = params.priority;\n\n    // Tabs\n    if (params.tab && params.tab !== 'All') {\n      if (params.tab === 'Upcoming') {\n        filter.dueDate = { $gt: now };\n        filter.archived = false;\n      } else if (params.tab === 'Due Today') {\n        const start = new Date(now);\n        start.setHours(0, 0, 0, 0);\n        const end = new Date(now);\n        end.setHours(23, 59, 59, 999);\n        filter.dueDate = { $gte: start, $lte: end };\n        filter.archived = false;\n      } else if (params.tab === 'Completed') {\n        filter.status = CommitmentStatus.COMPLETED;\n        filter.archived = false;\n      } else if (params.tab === 'Archived') {\n        filter.archived = true;\n      }\n    }\n\n    // Sorting\n    const sort: Record = {};\n    if (params.sort === 'dueDate') sort.dueDate = 1;\n    else if (params.sort === 'assignee') sort.assigneeId = 1;\n    else sort.updatedAt = -1;\n\n    return this.commitmentModel.find(filter).sort(sort).exec();\n  }\n\n  // ✅ Update\n  async update(id: string, dto: UpdateCommitmentDto): Promise {\n    const item = await this.findOne(id);\n\n    if (dto.title !== undefined) item.title = dto.title;\n    if (dto.description !== undefined) item.description = dto.description;\n    if (dto.dueDate !== undefined) item.dueDate = new Date(dto.dueDate);\n    if (dto.assigneeId !== undefined) item.assigneeId = dto.assigneeId ?? null;\n    if (dto.linkedTaskId !== undefined) item.linkedTaskId = dto.linkedTaskId ?? null;\n    if (dto.priority !== undefined) item.priority = dto.priority;\n    if (dto.status !== undefined) item.status = dto.status;\n    if (item.status === CommitmentStatus.COMPLETED) item.completed = true;\n    if (dto.archived !== undefined) item.archived = dto.archived;\n\n    const saved = await item.save();\n    this.gateway.broadcast('commitment.updated', saved);\n    return saved;\n  }\n\n  // ✅ Mark Complete\n  async markComplete(id: string): Promise {\n    const item = await this.findOne(id);\n    if (item.status === CommitmentStatus.COMPLETED) return item;\n\n    item.status = CommitmentStatus.COMPLETED;\n    item.completed = true;\n\n    const saved = await item.save();\n    this.gateway.broadcast('commitment.completed', saved);\n    return saved;\n  }\n\n  // ✅ Archive\n  async archive(id: string): Promise {\n    const item = await this.findOne(id);\n    if (!item.archived) {\n      item.archived = true;\n      const saved = await item.save();\n      this.gateway.broadcast('commitment.archived', saved);\n      return saved;\n    }\n    return item;\n  }\n\n  // ✅ Delete\n  async remove(id: string) {\n    const item = await this.findOne(id);\n    await this.commitmentModel.deleteOne({ _id: item._id }).exec();\n    this.gateway.broadcast('commitment.deleted', { id });\n    return { success: true };\n  }\n\n  // ✅ Archive Old Completed (24 hrs)\n  async archiveOldCompleted() {\n    const boundary = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    const old = await this.commitmentModel.find({\n      status: CommitmentStatus.COMPLETED,\n      updatedAt: { $lte: boundary },\n    });\n\n    for (const it of old) {\n      it.archived = true;\n      await it.save();\n      this.gateway.broadcast('commitment.archived', it);\n    }\n\n    return { archived: old.length };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CompoDocConfig.html":{"url":"interfaces/CompoDocConfig.html","title":"interface - CompoDocConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CompoDocConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            documentation/template-playground/template-playground.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customFavicon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableConstructors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableCoverage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableDependencies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableDomTree\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableFilePath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableGraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableInternal\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableLifeCycleHooks\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableMainGraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableOverview\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disablePrivate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableProperties\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableProtected\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableRoutesGraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableSearch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableSourceCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableStyleTab\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableTemplateTab\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideDarkModeToggle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideGenerator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includesName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            minimal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customFavicon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customFavicon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableConstructors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableConstructors:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableCoverage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableCoverage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableDependencies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableDependencies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableDomTree\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableDomTree:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableFilePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableFilePath:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableGraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableGraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableInternal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableInternal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableLifeCycleHooks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableLifeCycleHooks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableMainGraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableMainGraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableOverview\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableOverview:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disablePrivate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disablePrivate:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableProperties\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableProperties:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableProtected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableProtected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableRoutesGraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableRoutesGraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableSearch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableSearch:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableSourceCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableSourceCode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableStyleTab\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableStyleTab:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableTemplateTab\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableTemplateTab:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideDarkModeToggle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideDarkModeToggle:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideGenerator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideGenerator:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includes:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includesName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includesName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minimal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minimal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\ninterface Template {\n  name: string;\n  path: string;\n  type: 'template' | 'partial';\n}\n\ninterface Session {\n  sessionId: string;\n  success: boolean;\n  message: string;\n}\n\ninterface CompoDocConfig {\n  hideGenerator?: boolean;\n  disableSourceCode?: boolean;\n  disableGraph?: boolean;\n  disableCoverage?: boolean;\n  disablePrivate?: boolean;\n  disableProtected?: boolean;\n  disableInternal?: boolean;\n  disableLifeCycleHooks?: boolean;\n  disableConstructors?: boolean;\n  disableRoutesGraph?: boolean;\n  disableSearch?: boolean;\n  disableDependencies?: boolean;\n  disableProperties?: boolean;\n  disableDomTree?: boolean;\n  disableTemplateTab?: boolean;\n  disableStyleTab?: boolean;\n  disableMainGraph?: boolean;\n  disableFilePath?: boolean;\n  disableOverview?: boolean;\n  hideDarkModeToggle?: boolean;\n  minimal?: boolean;\n  customFavicon?: string;\n  includes?: string;\n  includesName?: string;\n}\n\n@Component({\n  selector: 'template-playground-root',\n  template: `\n    \n      \n        Template Playground\n        \n          Session: {{sessionId.substring(0, 8)}}...\n          Saving...\n          Last saved: {{lastSaved | date:'short'}}\n        \n        \n          ⚙️ Config\n          Reset to Default\n          Download Templates\n        \n      \n\n      \n      \n        CompoDoc Configuration\n        \n           Hide Generator\n           Hide Dark Mode Toggle\n           Minimal Mode\n           Disable Overview\n           Disable File Path\n           Disable Source Code\n           Disable Graph\n           Disable Main Graph\n           Disable Routes Graph\n           Disable Coverage\n           Disable Search\n           Disable Dependencies\n           Disable Private\n           Disable Protected\n           Disable Internal\n           Disable Lifecycle Hooks\n           Disable Constructors\n           Disable Properties\n           Disable DOM Tree\n           Disable Template Tab\n           Disable Style Tab\n        \n      \n\n      \n        \n          \n            Templates\n            \n              \n                \n                {{template.name}}\n                {{template.type}}\n              \n            \n\n            \n              Loading templates...\n            \n          \n        \n\n        \n          \n            \n              {{selectedFile.path}}\n              {{selectedFile.type}}\n            \n            \n          \n\n          \n            \n              Live Preview\n              🔄 Refresh\n            \n            \n          \n        \n      \n    \n  `,\n  styles: [`\n    .template-playground {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n\n    .template-playground-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .template-playground-status {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      font-size: 0.875rem;\n    }\n\n    .session-info {\n      color: #6c757d;\n      font-family: monospace;\n    }\n\n    .saving-indicator {\n      color: #ffc107;\n      font-weight: bold;\n    }\n\n    .last-saved {\n      color: #28a745;\n    }\n\n    .template-playground-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .config-panel {\n      background: #e9ecef;\n      padding: 1rem 2rem;\n      border-bottom: 1px solid #dee2e6;\n      transition: all 0.3s ease;\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    .config-panel.collapsed {\n      max-height: 0;\n      padding: 0 2rem;\n    }\n\n    .config-options {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n    }\n\n    .config-options label {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .template-playground-body {\n      display: flex;\n      flex: 1;\n      overflow: hidden;\n    }\n\n    .template-playground-sidebar {\n      width: 250px;\n      background: #f8f9fa;\n      border-right: 1px solid #dee2e6;\n      overflow-y: auto;\n    }\n\n    .template-file-list {\n      padding: 1rem;\n    }\n\n    .template-file-list h3 {\n      margin: 0 0 0.5rem 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n      color: #495057;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n\n    .file-list {\n      list-style: none;\n      padding: 0;\n      margin: 0 0 1.5rem 0;\n    }\n\n    .file-list li {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      transition: background-color 0.15s ease;\n    }\n\n    .file-list li:hover {\n      background: #e9ecef;\n    }\n\n    .file-list li.active {\n      background: #007bff;\n      color: white;\n    }\n\n    .file-icon {\n      margin-right: 0.5rem;\n      opacity: 0.7;\n    }\n\n    .file-type {\n      margin-left: auto;\n      font-size: 0.75rem;\n      opacity: 0.7;\n      text-transform: uppercase;\n    }\n\n    .loading-templates {\n      text-align: center;\n      color: #6c757d;\n      font-style: italic;\n      padding: 2rem;\n    }\n\n    .template-playground-main {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n\n    .template-playground-editor {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      border-right: 1px solid #dee2e6;\n    }\n\n    .editor-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .editor-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .file-type-badge {\n      background: #6c757d;\n      color: white;\n      padding: 0.125rem 0.5rem;\n      border-radius: 12px;\n      font-size: 0.75rem;\n      text-transform: uppercase;\n    }\n\n    .editor-container {\n      flex: 1;\n      position: relative;\n    }\n\n    .template-playground-preview {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .preview-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .preview-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .preview-frame {\n      flex: 1;\n      border: none;\n      background: white;\n    }\n\n    .btn {\n      padding: 0.375rem 0.75rem;\n      border: 1px solid transparent;\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-decoration: none;\n      cursor: pointer;\n      transition: all 0.15s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      border-color: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #0056b3;\n      border-color: #004085;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      border-color: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n      border-color: #4e555b;\n    }\n\n    .btn-success {\n      background: #28a745;\n      border-color: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n      border-color: #1c7430;\n    }\n\n    .btn-sm {\n      padding: 0.25rem 0.5rem;\n      font-size: 0.75rem;\n    }\n  `]\n})\nexport class TemplatePlaygroundComponent implements OnInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) editorContainer!: ElementRef;\n  @ViewChild('previewFrame', { static: true }) previewFrame!: ElementRef;\n\n  sessionId: string = '';\n  templates: Template[] = [];\n  selectedFile: Template | null = null;\n  config: CompoDocConfig = {};\n  showConfigPanel: boolean = false;\n  saving: boolean = false;\n  lastSaved: Date | null = null;\n\n  private saveTimeout?: number;\n  private readonly SAVE_DELAY = 300; // 300ms debounce\n\n  get previewUrl(): string {\n    return this.sessionId ? `/api/session/${this.sessionId}/docs/` : '';\n  }\n\n  constructor(\n    private http: HttpClient,\n    private editorService: TemplateEditorService,\n    private zipService: ZipExportService,\n    private hbsService: HbsRenderService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      await this.createSession();\n      await this.loadSessionTemplates();\n      await this.loadSessionConfig();\n      this.initializeEditor();\n    } catch (error) {\n      console.error('Error initializing template playground:', error);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n  }\n\n  private async createSession(): Promise {\n    const response = await this.http.post('/api/session/create', {}).toPromise();\n    if (response && response.success) {\n      this.sessionId = response.sessionId;\n      console.log('Session created:', this.sessionId);\n    } else {\n      throw new Error('Failed to create session');\n    }\n  }\n\n  private async loadSessionTemplates(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/templates`).toPromise();\n    if (response && response.success) {\n      this.templates = response.templates;\n\n      // Auto-select the first template\n      if (this.templates.length > 0 && !this.selectedFile) {\n        this.selectFile(this.templates[0]);\n      }\n    }\n  }\n\n  private async loadSessionConfig(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/config`).toPromise();\n    if (response && response.success) {\n      this.config = response.config;\n    }\n  }\n\n  initializeEditor() {\n    this.editorService.initializeEditor(this.editorContainer.nativeElement);\n\n    // Set up debounced save on content change\n    this.editorService.setOnChangeCallback((content: string) => {\n      this.scheduleAutoSave(content);\n    });\n  }\n\n  async selectFile(template: Template) {\n    this.selectedFile = template;\n\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.get(`/api/session/${this.sessionId}/template/${template.path}`).toPromise();\n      if (response && response.success) {\n        this.editorService.setEditorContent(response.content, template.type === 'template' ? 'handlebars' : 'handlebars');\n      }\n    } catch (error) {\n      console.error('Error loading template:', error);\n    }\n  }\n\n  private scheduleAutoSave(content: string): void {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Set saving indicator\n    this.saving = true;\n\n    // Schedule new save\n    this.saveTimeout = window.setTimeout(async () => {\n      try {\n        await this.saveTemplate(content);\n        this.saving = false;\n        this.lastSaved = new Date();\n      } catch (error) {\n        console.error('Error saving template:', error);\n        this.saving = false;\n      }\n    }, this.SAVE_DELAY);\n  }\n\n  private async saveTemplate(content: string): Promise {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    const response = await this.http.post(`/api/session/${this.sessionId}/template/${this.selectedFile.path}`, {\n      content\n    }).toPromise();\n\n    if (!response || !response.success) {\n      throw new Error('Failed to save template');\n    }\n  }\n\n  async updateConfig(): Promise {\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.post(`/api/session/${this.sessionId}/config`, {\n        config: this.config\n      }).toPromise();\n\n      if (response && response.success) {\n        // Config updated, documentation will be regenerated automatically\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  }\n\n  toggleConfigPanel(): void {\n    this.showConfigPanel = !this.showConfigPanel;\n  }\n\n  refreshPreview(): void {\n    if (this.previewFrame?.nativeElement) {\n      this.previewFrame.nativeElement.src = this.previewFrame.nativeElement.src;\n    }\n  }\n\n  resetToDefault(): void {\n    // Implementation for resetting to default templates\n    if (confirm('Are you sure you want to reset all templates to their default values? This action cannot be undone.')) {\n      // TODO: Implement reset functionality\n      console.log('Reset to default templates');\n    }\n  }\n\n  async exportZip(): Promise {\n    try {\n      if (!this.sessionId) {\n        console.error('No active session. Please refresh the page and try again.');\n        return;\n      }\n\n      console.log('Creating template package...');\n\n      // Call server-side ZIP creation endpoint for all templates\n      const response = await this.http.post(`/api/session/${this.sessionId}/download-all-templates`, {}, {\n        responseType: 'blob',\n        observe: 'response'\n      }).toPromise();\n\n      if (!response || !response.body) {\n        throw new Error('Failed to create template package');\n      }\n\n      // Get the ZIP file as a blob\n      const zipBlob = response.body;\n\n      // Get filename from response headers or construct it\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `compodoc-templates-${this.sessionId}.zip`;\n\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Create download link and trigger download\n      const url = URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('Template package downloaded successfully!');\n    } catch (error) {\n      console.error('Error downloading template package:', error);\n    }\n  }\n\n  trackByName(index: number, item: Template): string {\n    return item.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateActivityDto.html":{"url":"classes/CreateActivityDto.html","title":"class - CreateActivityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateActivityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activity/dto/create-activity.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                assignedTo\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        assignedTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/dto/create-activity.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/dto/create-activity.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/dto/create-activity.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/activity/dto/create-activity.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional } from 'class-validator';\n\nexport class CreateActivityDto {\n  @IsString()\n  title: string;\n\n  @IsString()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  assignedTo?: string;\n\n  @IsOptional()\n  @IsString()\n  status?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Content\n                            \n                            \n                                taskId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        Content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCommentDto {\n  taskId: string;      \n  userId: string; \n  Content: string; \n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommitmentDto.html":{"url":"classes/CreateCommitmentDto.html","title":"class - CreateCommitmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommitmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/dto/create-commitment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                assigneeId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                dueDate\n                            \n                            \n                                    \n                                    Optional\n                                linkedTaskId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                priority\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        assigneeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        linkedTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"High\" | \"Medium\" | \"Low\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(['High', 'Medium', 'Low'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommitmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(CommitmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Title is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/create-commitment.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsEnum, IsISO8601, IsUUID,  } from 'class-validator';\nimport { CommitmentStatus } from '../commitments.schema';\n\nexport class CreateCommitmentDto {\n @IsNotEmpty({ message: 'Title is required' })\n  title: string;\n\n  @IsISO8601()\n  dueDate: string; // ISO date string\n\n  @IsOptional()\n  @IsUUID()\n  assigneeId?: string;\n\n   @IsOptional()\n  @IsUUID()\n  description?: string;\n\n  @IsOptional()\n  linkedTaskId?: string;\n\n  @IsOptional()\n  @IsEnum(['High', 'Medium', 'Low'])\n  priority?: 'High' | 'Medium' | 'Low';\n\n  @IsOptional()\n  @IsEnum(CommitmentStatus)\n  status?: CommitmentStatus;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMeetingDto.html":{"url":"classes/CreateMeetingDto.html","title":"class - CreateMeetingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMeetingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/create-meeting.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isRecurring\n                            \n                            \n                                    \n                                    \n                                    \n                                link\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                recurrenceRule\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2025-08-16T10:00:00Z', description: 'Meeting date and time in ISO format', required: true})@IsDate()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/create-meeting.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Daily sync meeting', description: 'Meeting description', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/create-meeting.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isRecurring\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, description: 'Whether the meeting recurs', required: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/create-meeting.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://meet.example.com/standup', description: 'Meeting URL', required: true})@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/create-meeting.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        recurrenceRule\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'RRULE:FREQ=WEEKLY;INTERVAL=1', description: 'Recurrence rule if meeting is recurring', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/create-meeting.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Team Standup', description: 'Title of the meeting', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/create-meeting.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDate, IsUrl, IsOptional, IsBoolean } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateMeetingDto {\n  @ApiProperty({\n    example: 'Team Standup',\n    description: 'Title of the meeting',\n    required: true\n  })\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    example: 'Daily sync meeting',\n    description: 'Meeting description',\n    required: true\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({\n    example: '2025-08-16T10:00:00Z',\n    description: 'Meeting date and time in ISO format',\n    required: true\n  })\n  @IsDate()\n  @Type(() => Date)\n  dateTime: Date;\n\n  @ApiProperty({\n    example: 'https://meet.example.com/standup',\n    description: 'Meeting URL',\n    required: true\n  })\n  @IsUrl()\n  @IsNotEmpty()\n  link: string;\n\n  @ApiProperty({\n    example: false,\n    description: 'Whether the meeting recurs',\n    required: false\n  })\n  @IsOptional()\n  @IsBoolean()\n  isRecurring?: boolean;\n\n  @ApiProperty({\n    example: 'RRULE:FREQ=WEEKLY;INTERVAL=1',\n    description: 'Recurrence rule if meeting is recurring',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  recurrenceRule?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                link\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['mention', 'assignment', 'due-soon', 'status-change'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/create-notification.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsIn } from 'class-validator';\nimport { NotificationType } from '../schemas/notification.schema';\n\nexport class CreateNotificationDto {\n  @IsIn(['mention', 'assignment', 'due-soon', 'status-change'])\n  type: NotificationType;\n\n  @IsString()\n  message: string;\n\n  @IsString()\n  @IsOptional()\n  link?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubtaskDto.html":{"url":"classes/CreateSubtaskDto.html","title":"class - CreateSubtaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubtaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subtask/dto/create-subtask.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                isDone\n                            \n                            \n                                    Optional\n                                taskId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/subtask/dto/create-subtask.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        taskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/subtask/dto/create-subtask.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subtask/dto/create-subtask.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSubtaskDto {\n  title: string;\n   isDone?: boolean;\n  taskId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                assigneeId\n                            \n                            \n                                dueDate\n                            \n                            \n                                    Optional\n                                endDate\n                            \n                            \n                                    Optional\n                                startDate\n                            \n                            \n                                title\n                            \n                            \n                                workspaceId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        assigneeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/create-task.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/create-task.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/create-task.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/create-task.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/create-task.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        workspaceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/create-task.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTaskDto {\n  title: string;\n  assigneeId: string;\n  dueDate: Date;\n  startDate?: Date;\n  endDate?: Date;\n  workspaceId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in user/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in user/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in user/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The full name of the user',\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    example: 'john@example.com',\n    description: 'The user email address (must be unique)',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    example: 'StrongPass123!',\n    description: 'The user password (min 8 chars, must be strong)',\n  })\n  @IsString()\n  @MinLength(8)\n  password: string;\n}\n\nexport class CreateUserDto {\n  readonly name: string;\n  readonly email: string;\n  readonly password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  readonly name: string;\n  readonly email: string;\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateWorkspaceDto.html":{"url":"classes/CreateWorkspaceDto.html","title":"class - CreateWorkspaceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateWorkspaceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/dto/create-workspace.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                members\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/create-workspace.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/create-workspace.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/dto/create-workspace.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsOptional, IsString } from 'class-validator';\n\nexport class CreateWorkspaceDto {\n  @IsString()\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  members?: string[]; // Only strings from the API\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DashboardController.html":{"url":"controllers/DashboardController.html","title":"controller - DashboardController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  DashboardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.controller.ts\n        \n            \n                Prefix\n            \n            \n                dashboard\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMeeting\n                            \n                            \n                                    \n                                getMeetings\n                            \n                            \n                                    \n                                getMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMeeting\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMeeting(dto: CreateMeetingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('meetings')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateMeetingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getMeetings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMeetings()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('meetings')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMetrics(req: AuthenticatedRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('metrics')\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            AuthenticatedRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { DashboardService } from './dashboard.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CreateMeetingDto } from './dto/create-meeting.dto';\nimport { MeetingResponseDto } from './dto/meeting-response.dto';\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    userId: string;\n    email?: string;\n    [key: string]: any;\n  };\n}\n\n@Controller('dashboard')\n@UseGuards(JwtAuthGuard)\nexport class DashboardController {\n  constructor(private readonly dashboardService: DashboardService) {}\n\n  @Get('metrics')\n  getMetrics(@Req() req: AuthenticatedRequest) {\n    const userId = req.user.userId; \n    return this.dashboardService.getMetrics(userId);\n  }\n\n  @Get('meetings')\n  getMeetings(): Promise {\n    return this.dashboardService.getUpcomingMeetings();\n  }\n\n  @Post('meetings')\n  addMeeting(\n    @Body() dto: CreateMeetingDto,\n  ): Promise {\n    return this.dashboardService.addMeeting(dto);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DashboardMetricsDto.html":{"url":"classes/DashboardMetricsDto.html","title":"class - DashboardMetricsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DashboardMetricsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/dashboard-metrics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                activeWorkspaces\n                            \n                            \n                                completedTasks\n                            \n                            \n                                inProgressTasks\n                            \n                            \n                                teamMembers\n                            \n                            \n                                    Optional\n                                totalWorkspaces\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        activeWorkspaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/dashboard-metrics.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        completedTasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/dashboard-metrics.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inProgressTasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/dashboard-metrics.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/dashboard-metrics.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        totalWorkspaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/dashboard-metrics.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DashboardMetricsDto {\n  completedTasks: number;\n  inProgressTasks: number;\n  teamMembers: number;\n  activeWorkspaces?: number;\n  totalWorkspaces?: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DashboardModule.html":{"url":"modules/DashboardModule.html","title":"module - DashboardModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    DashboardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DashboardModule\n\n\n\ncluster_DashboardModule_imports\n\n\n\ncluster_DashboardModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nDashboardModule\n\nDashboardModule\n\nDashboardModule -->\n\nTaskModule->DashboardModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nDashboardModule -->\n\nUserModule->DashboardModule\n\n\n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nDashboardModule -->\n\nWorkspaceModule->DashboardModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nDashboardModule -->\n\nDashboardService->DashboardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dashboard/dashboard.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DashboardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DashboardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WorkspaceModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardController } from './dashboard.controller';\nimport { TaskModule } from '../tasks/task.module';\nimport { UserModule } from '../users/users.module';\nimport { WorkspaceModule } from '@/workspace/workspace.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Meeting, MeetingSchema } from './schemas/meeting.schema';\n\n@Module({\n  imports: [\n    TaskModule,\n    UserModule,\n    WorkspaceModule,\n    MongooseModule.forFeature([\n      { name: Meeting.name, schema: MeetingSchema },\n    ]),\n  ],\n  controllers: [DashboardController],\n  providers: [DashboardService],\n})\nexport class DashboardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMeeting\n                            \n                            \n                                    Async\n                                getMetrics\n                            \n                            \n                                    Async\n                                getUpcomingMeetings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, userService: UsersService, workspaceService: WorkspaceService, meetingModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/dashboard/dashboard.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        workspaceService\n                                                  \n                                                        \n                                                                        WorkspaceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meetingModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMeeting\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMeeting(dto: CreateMeetingDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateMeetingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMetrics(userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUpcomingMeetings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUpcomingMeetings()\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { TaskService } from '../tasks/task.service';\nimport { UsersService } from '../users/user.service';\nimport { DashboardMetricsDto } from './dto/dashboard-metrics.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Meeting } from './schemas/meeting.schema';\nimport { CreateMeetingDto } from './dto/create-meeting.dto';\nimport { MeetingResponseDto } from './dto/meeting-response.dto';\nimport { WorkspaceService } from '../workspace/workspace.service';\n\n@Injectable()\nexport class DashboardService {\n  constructor(\n    private readonly taskService: TaskService,\n    private readonly userService: UsersService,\n    private readonly workspaceService: WorkspaceService,\n    @InjectModel(Meeting.name)\n    private readonly meetingModel: Model,\n  ) {}\n\n  async getMetrics(userId?: string): Promise {\n    const [completedTasks, inProgressTasks, teamMembers, activeWorkspaces, totalWorkspaces] =\n      await Promise.all([\n        this.taskService.countByStatus('Done'),\n        this.taskService.countByStatus('In Progress'),\n        this.userService.countAll(),\n        this.workspaceService.countActiveWorkspaces(),\n        this.workspaceService.countAllWorkspaces(),\n      ]);\n\n    return {\n      completedTasks,\n      inProgressTasks,\n      teamMembers,\n      activeWorkspaces,\n      totalWorkspaces,\n    };\n  }\n\n  async getUpcomingMeetings(): Promise {\n    const now = new Date();\n\n    const meetings: Meeting[] = await this.meetingModel\n      .find({ dateTime: { $gt: now } })\n      .sort({ dateTime: 1 })\n      .exec();\n\n    return meetings.map((m) => ({\n      id: m._id.toString(),\n      title: m.title,\n      description: m.description,\n      dateTime: m.dateTime,\n      link: m.link,\n      createdAt: m.createdAt ?? new Date(),\n    }));\n  }\n\n  async addMeeting(dto: CreateMeetingDto): Promise {\n    const meeting = new this.meetingModel({\n      ...dto,\n      isRecurring: dto.isRecurring ?? false,\n    });\n\n    const saved: Meeting = await meeting.save();\n\n    return {\n      id: saved._id.toString(),\n      title: saved.title,\n      description: saved.description,\n      dateTime: saved.dateTime,\n      link: saved.link,\n      createdAt: saved.createdAt ?? new Date(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\n// database.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Task, TaskSchema } from './tasks/schemas/task.schema';\nimport { User, UserSchema } from '../user/user.schema';\n// Import other commonly used schemas\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Task.name, schema: TaskSchema },\n      { name: User.name, schema: UserSchema },\n      // Add other commonly used models here\n    ]),\n  ],\n  exports: [MongooseModule], // Export to make all models available\n})\nexport class DatabaseModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventsGateway.html":{"url":"classes/EventsGateway.html","title":"class - EventsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                emitColumnUpdate\n                            \n                            \n                                emitSubtaskUpdate\n                            \n                            \n                                emitTaskUpdate\n                            \n                            \n                                emitWorkspaceUpdate\n                            \n                            \n                                    \n                                handlePing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/events.gateway.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        emitColumnUpdate\n                        \n                    \n                \n            \n            \n                \nemitColumnUpdate(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitSubtaskUpdate\n                        \n                    \n                \n            \n            \n                \nemitSubtaskUpdate(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitTaskUpdate\n                        \n                    \n                \n            \n            \n                \nemitTaskUpdate(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitWorkspaceUpdate\n                        \n                    \n                \n            \n            \n                \nemitWorkspaceUpdate(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handlePing\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePing(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('ping')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {WebSocketGateway, WebSocketServer, SubscribeMessage, MessageBody} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class EventsGateway {\n  @WebSocketServer()\n  server: Server;\n\n  emitTaskUpdate(data: any) {\n    this.server.emit('taskUpdated', data);\n  }\n\n  emitColumnUpdate(data: any) {\n    this.server.emit('columnUpdated', data);\n  }\n\n  emitSubtaskUpdate(data: any) {\n    this.server.emit('subtaskUpdated', data);\n  }\n\n  emitWorkspaceUpdate(data: any) {\n    this.server.emit('workspaceUpdated', data);\n  }\n\n  // Optional listener for client pings\n  @SubscribeMessage('ping')\n  handlePing(@MessageBody() message: string): string {\n    return `pong: ${message}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail({}, {message: 'Email must be a valid email address'})@IsNotEmpty({message: 'Email is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/forgot-password.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail({}, { message: 'Email must be a valid email address' })\n  @IsNotEmpty({ message: 'Email is required' })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HbsRenderService.html":{"url":"injectables/HbsRenderService.html","title":"injectable - HbsRenderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  HbsRenderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            documentation/template-playground/hbs-render.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handlebarsInstance\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMockData\n                            \n                            \n                                    Private\n                                initializeHandlebars\n                            \n                            \n                                    Private\n                                registerHelpers\n                            \n                            \n                                renderTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in documentation/template-playground/hbs-render.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMockData\n                        \n                    \n                \n            \n            \n                \ngetMockData()\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/hbs-render.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeHandlebars\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeHandlebars()\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/hbs-render.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerHelpers\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerHelpers()\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/hbs-render.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \nrenderTemplate(templateContent: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/hbs-render.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                templateContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handlebarsInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in documentation/template-playground/hbs-render.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\ndeclare const Handlebars: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HbsRenderService {\n  private handlebarsInstance: any;\n\n  constructor() {\n    this.initializeHandlebars();\n  }\n\n  private initializeHandlebars() {\n    // Create a new Handlebars instance for the playground\n    this.handlebarsInstance = Handlebars.create();\n\n    // Register common helpers used in Compodoc templates\n    this.registerHelpers();\n  }\n\n  private registerHelpers() {\n    // Register the 'compare' helper\n    this.handlebarsInstance.registerHelper('compare', (left: any, operator: string, right: any, options: any) => {\n      let result;\n      switch (operator) {\n        case '===':\n          result = left === right;\n          break;\n        case '!==':\n          result = left !== right;\n          break;\n        case '':\n          result = left > right;\n          break;\n        case '=':\n          result = left >= right;\n          break;\n        default:\n          result = false;\n      }\n      return result ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'unless' helper\n    this.handlebarsInstance.registerHelper('unless', (conditional: any, options: any) => {\n      return !conditional ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'each' helper with index\n    this.handlebarsInstance.registerHelper('each', (context: any, options: any) => {\n      let ret = '';\n      for (let i = 0; i  {\n      return conditional ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'relativeURL' helper\n    this.handlebarsInstance.registerHelper('relativeURL', (depth: number, page?: string) => {\n      let url = '';\n      for (let i = 0; i  {\n      // Simple translation mapping for preview\n      const translations: { [key: string]: string } = {\n        'info': 'Information',\n        'source': 'Source',\n        'example': 'Example',\n        'template': 'Template',\n        'styles': 'Styles',\n        'component': 'Component',\n        'module': 'Module',\n        'overview': 'Overview',\n        'components': 'Components',\n        'modules': 'Modules',\n        'file': 'File',\n        'description': 'Description',\n        'selector': 'Selector',\n        'properties': 'Properties',\n        'methods': 'Methods',\n        'inputs': 'Inputs',\n        'outputs': 'Outputs'\n      };\n      return translations[key] || key;\n    });\n\n    // Register the 'orLength' helper\n    this.handlebarsInstance.registerHelper('orLength', (...args: any[]) => {\n      const options = args[args.length - 1];\n      const values = args.slice(0, -1);\n\n      for (const value of values) {\n        if (value && value.length && value.length > 0) {\n          return options.fn(this);\n        }\n      }\n      return options.inverse(this);\n    });\n\n    // Register the 'isTabEnabled' helper\n    this.handlebarsInstance.registerHelper('isTabEnabled', (navTabs: any[], tabId: string, options: any) => {\n      const tab = navTabs && navTabs.find((t: any) => t.id === tabId);\n      return tab ? options.fn(this) : options.inverse(this);\n    });\n\n    // Register the 'isInitialTab' helper\n    this.handlebarsInstance.registerHelper('isInitialTab', (navTabs: any[], tabId: string, options: any) => {\n      const isInitial = navTabs && navTabs.length > 0 && navTabs[0].id === tabId;\n      return isInitial ? options.fn(this) : options.inverse(this);\n    });\n  }\n\n  renderTemplate(templateContent: string, data: any): string {\n    try {\n      // Create a complete HTML document for preview\n      const template = this.handlebarsInstance.compile(templateContent);\n      const rendered = template({ data });\n\n      // Wrap in a basic HTML structure for preview\n      return `\n        \n        \n        \n          \n          Template Preview\n          \n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .preview-wrapper { border: 1px solid #ddd; padding: 20px; }\n            .preview-notice { background: #f0f8ff; padding: 10px; margin-bottom: 20px; border-left: 4px solid #007bff; }\n          \n        \n        \n          \n            Template Preview: This is a live preview of your template with mock data.\n          \n          \n            ${rendered}\n          \n        \n        \n      `;\n    } catch (error) {\n      return `\n        \n        \n        \n          \n          Template Preview - Error\n          \n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .error { color: red; background: #fff5f5; padding: 20px; border: 1px solid #red; }\n          \n        \n        \n          \n            Template Error\n            Error: ${error.message}\n            Please check your template syntax and try again.\n          \n        \n        \n      `;\n    }\n  }\n\n  getMockData(): any {\n    return {\n      documentationMainName: 'Sample Documentation',\n      depth: 0,\n      context: 'component',\n      components: [\n        {\n          name: 'SampleComponent',\n          selector: 'app-sample',\n          file: 'src/app/sample/sample.component.ts',\n          description: 'A sample component for demonstration',\n          properties: [\n            { name: 'title', type: 'string', description: 'The component title' },\n            { name: 'isVisible', type: 'boolean', description: 'Whether the component is visible' }\n          ],\n          methods: [\n            { name: 'ngOnInit', description: 'Lifecycle hook', signature: 'ngOnInit(): void' },\n            { name: 'onClick', description: 'Handle click events', signature: 'onClick(event: MouseEvent): void' }\n          ]\n        }\n      ],\n      navTabs: [\n        { id: 'info', label: 'Info', href: '#info' },\n        { id: 'source', label: 'Source', href: '#source' },\n        { id: 'example', label: 'Example', href: '#example' }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, StrategyOptions } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  name: string;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken() as (req: Request) => string | null,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET') || 'default_secret_key',\n    } as StrategyOptions);\n  }\n\n  validate(payload: JwtPayload) {\n    console.log('JWT validated:', payload);\n    return {\n      id: payload.sub,\n      email: payload.email,\n      name: payload.name,\n    };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload-1.html":{"url":"interfaces/JwtPayload-1.html","title":"interface - JwtPayload-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isManager\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isManager\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isManager:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  userId: string;\n  email: string;\n  role?: string;\n  isManager?: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; email: string; name: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, StrategyOptions } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  name: string;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken() as (req: Request) => string | null,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET') || 'default_secret_key',\n    } as StrategyOptions);\n  }\n\n  validate(payload: JwtPayload) {\n    console.log('JWT validated:', payload);\n    return {\n      id: payload.sub,\n      email: payload.email,\n      name: payload.name,\n    };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalAuthenticatedRequest.html":{"url":"interfaces/LocalAuthenticatedRequest.html","title":"interface - LocalAuthenticatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalAuthenticatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Request,\n  UseGuards,\n  Get,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { ResendVerificationDto } from './dto/resend-verification.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { User, UserDocument } from '../users/user.schema';\nimport { MailService } from './mail/mail.service';\nimport { ApiBody, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\n\ntype ResendVerificationUser = Omit & {\n  _id: Types.ObjectId;\n  email: string;\n  isEmailVerified: boolean;\n};\n\ninterface LocalAuthenticatedRequest extends Request {\n  user: UserDocument;\n}\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly jwtService: JwtService,\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n    private readonly mailService: MailService,\n  ) {}\n\n  @Post('login')\n  @UseGuards(AuthGuard('local'))\n  async login(@Request() req: LocalAuthenticatedRequest) {\n    return this.authService.login(req.user);\n  }\n\n  @Post('register')\n  @ApiBody({ type: RegisterDto })\n  async register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Get('verify-email')\n  async verifyEmail(@Body('token') token: string) {\n    if (!token) {\n      throw new BadRequestException('Token is required');\n    }\n    return this.authService.verifyEmail(token);\n  }\n\n  @Post('resend-verification')\n  async resendVerification(@Body() body: ResendVerificationDto) {\n    const user = (await this.userModel.findOne({ email: body.email }).exec()) as ResendVerificationUser | null;\n\n    if (!user) {\n      throw new BadRequestException('Email not found');\n    }\n\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already verified');\n    }\n\n    const token = this.jwtService.sign(\n      { sub: user._id.toString(), purpose: 'email_verification' },\n      { expiresIn: '1d' },\n    );\n\n    this.mailService.sendVerificationEmail(user.email, token);\n\n    return { message: 'New verification email sent' };\n  }\n\n  @Post('forgot-password')\n  @ApiOperation({ summary: 'Request a password reset email' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(@Body() dto: ForgotPasswordDto) {\n    return await this.authService.forgotPassword(dto.email);\n  }\n\n  @Post('reset-password')\n  @ApiOperation({ summary: 'Reset password with token' })\n  @ApiBody({ type: ResetPasswordDto })\n  async resetPassword(@Body() dto: ResetPasswordDto) {\n    return await this.authService.resetPassword(dto.token, dto.newPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local.strategy.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentialsss');\n    }\n    return user; \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendVerificationEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendVerificationEmail\n                        \n                    \n                \n            \n            \n                \nsendVerificationEmail(to: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/mail/mail.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class MailService {\n  sendVerificationEmail(to: string, token: string) {\n    const verifyUrl = `http://localhost:4000/api/auth/verify?token=${token}`;\n    \n    // Instead of sending email, just log the token\n    console.log(`\\n🟢 MOCK EMAIL SENT TO: ${to}`);\n    console.log(`🔗 Verification link: ${verifyUrl}\\n`);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkReadDto.html":{"url":"classes/MarkReadDto.html","title":"class - MarkReadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkReadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/mark-read.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                notificationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notificationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/dto/mark-read.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID } from 'class-validator';\n\nexport class MarkReadDto {\n  @IsUUID()\n  notificationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Meeting.html":{"url":"classes/Meeting.html","title":"class - Meeting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Meeting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/schemas/meeting.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                isRecurring\n                            \n                            \n                                    \n                                link\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isRecurring\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/schemas/meeting.schema.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Meeting {\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop({ required: true })\n  dateTime: Date;\n\n  @Prop()\n  link: string;\n\n  @Prop({ default: false })\n  isRecurring: boolean;\n\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type MeetingDocument = HydratedDocument;\nexport const MeetingSchema = SchemaFactory.createForClass(Meeting);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MeetingResponseDto.html":{"url":"classes/MeetingResponseDto.html","title":"class - MeetingResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MeetingResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dto/meeting-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                dateTime\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isRecurring\n                            \n                            \n                                link\n                            \n                            \n                                    Optional\n                                recurrenceRule\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isRecurring\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        recurrenceRule\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dashboard/dto/meeting-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class MeetingResponseDto {\n  id: string;\n  title: string;\n  description: string;\n  dateTime: Date;\n  link: string;\n  createdAt: Date;\n  isRecurring?: boolean;\n  recurrenceRule?: string; \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Member.html":{"url":"classes/Member.html","title":"class - Member","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Member\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/member.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                workspace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/member.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Workspace | Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/member.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Workspace } from './schemas/workspace.schema';\n\n@Schema({ timestamps: true })\nexport class Member extends Document {\n  @Prop({ required: true })\n  email: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'Workspace', required: true })\n  workspace: Workspace | Types.ObjectId;\n}\n\nexport const MemberSchema = SchemaFactory.createForClass(Member);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Member-1.html":{"url":"classes/Member-1.html","title":"class - Member-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Member\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teammember/entities/member.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                team\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teammember/entities/member.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teammember/entities/member.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teammember/entities/member.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        team\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Team', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teammember/entities/member.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Member extends Document {\n  @Prop({ type: String, default: () => new Types.ObjectId().toString() })\n  declare id: string; // \n\n  @Prop({ required: true })\n  name: string; // e.g. John Doe\n\n  @Prop({ required: true })\n  role: string; // e.g. Frontend Developer\n\n  @Prop({ type: Types.ObjectId, ref: 'Team', required: true })\n  team: Types.ObjectId; // \n}\n\nexport const MemberSchema = SchemaFactory.createForClass(Member);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/schemas/notification.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isRead\n                            \n                            \n                                    \n                                    Optional\n                                link\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                recipient\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, default: undefined, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isRead\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean, default: false, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId | User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/schemas/notification.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { User } from '../../users/user.schema'; // \n\nexport type NotificationDocument = Notification & Document;\n\nexport type NotificationType = 'mention' | 'assignment' | 'due-soon' | 'status-change';\n\n@Schema({ timestamps: { createdAt: true, updatedAt: false } })\nexport class Notification {\n  @Prop({ type: String, default: () => new Types.ObjectId().toString() })\n  id: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true, index: true })\n  recipient: Types.ObjectId | User;\n\n  @Prop({ type: String, enum: ['mention', 'assignment', 'due-soon', 'status-change'], required: true })\n  type: NotificationType;\n\n  @Prop({ required: true })\n  message: string;\n\n  @Prop()\n  link?: string;\n\n  @Prop({ type: Boolean, default: false, index: true })\n  isRead: boolean;\n\n  @Prop({ type: Date, default: Date.now, index: true })\n  createdAt: Date;\n\n  @Prop({ type: Date, default: null })\n  deletedAt?: Date;\n}\n\nexport const NotificationSchema = SchemaFactory.createForClass(Notification);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationCleanup.html":{"url":"injectables/NotificationCleanup.html","title":"injectable - NotificationCleanup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationCleanup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notification.cleanup.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                hardDeleteOldSoftDeletedNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notification.cleanup.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        hardDeleteOldSoftDeletedNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDeleteOldSoftDeletedNotifications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.cleanup.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(NotificationCleanup.name)\n                    \n                \n                    \n                        \n                                Defined in src/notifications/notification.cleanup.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Notification, NotificationDocument } from './schemas/notification.schema';\n\n@Injectable()\nexport class NotificationCleanup {\n  private readonly logger = new Logger(NotificationCleanup.name);\n\n  constructor(\n    @InjectModel(Notification.name)\n    private readonly notificationModel: Model,\n  ) {}\n\n  // Runs daily at midnight\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async hardDeleteOldSoftDeletedNotifications() {\n    const threeDaysAgo = new Date();\n    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);\n\n    const result = await this.notificationModel.deleteMany({\n      deletedAt: { $lt: threeDaysAgo },\n    });\n\n    this.logger.log(`🧹 Deleted ${result.deletedCount} notifications older than 3 days`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notification.controller.ts\n        \n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                deleteNotification\n                            \n                            \n                                    \n                                    Async\n                                findUserNotifications\n                            \n                            \n                                    \n                                    \n                                    Async\n                                markAllAsRead\n                            \n                            \n                                    \n                                    Async\n                                markOneAsRead\n                            \n                            \n                                    \n                                    Async\n                                markOneAsUnread\n                            \n                            \n                                    \n                                    Async\n                                restore\n                            \n                            \n                                    \n                                    Async\n                                unreadCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateNotificationDto, userId?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteNotification(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUserNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserNotifications(userId: string, limit?: string, cursor?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                cursor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        markAllAsRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAllAsRead(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('user/:userId/mark-all-read')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        markOneAsRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    markOneAsRead(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/read')\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        markOneAsUnread\n                        \n                    \n                \n            \n            \n                \n                        \n                    markOneAsUnread(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/unread')\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        restore\n                        \n                    \n                \n            \n            \n                \n                        \n                    restore(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/restore')\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        unreadCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    unreadCount(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId/unread-count')\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notification.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Controller,\n  Get,\n  Param,\n  Query,\n  Patch,\n  Delete,\n  Post,\n  Body,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { NotificationService } from './notification.service';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { BadRequestException } from '@nestjs/common'; // Import for error handling\n\n/**\n * Lightweight response shapes (avoid returning Mongoose Document types directly).\n * These match what your service actually returns (lean objects or updated docs).\n */\nexport interface NotificationResponse {\n  // existing notification fields (keep flexible)\n  _id?: string;\n  recipient?: string;\n  type?: string;\n  message?: string;\n  link?: string;\n  createdAt?: string;\n  isRead?: boolean;\n  isDeleted?: boolean;\n  __v?: number;\n  // computed field added by service\n  isValid?: boolean;\n}\n\n@Controller('notifications')\nexport class NotificationController {\n  constructor(private readonly notifications: NotificationService) {}\n\n  // create a notification (for admin or internal use)\n  @Post()\n  async create(\n    @Body() dto: CreateNotificationDto,\n    @Query('userId') userId?: string,\n  ): Promise {\n    if (!userId) {\n      throw new BadRequestException('userId is required');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const created = await this.notifications.create(userId as any, dto);\n    return { message: 'Notification created successfully', created: created as unknown as NotificationResponse };\n  }\n\n  // GET user notifications (cursor pagination: ?limit=20&cursor=2025-10-16T00:00:00.000Z)\n  @Get('user/:userId')\n  async findUserNotifications(\n    @Param('userId') userId: string,\n    @Query('limit') limit?: string,\n    @Query('cursor') cursor?: string,\n  ): Promise {\n    const parsedLimit = limit ? parseInt(limit, 10) : undefined;\n    const parsedCursor = cursor ? new Date(cursor) : undefined;\n    // Service returns lean objects enhanced with isValid: boolean — not full Mongoose docs.\n    const notifications = await this.notifications.findUserNotifications(\n      userId,\n      parsedLimit,\n      parsedCursor,\n    );\n    return notifications as unknown as NotificationResponse[];\n  }\n\n  // UNREAD COUNT\n  @Get('user/:userId/unread-count')\n  async unreadCount(@Param('userId') userId: string): Promise {\n    const count = await this.notifications.unreadCount(userId);\n    return { count };\n  }\n\n  // MARK ALL AS READ\n  @Patch('user/:userId/mark-all-read')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async markAllAsRead(@Param('userId') userId: string): Promise {\n    await this.notifications.markAllAsRead(userId);\n    // no content response (204)\n  }\n\n  // MARK ONE AS READ\n  @Patch(':id/read')\n  async markOneAsRead(@Param('id') id: string): Promise {\n    const updated = await this.notifications.markOneAsRead(id);\n    return updated ? (updated.toObject ? updated.toObject() : updated) as NotificationResponse : null;\n  }\n\n  // MARK ONE AS UNREAD\n  @Patch(':id/unread')\n  async markOneAsUnread(@Param('id') id: string): Promise {\n    const updated = await this.notifications.markOneAsUnread(id);\n    return updated ? (updated.toObject ? updated.toObject() : updated) as NotificationResponse : null;\n  }\n\n  // DELETE notification (hard delete)\n  @Delete(':id')\n  async deleteNotification(@Param('id') id: string): Promise {\n    const deleted = await this.notifications.deleteNotification(id);\n    if (!deleted) return null;\n    return { message: 'Notification deleted' };\n  }\n\n  // RESTORE (for soft-delete setups)\n  @Patch(':id/restore')\n  async restore(@Param('id') id: string): Promise {\n    const restored = await this.notifications.restore(id);\n    return restored ? (restored.toObject ? restored.toObject() : restored) as NotificationResponse : null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nNotificationService \n\nNotificationService \n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nNotificationCleanup\n\nNotificationCleanup\n\nNotificationModule -->\n\nNotificationCleanup->NotificationModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationCleanup\n                        \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Notification, NotificationSchema } from './schemas/notification.schema';\nimport { NotificationService } from './notification.service';\nimport { NotificationController } from './notification.controller';\nimport { NotificationCleanup } from './notification.cleanup';\nimport { TaskModule } from '../tasks/task.module';\nimport { Task, TaskSchema } from '../tasks/schemas/task.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Notification.name, schema: NotificationSchema },\n      { name: Task.name, schema: TaskSchema },\n    ]),\n    forwardRef(() => TaskModule),\n  ],\n  controllers: [NotificationController],\n  providers: [NotificationService, NotificationCleanup],\n  exports: [NotificationService],\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationResponse.html":{"url":"interfaces/NotificationResponse.html","title":"interface - NotificationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notification.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Lightweight response shapes (avoid returning Mongoose Document types directly).\nThese match what your service actually returns (lean objects or updated docs).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            __v\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            _id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isDeleted\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isRead\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isValid\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            recipient\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        __v\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        __v:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDeleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isDeleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isRead:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isValid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recipient\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recipient:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Query,\n  Patch,\n  Delete,\n  Post,\n  Body,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { NotificationService } from './notification.service';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { BadRequestException } from '@nestjs/common'; // Import for error handling\n\n/**\n * Lightweight response shapes (avoid returning Mongoose Document types directly).\n * These match what your service actually returns (lean objects or updated docs).\n */\nexport interface NotificationResponse {\n  // existing notification fields (keep flexible)\n  _id?: string;\n  recipient?: string;\n  type?: string;\n  message?: string;\n  link?: string;\n  createdAt?: string;\n  isRead?: boolean;\n  isDeleted?: boolean;\n  __v?: number;\n  // computed field added by service\n  isValid?: boolean;\n}\n\n@Controller('notifications')\nexport class NotificationController {\n  constructor(private readonly notifications: NotificationService) {}\n\n  // create a notification (for admin or internal use)\n  @Post()\n  async create(\n    @Body() dto: CreateNotificationDto,\n    @Query('userId') userId?: string,\n  ): Promise {\n    if (!userId) {\n      throw new BadRequestException('userId is required');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const created = await this.notifications.create(userId as any, dto);\n    return { message: 'Notification created successfully', created: created as unknown as NotificationResponse };\n  }\n\n  // GET user notifications (cursor pagination: ?limit=20&cursor=2025-10-16T00:00:00.000Z)\n  @Get('user/:userId')\n  async findUserNotifications(\n    @Param('userId') userId: string,\n    @Query('limit') limit?: string,\n    @Query('cursor') cursor?: string,\n  ): Promise {\n    const parsedLimit = limit ? parseInt(limit, 10) : undefined;\n    const parsedCursor = cursor ? new Date(cursor) : undefined;\n    // Service returns lean objects enhanced with isValid: boolean — not full Mongoose docs.\n    const notifications = await this.notifications.findUserNotifications(\n      userId,\n      parsedLimit,\n      parsedCursor,\n    );\n    return notifications as unknown as NotificationResponse[];\n  }\n\n  // UNREAD COUNT\n  @Get('user/:userId/unread-count')\n  async unreadCount(@Param('userId') userId: string): Promise {\n    const count = await this.notifications.unreadCount(userId);\n    return { count };\n  }\n\n  // MARK ALL AS READ\n  @Patch('user/:userId/mark-all-read')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async markAllAsRead(@Param('userId') userId: string): Promise {\n    await this.notifications.markAllAsRead(userId);\n    // no content response (204)\n  }\n\n  // MARK ONE AS READ\n  @Patch(':id/read')\n  async markOneAsRead(@Param('id') id: string): Promise {\n    const updated = await this.notifications.markOneAsRead(id);\n    return updated ? (updated.toObject ? updated.toObject() : updated) as NotificationResponse : null;\n  }\n\n  // MARK ONE AS UNREAD\n  @Patch(':id/unread')\n  async markOneAsUnread(@Param('id') id: string): Promise {\n    const updated = await this.notifications.markOneAsUnread(id);\n    return updated ? (updated.toObject ? updated.toObject() : updated) as NotificationResponse : null;\n  }\n\n  // DELETE notification (hard delete)\n  @Delete(':id')\n  async deleteNotification(@Param('id') id: string): Promise {\n    const deleted = await this.notifications.deleteNotification(id);\n    if (!deleted) return null;\n    return { message: 'Notification deleted' };\n  }\n\n  // RESTORE (for soft-delete setups)\n  @Patch(':id/restore')\n  async restore(@Param('id') id: string): Promise {\n    const restored = await this.notifications.restore(id);\n    return restored ? (restored.toObject ? restored.toObject() : restored) as NotificationResponse : null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteNotification\n                            \n                            \n                                    Async\n                                findUserNotifications\n                            \n                            \n                                    Async\n                                markAllAsRead\n                            \n                            \n                                    Async\n                                markOneAsRead\n                            \n                            \n                                    Async\n                                markOneAsUnread\n                            \n                            \n                                    Async\n                                restore\n                            \n                            \n                                    Async\n                                unreadCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationModel: Model, taskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notification.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: UserDocument, dto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteNotification(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserNotifications(userId: string, limit: number, cursor?: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    20\n                                            \n\n                                        \n                                        \n                                                cursor\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markAllAsRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAllAsRead(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markOneAsRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    markOneAsRead(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markOneAsUnread\n                        \n                    \n                \n            \n            \n                \n                        \n                    markOneAsUnread(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        restore\n                        \n                    \n                \n            \n            \n                \n                        \n                    restore(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unreadCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    unreadCount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notification.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model} from 'mongoose';\nimport { Notification, NotificationDocument } from './schemas/notification.schema';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { Task } from '../tasks/task.schema';\nimport { UserDocument } from '../users/user.schema';\nimport { Types } from 'mongoose';\n\n@Injectable()\nexport class NotificationService {\n  constructor(\n    @InjectModel(Notification.name)\n    private readonly notificationModel: Model,\n    @InjectModel(Task.name)\n    private readonly taskModel: Model,\n  ) {}\n\n  // CREATE NOTIFICATION\n  async create(user: UserDocument, dto: CreateNotificationDto): Promise {\n    const notification = new this.notificationModel({\n      ...dto,\n      recipient: user._id,\n    });\n    return await notification.save();\n  }\n\n  // GET USER NOTIFICATIONS\n  async findUserNotifications(userId: string, limit = 20, cursor?: Date) {\n    const query: Record = { recipient: userId };\n    if (cursor) query['createdAt'] = { $lt: cursor };\n\n    const notifications = await this.notificationModel\n  .find(query)\n  .sort({ createdAt: -1 })\n  .limit(limit)\n  .lean()\n  .exec();\n\n\n    const taskLinks = notifications\n      .filter((notif) => notif.link?.startsWith('/tasks/'))\n      .map((notif) => notif.link?.split('/tasks/')[1] || '');\n\n    const existingTasks = taskLinks.length\n      ? await this.taskModel.find(\n          { _id: { $in: taskLinks.filter(Boolean) } },\n          { _id: 1 },\n        ).lean().exec()\n      : [];\n\n    const validTaskIds = new Set(\n  existingTasks.map((t) => (t._id as Types.ObjectId).toString()),\n);\n    return notifications.map((notif) => ({\n      ...notif,\n      isValid:\n        !notif.link?.startsWith('/tasks/') ||\n        validTaskIds.has(notif.link?.split('/tasks/')[1] || ''),\n    }));\n  }\n\n  // UNREAD COUNT\n  async unreadCount(userId: string): Promise {\n    return this.notificationModel.countDocuments({\n      recipient: userId,\n      isRead: false,\n    });\n  }\n\n  // MARK ALL AS READ\n  async markAllAsRead(userId: string): Promise {\n    await this.notificationModel.updateMany(\n      { recipient: userId, isRead: false },\n      { $set: { isRead: true } },\n    );\n  }\n\n  // MARK ONE AS READ\n  async markOneAsRead(id: string): Promise {\n    return this.notificationModel.findByIdAndUpdate(\n      id,\n      { $set: { isRead: true } },\n      { new: true },\n    );\n  }\n\n  // MARK ONE AS UNREAD\n  async markOneAsUnread(id: string): Promise {\n    return this.notificationModel.findByIdAndUpdate(\n      id,\n      { $set: { isRead: false } },\n      { new: true },\n    );\n  }\n\n  // DELETE (soft delete with isDeleted flag if needed)\n  async deleteNotification(id: string): Promise {\n    return this.notificationModel.findByIdAndDelete(id);\n  }\n\n  // RESTORE — only if you use soft delete\n  async restore(id: string): Promise {\n    return this.notificationModel.findByIdAndUpdate(\n      id,\n      { $set: { isDeleted: false } },\n      { new: true },\n    );\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Project.html":{"url":"classes/Project.html","title":"class - Project","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Project\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                workspaceId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/project.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/project.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/project.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspaceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/project.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Project extends Document {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'Workspace', required: true })\n  workspaceId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  createdBy: Types.ObjectId;\n}\n\nexport const ProjectSchema = SchemaFactory.createForClass(Project);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProjectController.html":{"url":"controllers/ProjectController.html","title":"controller - ProjectController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  ProjectController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.controller.ts\n        \n            \n                Prefix\n            \n            \n                projects\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByWorkspace\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByWorkspace\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByWorkspace(workspaceId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('workspace/:workspaceId')\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\nimport { ProjectService } from './project.service';\nimport { Project } from './project.schema'; // Assuming Project schema is defined here\n\n@Controller('projects')\nexport class ProjectController {\n  constructor(private readonly projectService: ProjectService) {}\n\n  @Post()\n  create(@Body() data: Partial) {\n    return this.projectService.create(data);\n  }\n\n  @Get()\n  findAll() {\n    return this.projectService.findAll();\n  }\n\n  @Get('workspace/:workspaceId')\n  findByWorkspace(@Param('workspaceId') workspaceId: string) {\n    return this.projectService.findByWorkspace(workspaceId);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() data: Partial) {\n    return this.projectService.update(id, data);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.projectService.delete(id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProjectModule.html":{"url":"modules/ProjectModule.html","title":"module - ProjectModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    ProjectModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProjectModule\n\n\n\ncluster_ProjectModule_providers\n\n\n\ncluster_ProjectModule_exports\n\n\n\n\nProjectService \n\nProjectService \n\n\n\nProjectModule\n\nProjectModule\n\nProjectService  -->\n\nProjectModule->ProjectService \n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectModule -->\n\nProjectService->ProjectModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/project/project.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProjectController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Project, ProjectSchema } from './project.schema';\nimport { ProjectService } from './project.service';\nimport { ProjectController } from './project.controller';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Project.name, schema: ProjectSchema }])],\n  controllers: [ProjectController],\n  providers: [ProjectService],\n  exports: [ProjectService],\n})\nexport class ProjectModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByWorkspace\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(projectModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/project/project.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        projectModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByWorkspace\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByWorkspace(workspaceId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Project } from './project.schema';\n\n@Injectable()\nexport class ProjectService {\n  constructor(@InjectModel(Project.name) private projectModel: Model) {}\n\n  async create(data: Partial) {\n    const project = new this.projectModel(data);\n    return project.save();\n  }\n\n  async findAll() {\n    return this.projectModel.find().populate('workspaceId createdBy').exec();\n  }\n\n  async findByWorkspace(workspaceId: string) {\n    return this.projectModel.find({ workspaceId }).populate('createdBy').exec();\n  }\n\n  async update(id: string, data: Partial) {\n    return this.projectModel.findByIdAndUpdate(id, data, { new: true }).exec();\n  }\n\n  async delete(id: string) {\n    return this.projectModel.findByIdAndDelete(id).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john@example.com', description: 'The user email address (must be unique)'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in user/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', description: 'The full name of the user'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in user/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPass123!', description: 'The user password (min 8 chars, must be strong)'})@IsString()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in user/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The full name of the user',\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    example: 'john@example.com',\n    description: 'The user email address (must be unique)',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    example: 'StrongPass123!',\n    description: 'The user password (min 8 chars, must be strong)',\n  })\n  @IsString()\n  @MinLength(8)\n  password: string;\n}\n\nexport class CreateUserDto {\n  readonly name: string;\n  readonly email: string;\n  readonly password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto-1.html":{"url":"classes/RegisterDto-1.html","title":"class - RegisterDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john@example.com', description: 'Valid email address of the user'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', description: 'Full name of the user'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPass123!', description: 'Password must contain uppercase, lowercase, number & symbol'})@IsStrongPassword({minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsStrongPassword } from 'class-validator';\n\nexport class RegisterDto {\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'Full name of the user',\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    example: 'john@example.com',\n    description: 'Valid email address of the user',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    example: 'StrongPass123!',\n    description: 'Password must contain uppercase, lowercase, number & symbol',\n  })\n  @IsStrongPassword({\n    minLength: 8,\n    minLowercase: 1,\n    minUppercase: 1,\n    minNumbers: 1,\n    minSymbols: 1,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResendVerificationDto.html":{"url":"classes/ResendVerificationDto.html","title":"class - ResendVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResendVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/resend-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/resend-verification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\n\nexport class ResendVerificationDto {\n  @IsEmail()\n  email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPass123!'})@IsString()@MinLength(8, {message: 'Password must be at least 8 characters long'})@IsNotEmpty({message: 'New password is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'token-generated-from-email'})@IsString()@IsNotEmpty({message: 'Token is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ResetPasswordDto {\n  @ApiProperty({ example: 'token-generated-from-email' })\n  @IsString()\n  @IsNotEmpty({ message: 'Token is required' })\n  token: string;\n\n  @ApiProperty({ example: 'StrongPass123!' })\n  @IsString()\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  @IsNotEmpty({ message: 'New password is required' })\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                src/commitment/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/commitment/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commitment/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from './roles.decorator';\nimport { Request } from 'express';\n\ninterface AuthenticatedUser {\n  id: string;\n  roles: string[];\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const required = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!required || required.length === 0) return true;\n\n    // ✅ Strongly type the request\n    const req = context.switchToHttp().getRequest();\n\n    const user = req.user;\n    if (!user || !Array.isArray(user.roles)) return false;\n\n    return required.some((role) => user.roles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Session.html":{"url":"interfaces/Session.html","title":"interface - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            documentation/template-playground/template-playground.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\ninterface Template {\n  name: string;\n  path: string;\n  type: 'template' | 'partial';\n}\n\ninterface Session {\n  sessionId: string;\n  success: boolean;\n  message: string;\n}\n\ninterface CompoDocConfig {\n  hideGenerator?: boolean;\n  disableSourceCode?: boolean;\n  disableGraph?: boolean;\n  disableCoverage?: boolean;\n  disablePrivate?: boolean;\n  disableProtected?: boolean;\n  disableInternal?: boolean;\n  disableLifeCycleHooks?: boolean;\n  disableConstructors?: boolean;\n  disableRoutesGraph?: boolean;\n  disableSearch?: boolean;\n  disableDependencies?: boolean;\n  disableProperties?: boolean;\n  disableDomTree?: boolean;\n  disableTemplateTab?: boolean;\n  disableStyleTab?: boolean;\n  disableMainGraph?: boolean;\n  disableFilePath?: boolean;\n  disableOverview?: boolean;\n  hideDarkModeToggle?: boolean;\n  minimal?: boolean;\n  customFavicon?: string;\n  includes?: string;\n  includesName?: string;\n}\n\n@Component({\n  selector: 'template-playground-root',\n  template: `\n    \n      \n        Template Playground\n        \n          Session: {{sessionId.substring(0, 8)}}...\n          Saving...\n          Last saved: {{lastSaved | date:'short'}}\n        \n        \n          ⚙️ Config\n          Reset to Default\n          Download Templates\n        \n      \n\n      \n      \n        CompoDoc Configuration\n        \n           Hide Generator\n           Hide Dark Mode Toggle\n           Minimal Mode\n           Disable Overview\n           Disable File Path\n           Disable Source Code\n           Disable Graph\n           Disable Main Graph\n           Disable Routes Graph\n           Disable Coverage\n           Disable Search\n           Disable Dependencies\n           Disable Private\n           Disable Protected\n           Disable Internal\n           Disable Lifecycle Hooks\n           Disable Constructors\n           Disable Properties\n           Disable DOM Tree\n           Disable Template Tab\n           Disable Style Tab\n        \n      \n\n      \n        \n          \n            Templates\n            \n              \n                \n                {{template.name}}\n                {{template.type}}\n              \n            \n\n            \n              Loading templates...\n            \n          \n        \n\n        \n          \n            \n              {{selectedFile.path}}\n              {{selectedFile.type}}\n            \n            \n          \n\n          \n            \n              Live Preview\n              🔄 Refresh\n            \n            \n          \n        \n      \n    \n  `,\n  styles: [`\n    .template-playground {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n\n    .template-playground-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .template-playground-status {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      font-size: 0.875rem;\n    }\n\n    .session-info {\n      color: #6c757d;\n      font-family: monospace;\n    }\n\n    .saving-indicator {\n      color: #ffc107;\n      font-weight: bold;\n    }\n\n    .last-saved {\n      color: #28a745;\n    }\n\n    .template-playground-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .config-panel {\n      background: #e9ecef;\n      padding: 1rem 2rem;\n      border-bottom: 1px solid #dee2e6;\n      transition: all 0.3s ease;\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    .config-panel.collapsed {\n      max-height: 0;\n      padding: 0 2rem;\n    }\n\n    .config-options {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n    }\n\n    .config-options label {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .template-playground-body {\n      display: flex;\n      flex: 1;\n      overflow: hidden;\n    }\n\n    .template-playground-sidebar {\n      width: 250px;\n      background: #f8f9fa;\n      border-right: 1px solid #dee2e6;\n      overflow-y: auto;\n    }\n\n    .template-file-list {\n      padding: 1rem;\n    }\n\n    .template-file-list h3 {\n      margin: 0 0 0.5rem 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n      color: #495057;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n\n    .file-list {\n      list-style: none;\n      padding: 0;\n      margin: 0 0 1.5rem 0;\n    }\n\n    .file-list li {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      transition: background-color 0.15s ease;\n    }\n\n    .file-list li:hover {\n      background: #e9ecef;\n    }\n\n    .file-list li.active {\n      background: #007bff;\n      color: white;\n    }\n\n    .file-icon {\n      margin-right: 0.5rem;\n      opacity: 0.7;\n    }\n\n    .file-type {\n      margin-left: auto;\n      font-size: 0.75rem;\n      opacity: 0.7;\n      text-transform: uppercase;\n    }\n\n    .loading-templates {\n      text-align: center;\n      color: #6c757d;\n      font-style: italic;\n      padding: 2rem;\n    }\n\n    .template-playground-main {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n\n    .template-playground-editor {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      border-right: 1px solid #dee2e6;\n    }\n\n    .editor-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .editor-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .file-type-badge {\n      background: #6c757d;\n      color: white;\n      padding: 0.125rem 0.5rem;\n      border-radius: 12px;\n      font-size: 0.75rem;\n      text-transform: uppercase;\n    }\n\n    .editor-container {\n      flex: 1;\n      position: relative;\n    }\n\n    .template-playground-preview {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .preview-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .preview-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .preview-frame {\n      flex: 1;\n      border: none;\n      background: white;\n    }\n\n    .btn {\n      padding: 0.375rem 0.75rem;\n      border: 1px solid transparent;\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-decoration: none;\n      cursor: pointer;\n      transition: all 0.15s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      border-color: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #0056b3;\n      border-color: #004085;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      border-color: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n      border-color: #4e555b;\n    }\n\n    .btn-success {\n      background: #28a745;\n      border-color: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n      border-color: #1c7430;\n    }\n\n    .btn-sm {\n      padding: 0.25rem 0.5rem;\n      font-size: 0.75rem;\n    }\n  `]\n})\nexport class TemplatePlaygroundComponent implements OnInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) editorContainer!: ElementRef;\n  @ViewChild('previewFrame', { static: true }) previewFrame!: ElementRef;\n\n  sessionId: string = '';\n  templates: Template[] = [];\n  selectedFile: Template | null = null;\n  config: CompoDocConfig = {};\n  showConfigPanel: boolean = false;\n  saving: boolean = false;\n  lastSaved: Date | null = null;\n\n  private saveTimeout?: number;\n  private readonly SAVE_DELAY = 300; // 300ms debounce\n\n  get previewUrl(): string {\n    return this.sessionId ? `/api/session/${this.sessionId}/docs/` : '';\n  }\n\n  constructor(\n    private http: HttpClient,\n    private editorService: TemplateEditorService,\n    private zipService: ZipExportService,\n    private hbsService: HbsRenderService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      await this.createSession();\n      await this.loadSessionTemplates();\n      await this.loadSessionConfig();\n      this.initializeEditor();\n    } catch (error) {\n      console.error('Error initializing template playground:', error);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n  }\n\n  private async createSession(): Promise {\n    const response = await this.http.post('/api/session/create', {}).toPromise();\n    if (response && response.success) {\n      this.sessionId = response.sessionId;\n      console.log('Session created:', this.sessionId);\n    } else {\n      throw new Error('Failed to create session');\n    }\n  }\n\n  private async loadSessionTemplates(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/templates`).toPromise();\n    if (response && response.success) {\n      this.templates = response.templates;\n\n      // Auto-select the first template\n      if (this.templates.length > 0 && !this.selectedFile) {\n        this.selectFile(this.templates[0]);\n      }\n    }\n  }\n\n  private async loadSessionConfig(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/config`).toPromise();\n    if (response && response.success) {\n      this.config = response.config;\n    }\n  }\n\n  initializeEditor() {\n    this.editorService.initializeEditor(this.editorContainer.nativeElement);\n\n    // Set up debounced save on content change\n    this.editorService.setOnChangeCallback((content: string) => {\n      this.scheduleAutoSave(content);\n    });\n  }\n\n  async selectFile(template: Template) {\n    this.selectedFile = template;\n\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.get(`/api/session/${this.sessionId}/template/${template.path}`).toPromise();\n      if (response && response.success) {\n        this.editorService.setEditorContent(response.content, template.type === 'template' ? 'handlebars' : 'handlebars');\n      }\n    } catch (error) {\n      console.error('Error loading template:', error);\n    }\n  }\n\n  private scheduleAutoSave(content: string): void {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Set saving indicator\n    this.saving = true;\n\n    // Schedule new save\n    this.saveTimeout = window.setTimeout(async () => {\n      try {\n        await this.saveTemplate(content);\n        this.saving = false;\n        this.lastSaved = new Date();\n      } catch (error) {\n        console.error('Error saving template:', error);\n        this.saving = false;\n      }\n    }, this.SAVE_DELAY);\n  }\n\n  private async saveTemplate(content: string): Promise {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    const response = await this.http.post(`/api/session/${this.sessionId}/template/${this.selectedFile.path}`, {\n      content\n    }).toPromise();\n\n    if (!response || !response.success) {\n      throw new Error('Failed to save template');\n    }\n  }\n\n  async updateConfig(): Promise {\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.post(`/api/session/${this.sessionId}/config`, {\n        config: this.config\n      }).toPromise();\n\n      if (response && response.success) {\n        // Config updated, documentation will be regenerated automatically\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  }\n\n  toggleConfigPanel(): void {\n    this.showConfigPanel = !this.showConfigPanel;\n  }\n\n  refreshPreview(): void {\n    if (this.previewFrame?.nativeElement) {\n      this.previewFrame.nativeElement.src = this.previewFrame.nativeElement.src;\n    }\n  }\n\n  resetToDefault(): void {\n    // Implementation for resetting to default templates\n    if (confirm('Are you sure you want to reset all templates to their default values? This action cannot be undone.')) {\n      // TODO: Implement reset functionality\n      console.log('Reset to default templates');\n    }\n  }\n\n  async exportZip(): Promise {\n    try {\n      if (!this.sessionId) {\n        console.error('No active session. Please refresh the page and try again.');\n        return;\n      }\n\n      console.log('Creating template package...');\n\n      // Call server-side ZIP creation endpoint for all templates\n      const response = await this.http.post(`/api/session/${this.sessionId}/download-all-templates`, {}, {\n        responseType: 'blob',\n        observe: 'response'\n      }).toPromise();\n\n      if (!response || !response.body) {\n        throw new Error('Failed to create template package');\n      }\n\n      // Get the ZIP file as a blob\n      const zipBlob = response.body;\n\n      // Get filename from response headers or construct it\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `compodoc-templates-${this.sessionId}.zip`;\n\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Create download link and trigger download\n      const url = URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('Template package downloaded successfully!');\n    } catch (error) {\n      console.error('Error downloading template package:', error);\n    }\n  }\n\n  trackByName(index: number, item: Template): string {\n    return item.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subtask.html":{"url":"classes/Subtask.html","title":"class - Subtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subtask/schemas/subtask.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                isDone\n                            \n                            \n                                    \n                                task\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subtask/schemas/subtask.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subtask/schemas/subtask.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        task\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId | Task\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Task', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subtask/schemas/subtask.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subtask/schemas/subtask.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Task } from '../../tasks/task.schema';\n\nexport type SubtaskDocument = Subtask & Document;\n\n@Schema()\nexport class Subtask {\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ default: false })\n  isDone: boolean;\n\n  @Prop({ type: Types.ObjectId, ref: 'Task', required: true })\n  task: Types.ObjectId | Task;\n}\n\nexport const SubtaskSchema = SchemaFactory.createForClass(Subtask);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubtaskController.html":{"url":"controllers/SubtaskController.html","title":"controller - SubtaskController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  SubtaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subtask/subtask.controller.ts\n        \n            \n                Prefix\n            \n            \n                subtasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateSubtaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/subtask/subtask.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateSubtaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/subtask/subtask.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/subtask/subtask.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/subtask/subtask.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdateSubtaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/subtask/subtask.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateSubtaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\n// src/subtasks/subtask.controller.ts\nimport { Controller, Post, Get, Param, Body, Put, Delete } from '@nestjs/common';\nimport { SubtaskService } from './subtask.service';\nimport { CreateSubtaskDto } from './dto/create-subtask.dto';\nimport { UpdateSubtaskDto } from './dto/update-subtask.dto';\n\n@Controller('subtasks')\nexport class SubtaskController {\n  constructor(private readonly subtaskService: SubtaskService) {}\n\n  @Post()\n  create(@Body() dto: CreateSubtaskDto) {\n    return this.subtaskService.create(dto);\n  }\n\n  @Get()\n  findAll() {\n    return this.subtaskService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: number) {\n    return this.subtaskService.findOne(id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: number, @Body() dto: UpdateSubtaskDto) {\n    return this.subtaskService.update(id, dto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: number) {\n    return this.subtaskService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubtaskGateway.html":{"url":"classes/SubtaskGateway.html","title":"class - SubtaskGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubtaskGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subtask/subtask.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastSubtaskUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subtask/subtask.gateway.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastSubtaskUpdate\n                        \n                    \n                \n            \n            \n                \nbroadcastSubtaskUpdate(event: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.gateway.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class SubtaskGateway {\n  @WebSocketServer() server: Server;\n\n  broadcastSubtaskUpdate(event: string, payload: any) {\n    this.server.emit(event, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubtaskModule.html":{"url":"modules/SubtaskModule.html","title":"module - SubtaskModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    SubtaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SubtaskModule\n\n\n\ncluster_SubtaskModule_providers\n\n\n\ncluster_SubtaskModule_exports\n\n\n\n\nSubtaskService \n\nSubtaskService \n\n\n\nSubtaskModule\n\nSubtaskModule\n\nSubtaskService  -->\n\nSubtaskModule->SubtaskService \n\n\n\n\n\nSubtaskService\n\nSubtaskService\n\nSubtaskModule -->\n\nSubtaskService->SubtaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subtask/subtask.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubtaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubtaskController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubtaskService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Subtask, SubtaskSchema } from './schemas/subtask.schema';\nimport { Task, TaskSchema } from '../tasks/task.schema'; \nimport { SubtaskService } from './subtask.service';\nimport { SubtaskController } from './subtask.controller';\nimport { SubtaskGateway } from './subtask.gateway';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Subtask.name, schema: SubtaskSchema }, { name: Task.name, schema: TaskSchema }])],\n  controllers: [SubtaskController],\n  providers: [SubtaskService, SubtaskGateway],\n  exports: [SubtaskService],\n})\nexport class SubtaskModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubtaskService.html":{"url":"injectables/SubtaskService.html","title":"injectable - SubtaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SubtaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subtask/subtask.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findAllForTask\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model, subtaskGateway: SubtaskGateway, subtaskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/subtask/subtask.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subtaskGateway\n                                                  \n                                                        \n                                                                        SubtaskGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subtaskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateSubtaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateSubtaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllForTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllForTask(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdateSubtaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subtask/subtask.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateSubtaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Subtask, SubtaskDocument } from './schemas/subtask.schema';\nimport { CreateSubtaskDto } from './dto/create-subtask.dto';\nimport { UpdateSubtaskDto } from './dto/update-subtask.dto';\nimport { Task } from '../tasks/task.schema';\nimport { SubtaskGateway } from './subtask.gateway';\n\n@Injectable()\nexport class SubtaskService {\n  constructor(\n    @InjectModel(Task.name) private readonly taskModel: Model,\n    private subtaskGateway: SubtaskGateway,\n    @InjectModel(Subtask.name) private readonly subtaskModel: Model,\n  ) {}\n\n  async create(dto: CreateSubtaskDto): Promise {\n    const task = await this.taskModel.findById(dto.taskId).exec();\n    if (!task) throw new Error('Task not found');\n    const subtask = new this.subtaskModel({ title: dto.title, task });\n    this.subtaskGateway.broadcastSubtaskUpdate('subtask.created', subtask);\n    return subtask.save();\n  }\n\n  findAll(): Promise {\n    return this.subtaskModel.find().populate('task').exec();\n  }\n\n  async findOne(id: number): Promise {\n    const subtask = await this.subtaskModel.findOne({ _id: id }).populate('task').exec();\n    if (!subtask) {\n      throw new Error('Subtask not found');\n    }\n    this.subtaskGateway.broadcastSubtaskUpdate('subtask.found', subtask);\n    return subtask;\n  }\n\n  async update(id: number, dto: UpdateSubtaskDto): Promise {\n    const updatedSubtask = await this.subtaskModel.findOneAndUpdate({ _id: id }, dto, { new: true, runValidators: true }).populate('task').exec();\n    if (!updatedSubtask) {\n      throw new Error('Subtask not found');\n    }\n    this.subtaskGateway.broadcastSubtaskUpdate('subtask.updated', updatedSubtask);\n    return updatedSubtask;\n  }\n\n  async remove(id: number): Promise {\n    const result = await this.subtaskModel.findByIdAndDelete(id).exec();\n    if (result) {\n      this.subtaskGateway.broadcastSubtaskUpdate('subtask.deleted', { id });\n    }\n  }\n\n  async findAllForTask(taskId: string): Promise {\n    const task = await this.taskModel.findById(taskId).exec();\n    if (!task) {\n      throw new Error('Task not found');\n    }\n    this.subtaskGateway.broadcastSubtaskUpdate('subtasks.foundForTask', { taskId });\n    return this.subtaskModel.find({ task: taskId }).populate('task').exec();\n  }\n}\n\nexport { SubtaskDocument as Subtask };\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                assignedTo\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                projectId\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                workspaceId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        assignedTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Project', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspaceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Task extends Document {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description: string;\n\n   // ✅ Add this new line to reference comments\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }] })\n  comments: Types.ObjectId[];\n\n  @Prop({ type: Types.ObjectId, ref: 'Workspace' })\n  workspaceId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'Project', required: true })\n  projectId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'User' })\n  assignedTo: Types.ObjectId;\n\n  @Prop({ default: 'pending' })\n  status: string;\n}\n\nexport const TaskSchema = SchemaFactory.createForClass(Task);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task-1.html":{"url":"classes/Task-1.html","title":"class - Task-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/schemas/task.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                assignee\n                            \n                            \n                                    \n                                    Optional\n                                assigneeUser\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    Optional\n                                column\n                            \n                            \n                                    \n                                    Optional\n                                comments\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                dueDate\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                priority\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                subtasks\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        assignee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        assigneeUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User | Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        column\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Column | Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Column', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Comment | Types.ObjectId)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Priority\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Subtask | Types.ObjectId)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/schemas/task.schema.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { User } from '../../users/user.schema';\nimport { Column } from '../../columns/schemas/column.schema';\nimport { Subtask } from '../../subtask/schemas/subtask.schema';\nimport { Comment } from '../../comments/comment.schema';\n\nexport enum TaskStatus {\n  TO_DO = 'To Do',\n  IN_PROGRESS = 'In Progress',\n  QA = 'QA',\n  BLOCKED = 'Blocked',\n  DONE = 'Done',\n}\n\nexport enum Priority {\n  LOW = 'Low',\n  MEDIUM = 'Medium',\n  HIGH = 'High',\n}\n\nexport enum Category {\n  Calendar = 'Calendar',\n  Workspace = 'Workspace',\n  IMPROVEMENT = 'Improvement',\n  Task = 'Task',\n}\n\n@Schema({ timestamps: true })\nexport class Task {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ type: String, ref: 'User' })\n  assignee?: string;\n\n  @Prop()\n  dueDate?: Date;\n\n  @Prop({ type: String, enum: Object.values(TaskStatus), default: TaskStatus.TO_DO })\n  status: TaskStatus;\n\n  @Prop({ type: String, enum: Object.values(Priority), default: Priority.MEDIUM })\n  priority: Priority;\n\n  @Prop({ default: false })\n  isDeleted: boolean;\n\n  @Prop({ type: String, enum: Object.values(Category), default: Category.Calendar })\n  category: Category;\n\n  @Prop({ type: Types.ObjectId, ref: 'Column', required: false })\n  column?: Column | Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: false })\n  assigneeUser?: User | Types.ObjectId;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Subtask' }], default: [] })\n  subtasks?: (Subtask | Types.ObjectId)[];\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], default: [] })\n  comments?: (Comment | Types.ObjectId)[];\n}\n\nexport type TaskDocument = Task & Document;\nexport const TaskSchema = SchemaFactory.createForClass(Task);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.controller.ts\n        \n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createSubtask\n                            \n                            \n                                    \n                                deleteSubtask\n                            \n                            \n                                    \n                                getSubtasks\n                            \n                            \n                                    \n                                updateSubtask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSubtask(taskId: number, dto: CreateSubtaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':taskId/subtasks')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateSubtaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubtask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('subtasks/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSubtasks(taskId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':taskId/subtasks')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubtask(id: number, dto: UpdateSubtaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('subtasks/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateSubtaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Post, Param, Body, Put, Delete, Get } from '@nestjs/common';\nimport { TaskService } from './task.service';\nimport { CreateSubtaskDto } from '../subtask/dto/create-subtask.dto';\nimport { UpdateSubtaskDto } from '../subtask/dto/update-subtask.dto';\nimport { SubtaskService } from '../subtask/subtask.service';\n\n\n@Controller('tasks')\nexport class TaskController {\n  constructor(\n    private readonly taskService: TaskService,\n    private readonly subtaskService: SubtaskService,\n  ) {}\n\n  // ...existing task routes\n\n  @Post(':taskId/subtasks')\n  createSubtask(\n    @Param('taskId') taskId: number,\n    @Body() dto: CreateSubtaskDto,\n  ) {\n    return this.subtaskService.create({ ...dto, taskId });\n  }\n\n  @Get(':taskId/subtasks')\n  getSubtasks(@Param('taskId') taskId: string) {\n    return this.subtaskService.findAllForTask(taskId);\n  }\n\n  @Put('subtasks/:id')\n  updateSubtask(\n    @Param('id') id: number,\n    @Body() dto: UpdateSubtaskDto,\n  ) {\n    return this.subtaskService.update(id, dto);\n  }\n\n  @Delete('subtasks/:id')\n  deleteSubtask(@Param('id') id: number) {\n    return this.subtaskService.remove(id);\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskGateway.html":{"url":"classes/TaskGateway.html","title":"class - TaskGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/calendar.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastTaskDeletion\n                            \n                            \n                                broadcastTaskUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calendar/calendar.gateway.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastTaskDeletion\n                        \n                    \n                \n            \n            \n                \nbroadcastTaskDeletion(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/calendar/calendar.gateway.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastTaskUpdate\n                        \n                    \n                \n            \n            \n                \nbroadcastTaskUpdate(task: CalendarTask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/calendar/calendar.gateway.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            CalendarTask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { CalendarTask } from '../schemas/calendartask.schema';\n\n@WebSocketGateway({ namespace: '/calendar' })\nexport class TaskGateway {\n  @WebSocketServer()\n  server: Server;\n\n  broadcastTaskUpdate(task: CalendarTask) {\n    this.server.emit('taskUpdated', task);\n  }\n\n  broadcastTaskDeletion(taskId: string) {\n    this.server.emit('taskDeleted', { id: taskId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskGateway-1.html":{"url":"classes/TaskGateway-1.html","title":"class - TaskGateway-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastTaskUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.gateway.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastTaskUpdate\n                        \n                    \n                \n            \n            \n                \nbroadcastTaskUpdate(event: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.gateway.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {WebSocketGateway, WebSocketServer} from '@nestjs/websockets';\n// import {MessageBody} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class TaskGateway {\n  @WebSocketServer()\n  server: Server;\n\n  broadcastTaskUpdate(event: string, payload: any) {\n    this.server.emit(event, payload);\n  } \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_imports\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_TaskModule_exports\n\n\n\n\nSubtaskModule\n\nSubtaskModule\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nSubtaskModule->TaskModule\n\n\n\n\n\nTaskService \n\nTaskService \n\nTaskService  -->\n\nTaskModule->TaskService \n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SubtaskModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TaskService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Task, TaskSchema } from './task.schema';\nimport { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { SubtaskModule } from '@/subtask/subtask.module';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Task.name, schema: TaskSchema }]),\n  SubtaskModule,\n],\n  controllers: [TaskController],\n  providers: [TaskService],\n  exports: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                countByStatus\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByProject\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/task.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        countByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    countByStatus(status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByProject(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Task } from './task.schema';\n\n@Injectable()\nexport class TaskService {\n  constructor(@InjectModel(Task.name) private taskModel: Model) {}\n\n  async create(data: Partial) {\n    const task = new this.taskModel(data);\n    return task.save();\n  }\n\n  async findAll() {\n    return this.taskModel.find().populate('projectId assignedTo').exec();\n  }\n\n  async findByProject(projectId: string) {\n    return this.taskModel.find({ projectId }).populate('assignedTo').exec();\n  }\n\n  async updateStatus(id: string, status: string) {\n    return this.taskModel.findByIdAndUpdate(id, { status }, { new: true }).exec();\n  }\n\n  async delete(id: string) {\n    return this.taskModel.findByIdAndDelete(id).exec();\n  }\n\n  async countByStatus(status: string): Promise {\n  return this.taskModel.countDocuments({ status });\n}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schemas/team.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                memberCount\n                            \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        memberCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schemas/team.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Member[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schemas/team.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schemas/team.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Member } from '../../teammember/entities/member.schema';\n\n@Schema({ timestamps: true })\nexport class Team extends Document {\n  @Prop({ type: String, required: true })\n  name: string; // e.g. Development Team\n\n  @Prop({ type: Number, default: 0 })\n  memberCount: number;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Member' }] })\n  members: Member[];\n\n}\nexport const TeamSchema = SchemaFactory.createForClass(Team);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TeamsController.html":{"url":"controllers/TeamsController.html","title":"controller - TeamsController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  TeamsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/teams.controller.ts\n        \n            \n                Prefix\n            \n            \n                teams\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMember\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                updateMember\n                            \n                            \n                                    \n                                    Async\n                                updateTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(id: string, name: string, role: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')\n                \n            \n\n                    \n                        \n                            Defined in src/teams/teams.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/teams/teams.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/teams/teams.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMember(id: string, name: string, role: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('members/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/teams/teams.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTeam(id: string, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/teams/teams.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Post, Body, Param, Patch } from '@nestjs/common';\nimport { TeamsService } from './teams.service';\nimport { Team } from './schemas/team.schema';\nimport { Member } from '../teammember/entities/member.schema';\n\n@Controller('teams')\nexport class TeamsController {\n  constructor(private readonly teamsService: TeamsService) {}\n\n  @Post()\n  create(@Body('name') name: string): Promise {\n    return this.teamsService.createTeam(name);\n  }\n\n  @Get()\n  findAll(): Promise {\n    return this.teamsService.getTeams();\n  }\n\n  @Post(':id/members')\n  addMember(\n    @Param('id') id: string,\n    @Body('name') name: string,\n    @Body('role') role: string,\n  ): Promise {\n    return this.teamsService.createMember(name, role, { id } as Team);\n  }\n\n  @Patch(':id')\nasync updateTeam(\n  @Param('id') id: string,\n  @Body('name') name: string,\n): Promise {\n  return this.teamsService.updateTeam(id, name);\n}\n\n @Patch('members/:id')\nasync updateMember(\n  @Param('id') id: string,\n  @Body('name') name: string,\n  @Body('role') role: string,\n): Promise {\n  return this.teamsService.updateMember(id, name, role);\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TeamsModule.html":{"url":"modules/TeamsModule.html","title":"module - TeamsModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    TeamsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TeamsModule\n\n\n\ncluster_TeamsModule_providers\n\n\n\n\nTeamsService\n\nTeamsService\n\n\n\nTeamsModule\n\nTeamsModule\n\nTeamsModule -->\n\nTeamsService->TeamsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/teams/teams.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TeamsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TeamsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { TeamsService } from './teams.service';\nimport { TeamsController } from './teams.controller';\nimport { Team, TeamSchema } from './schemas/team.schema';\nimport { Member, MemberSchema } from '../teammember/entities/member.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Team.name, schema: TeamSchema },\n      { name: Member.name, schema: MemberSchema },\n    ]),\n  ],\n  controllers: [TeamsController],\n  providers: [TeamsService],\n})\nexport class TeamsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamsService.html":{"url":"injectables/TeamsService.html","title":"injectable - TeamsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  TeamsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/teams.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMember\n                            \n                            \n                                    Async\n                                createTeam\n                            \n                            \n                                    Async\n                                getTeams\n                            \n                            \n                                    Async\n                                removeMember\n                            \n                            \n                                    Async\n                                updateMember\n                            \n                            \n                                    Async\n                                updateTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(teamModel: Model, memberModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/teams/teams.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        memberModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMember(name: string, role: string, teamIdOrDoc: string | Team)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teams/teams.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                teamIdOrDoc\n                                            \n                                                            string | Team\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTeam(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teams/teams.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTeams\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTeams()\n                \n            \n\n\n                    \n                        \n                            Defined in src/teams/teams.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeMember(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teams/teams.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMember(id: string, name: string, role: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teams/teams.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTeam(id: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teams/teams.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { Team } from './schemas/team.schema';\nimport { Member } from '../teammember/entities/member.schema';\n\n@Injectable()\nexport class TeamsService {\n  constructor(\n    @InjectModel(Team.name) private readonly teamModel: Model,\n    @InjectModel(Member.name) private readonly memberModel: Model,\n  ) {}\n\n  // Create a new team\n  async createTeam(name: string): Promise {\n    const team = new this.teamModel({ name });\n    return await team.save();\n  }\n\n  // Get all teams with members populated\n  async getTeams(): Promise {\n    return await this.teamModel.find().populate('members').exec();\n  }\n\n  // Create a new member and link to a team (accepts team id or team doc)\n  async createMember(name: string, role: string, teamIdOrDoc: string | Team): Promise {\n    // Resolve team id\n    const teamId = typeof teamIdOrDoc === 'string' ? new Types.ObjectId(teamIdOrDoc) : teamIdOrDoc._id;\n\n    // Ensure team exists\n    const team = await this.teamModel.findById(teamId).exec();\n    if (!team) throw new NotFoundException('Team not found');\n\n    // Create member\n    const member = new this.memberModel({ name, role, team: team._id });\n    await member.save();\n\n    // Atomically update team: increment count and push member id\n    await this.teamModel.findByIdAndUpdate(\n      team._id,\n      { $inc: { memberCount: 1 }, $push: { members: member._id } },\n      { new: true },\n    ).exec();\n\n    return member;\n  }\n\n  // Update team name\n  async updateTeam(id: string, name: string): Promise {\n    const updated = await this.teamModel.findByIdAndUpdate(\n      id,\n      { name },\n      { new: true },\n    ).populate('members').exec();\n\n    if (!updated) throw new NotFoundException('Team not found');\n    return updated;\n  }\n\n  // Update member details\n  async updateMember(id: string, name: string, role: string): Promise {\n    const updated = await this.memberModel.findByIdAndUpdate(\n      id,\n      { name, role },\n      { new: true },\n    ).populate('team').exec();\n\n    if (!updated) throw new NotFoundException('Member not found');\n    return updated;\n  }\n\n  // Optional: remove member (decrement count and remove from members array)\n  async removeMember(id: string): Promise {\n    const member = await this.memberModel.findById(id).exec();\n    if (!member) throw new NotFoundException('Member not found');\n\n    // Remove member doc\n    await this.memberModel.deleteOne({ _id: member._id }).exec();\n\n    // Decrement memberCount and pull from members\n    await this.teamModel.findByIdAndUpdate(\n      member.team,\n      { $inc: { memberCount: -1 }, $pull: { members: member._id } },\n      { new: true },\n    ).exec();\n\n    return { success: true };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Template.html":{"url":"interfaces/Template.html","title":"interface - Template","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Template\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            documentation/template-playground/template-playground.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"template\" | \"partial\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"template\" | \"partial\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\ninterface Template {\n  name: string;\n  path: string;\n  type: 'template' | 'partial';\n}\n\ninterface Session {\n  sessionId: string;\n  success: boolean;\n  message: string;\n}\n\ninterface CompoDocConfig {\n  hideGenerator?: boolean;\n  disableSourceCode?: boolean;\n  disableGraph?: boolean;\n  disableCoverage?: boolean;\n  disablePrivate?: boolean;\n  disableProtected?: boolean;\n  disableInternal?: boolean;\n  disableLifeCycleHooks?: boolean;\n  disableConstructors?: boolean;\n  disableRoutesGraph?: boolean;\n  disableSearch?: boolean;\n  disableDependencies?: boolean;\n  disableProperties?: boolean;\n  disableDomTree?: boolean;\n  disableTemplateTab?: boolean;\n  disableStyleTab?: boolean;\n  disableMainGraph?: boolean;\n  disableFilePath?: boolean;\n  disableOverview?: boolean;\n  hideDarkModeToggle?: boolean;\n  minimal?: boolean;\n  customFavicon?: string;\n  includes?: string;\n  includesName?: string;\n}\n\n@Component({\n  selector: 'template-playground-root',\n  template: `\n    \n      \n        Template Playground\n        \n          Session: {{sessionId.substring(0, 8)}}...\n          Saving...\n          Last saved: {{lastSaved | date:'short'}}\n        \n        \n          ⚙️ Config\n          Reset to Default\n          Download Templates\n        \n      \n\n      \n      \n        CompoDoc Configuration\n        \n           Hide Generator\n           Hide Dark Mode Toggle\n           Minimal Mode\n           Disable Overview\n           Disable File Path\n           Disable Source Code\n           Disable Graph\n           Disable Main Graph\n           Disable Routes Graph\n           Disable Coverage\n           Disable Search\n           Disable Dependencies\n           Disable Private\n           Disable Protected\n           Disable Internal\n           Disable Lifecycle Hooks\n           Disable Constructors\n           Disable Properties\n           Disable DOM Tree\n           Disable Template Tab\n           Disable Style Tab\n        \n      \n\n      \n        \n          \n            Templates\n            \n              \n                \n                {{template.name}}\n                {{template.type}}\n              \n            \n\n            \n              Loading templates...\n            \n          \n        \n\n        \n          \n            \n              {{selectedFile.path}}\n              {{selectedFile.type}}\n            \n            \n          \n\n          \n            \n              Live Preview\n              🔄 Refresh\n            \n            \n          \n        \n      \n    \n  `,\n  styles: [`\n    .template-playground {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    }\n\n    .template-playground-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .template-playground-status {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      font-size: 0.875rem;\n    }\n\n    .session-info {\n      color: #6c757d;\n      font-family: monospace;\n    }\n\n    .saving-indicator {\n      color: #ffc107;\n      font-weight: bold;\n    }\n\n    .last-saved {\n      color: #28a745;\n    }\n\n    .template-playground-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .config-panel {\n      background: #e9ecef;\n      padding: 1rem 2rem;\n      border-bottom: 1px solid #dee2e6;\n      transition: all 0.3s ease;\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    .config-panel.collapsed {\n      max-height: 0;\n      padding: 0 2rem;\n    }\n\n    .config-options {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n    }\n\n    .config-options label {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .template-playground-body {\n      display: flex;\n      flex: 1;\n      overflow: hidden;\n    }\n\n    .template-playground-sidebar {\n      width: 250px;\n      background: #f8f9fa;\n      border-right: 1px solid #dee2e6;\n      overflow-y: auto;\n    }\n\n    .template-file-list {\n      padding: 1rem;\n    }\n\n    .template-file-list h3 {\n      margin: 0 0 0.5rem 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n      color: #495057;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n\n    .file-list {\n      list-style: none;\n      padding: 0;\n      margin: 0 0 1.5rem 0;\n    }\n\n    .file-list li {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      transition: background-color 0.15s ease;\n    }\n\n    .file-list li:hover {\n      background: #e9ecef;\n    }\n\n    .file-list li.active {\n      background: #007bff;\n      color: white;\n    }\n\n    .file-icon {\n      margin-right: 0.5rem;\n      opacity: 0.7;\n    }\n\n    .file-type {\n      margin-left: auto;\n      font-size: 0.75rem;\n      opacity: 0.7;\n      text-transform: uppercase;\n    }\n\n    .loading-templates {\n      text-align: center;\n      color: #6c757d;\n      font-style: italic;\n      padding: 2rem;\n    }\n\n    .template-playground-main {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n\n    .template-playground-editor {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      border-right: 1px solid #dee2e6;\n    }\n\n    .editor-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .editor-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .file-type-badge {\n      background: #6c757d;\n      color: white;\n      padding: 0.125rem 0.5rem;\n      border-radius: 12px;\n      font-size: 0.75rem;\n      text-transform: uppercase;\n    }\n\n    .editor-container {\n      flex: 1;\n      position: relative;\n    }\n\n    .template-playground-preview {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .preview-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.75rem 1rem;\n      background: #f8f9fa;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .preview-header h4 {\n      margin: 0;\n      font-size: 0.875rem;\n      font-weight: 600;\n    }\n\n    .preview-frame {\n      flex: 1;\n      border: none;\n      background: white;\n    }\n\n    .btn {\n      padding: 0.375rem 0.75rem;\n      border: 1px solid transparent;\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-decoration: none;\n      cursor: pointer;\n      transition: all 0.15s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      border-color: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #0056b3;\n      border-color: #004085;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      border-color: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n      border-color: #4e555b;\n    }\n\n    .btn-success {\n      background: #28a745;\n      border-color: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n      border-color: #1c7430;\n    }\n\n    .btn-sm {\n      padding: 0.25rem 0.5rem;\n      font-size: 0.75rem;\n    }\n  `]\n})\nexport class TemplatePlaygroundComponent implements OnInit, OnDestroy {\n  @ViewChild('editorContainer', { static: true }) editorContainer!: ElementRef;\n  @ViewChild('previewFrame', { static: true }) previewFrame!: ElementRef;\n\n  sessionId: string = '';\n  templates: Template[] = [];\n  selectedFile: Template | null = null;\n  config: CompoDocConfig = {};\n  showConfigPanel: boolean = false;\n  saving: boolean = false;\n  lastSaved: Date | null = null;\n\n  private saveTimeout?: number;\n  private readonly SAVE_DELAY = 300; // 300ms debounce\n\n  get previewUrl(): string {\n    return this.sessionId ? `/api/session/${this.sessionId}/docs/` : '';\n  }\n\n  constructor(\n    private http: HttpClient,\n    private editorService: TemplateEditorService,\n    private zipService: ZipExportService,\n    private hbsService: HbsRenderService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      await this.createSession();\n      await this.loadSessionTemplates();\n      await this.loadSessionConfig();\n      this.initializeEditor();\n    } catch (error) {\n      console.error('Error initializing template playground:', error);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n  }\n\n  private async createSession(): Promise {\n    const response = await this.http.post('/api/session/create', {}).toPromise();\n    if (response && response.success) {\n      this.sessionId = response.sessionId;\n      console.log('Session created:', this.sessionId);\n    } else {\n      throw new Error('Failed to create session');\n    }\n  }\n\n  private async loadSessionTemplates(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/templates`).toPromise();\n    if (response && response.success) {\n      this.templates = response.templates;\n\n      // Auto-select the first template\n      if (this.templates.length > 0 && !this.selectedFile) {\n        this.selectFile(this.templates[0]);\n      }\n    }\n  }\n\n  private async loadSessionConfig(): Promise {\n    if (!this.sessionId) return;\n\n    const response = await this.http.get(`/api/session/${this.sessionId}/config`).toPromise();\n    if (response && response.success) {\n      this.config = response.config;\n    }\n  }\n\n  initializeEditor() {\n    this.editorService.initializeEditor(this.editorContainer.nativeElement);\n\n    // Set up debounced save on content change\n    this.editorService.setOnChangeCallback((content: string) => {\n      this.scheduleAutoSave(content);\n    });\n  }\n\n  async selectFile(template: Template) {\n    this.selectedFile = template;\n\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.get(`/api/session/${this.sessionId}/template/${template.path}`).toPromise();\n      if (response && response.success) {\n        this.editorService.setEditorContent(response.content, template.type === 'template' ? 'handlebars' : 'handlebars');\n      }\n    } catch (error) {\n      console.error('Error loading template:', error);\n    }\n  }\n\n  private scheduleAutoSave(content: string): void {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    // Clear existing timeout\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Set saving indicator\n    this.saving = true;\n\n    // Schedule new save\n    this.saveTimeout = window.setTimeout(async () => {\n      try {\n        await this.saveTemplate(content);\n        this.saving = false;\n        this.lastSaved = new Date();\n      } catch (error) {\n        console.error('Error saving template:', error);\n        this.saving = false;\n      }\n    }, this.SAVE_DELAY);\n  }\n\n  private async saveTemplate(content: string): Promise {\n    if (!this.selectedFile || !this.sessionId) return;\n\n    const response = await this.http.post(`/api/session/${this.sessionId}/template/${this.selectedFile.path}`, {\n      content\n    }).toPromise();\n\n    if (!response || !response.success) {\n      throw new Error('Failed to save template');\n    }\n  }\n\n  async updateConfig(): Promise {\n    if (!this.sessionId) return;\n\n    try {\n      const response = await this.http.post(`/api/session/${this.sessionId}/config`, {\n        config: this.config\n      }).toPromise();\n\n      if (response && response.success) {\n        // Config updated, documentation will be regenerated automatically\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  }\n\n  toggleConfigPanel(): void {\n    this.showConfigPanel = !this.showConfigPanel;\n  }\n\n  refreshPreview(): void {\n    if (this.previewFrame?.nativeElement) {\n      this.previewFrame.nativeElement.src = this.previewFrame.nativeElement.src;\n    }\n  }\n\n  resetToDefault(): void {\n    // Implementation for resetting to default templates\n    if (confirm('Are you sure you want to reset all templates to their default values? This action cannot be undone.')) {\n      // TODO: Implement reset functionality\n      console.log('Reset to default templates');\n    }\n  }\n\n  async exportZip(): Promise {\n    try {\n      if (!this.sessionId) {\n        console.error('No active session. Please refresh the page and try again.');\n        return;\n      }\n\n      console.log('Creating template package...');\n\n      // Call server-side ZIP creation endpoint for all templates\n      const response = await this.http.post(`/api/session/${this.sessionId}/download-all-templates`, {}, {\n        responseType: 'blob',\n        observe: 'response'\n      }).toPromise();\n\n      if (!response || !response.body) {\n        throw new Error('Failed to create template package');\n      }\n\n      // Get the ZIP file as a blob\n      const zipBlob = response.body;\n\n      // Get filename from response headers or construct it\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `compodoc-templates-${this.sessionId}.zip`;\n\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Create download link and trigger download\n      const url = URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('Template package downloaded successfully!');\n    } catch (error) {\n      console.error('Error downloading template package:', error);\n    }\n  }\n\n  trackByName(index: number, item: Template): string {\n    return item.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemplateEditorService.html":{"url":"injectables/TemplateEditorService.html","title":"injectable - TemplateEditorService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  TemplateEditorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            documentation/template-playground/template-editor.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editor\n                            \n                            \n                                    Private\n                                onChangeCallback\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                getLanguageFromFileType\n                            \n                            \n                                initializeEditor\n                            \n                            \n                                    Private\n                                registerHandlebarsLanguage\n                            \n                            \n                                setEditorContent\n                            \n                            \n                                setOnChangeCallback\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/template-editor.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getLanguageFromFileType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLanguageFromFileType(fileType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/template-editor.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeEditor\n                        \n                    \n                \n            \n            \n                \ninitializeEditor(container: HTMLElement)\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/template-editor.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                container\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerHandlebarsLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerHandlebarsLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/template-editor.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditorContent\n                        \n                    \n                \n            \n            \n                \nsetEditorContent(content: string, fileType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/template-editor.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setOnChangeCallback\n                        \n                    \n                \n            \n            \n                \nsetOnChangeCallback(callback: (value: string) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/template-editor.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in documentation/template-playground/template-editor.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onChangeCallback\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in documentation/template-playground/template-editor.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\ndeclare const monaco: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemplateEditorService {\n  private editor: any;\n  private onChangeCallback: ((value: string) => void) | null = null;\n\n  initializeEditor(container: HTMLElement) {\n    // Initialize Monaco Editor\n    this.editor = monaco.editor.create(container, {\n      value: '',\n      language: 'html',\n      theme: 'vs-dark',\n      automaticLayout: true,\n      minimap: {\n        enabled: true\n      },\n      scrollBeyondLastLine: false,\n      fontSize: 14,\n      wordWrap: 'on',\n      lineNumbers: 'on',\n      roundedSelection: false,\n      scrollbar: {\n        horizontal: 'visible',\n        vertical: 'visible'\n      },\n      overviewRulerLanes: 2,\n      quickSuggestions: {\n        other: true,\n        comments: true,\n        strings: true\n      },\n      parameterHints: {\n        enabled: true\n      },\n      autoClosingBrackets: 'always',\n      autoClosingQuotes: 'always',\n      suggestOnTriggerCharacters: true,\n      acceptSuggestionOnEnter: 'on',\n      tabCompletion: 'on',\n      wordBasedSuggestions: false\n    });\n\n    // Set up change listener\n    this.editor.onDidChangeModelContent(() => {\n      if (this.onChangeCallback) {\n        this.onChangeCallback(this.editor.getValue());\n      }\n    });\n\n    // Register custom language definitions\n    this.registerHandlebarsLanguage();\n  }\n\n  setEditorContent(content: string, fileType: string) {\n    if (this.editor) {\n      const language = this.getLanguageFromFileType(fileType);\n      const model = monaco.editor.createModel(content, language);\n      this.editor.setModel(model);\n    }\n  }\n\n  setOnChangeCallback(callback: (value: string) => void) {\n    this.onChangeCallback = callback;\n  }\n\n  private getLanguageFromFileType(fileType: string): string {\n    switch (fileType) {\n      case 'hbs':\n        return 'handlebars';\n      case 'css':\n      case 'scss':\n        return 'css';\n      case 'js':\n        return 'javascript';\n      case 'ts':\n        return 'typescript';\n      default:\n        return 'html';\n    }\n  }\n\n  private registerHandlebarsLanguage() {\n    // Register Handlebars language for Monaco Editor\n    if (monaco.languages.getLanguages().find((lang: any) => lang.id === 'handlebars')) {\n      return; // Already registered\n    }\n\n    monaco.languages.register({ id: 'handlebars' });\n\n    monaco.languages.setMonarchTokensProvider('handlebars', {\n      tokenizer: {\n        root: [\n          [/\\{\\{\\{/, { token: 'keyword', next: '@handlebars_unescaped' }],\n          [/\\{\\{/, { token: 'keyword', next: '@handlebars' }],\n          [//, 'comment', '@pop'],\n          [/[^-]+/, 'comment'],\n          [/./, 'comment']\n        ],\n\n        doctype: [\n          [/[^>]+/, 'metatag.content'],\n          [/>/, 'metatag', '@pop']\n        ],\n\n        tag: [\n          [/[ \\t\\r\\n]+/, 'white'],\n          [/(\\w+)(\\s*=\\s*)(\"([^\"]*)\")/, ['attribute.name', 'delimiter', 'attribute.value', 'attribute.value']],\n          [/(\\w+)(\\s*=\\s*)('([^']*)')/, ['attribute.name', 'delimiter', 'attribute.value', 'attribute.value']],\n          [/\\w+/, 'attribute.name'],\n          [/>/, 'delimiter', '@pop']\n        ]\n      }\n    });\n\n    monaco.languages.setLanguageConfiguration('handlebars', {\n      comments: {\n        blockComment: ['']\n      },\n      brackets: [\n        [''],\n        ['{{', '}}'],\n        ['{{{', '}}}']\n      ],\n      autoClosingPairs: [\n        { open: '' },\n        { open: '{{', close: '}}' },\n        { open: '{{{', close: '}}}' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n      ],\n      surroundingPairs: [\n        { open: '' },\n        { open: '{{', close: '}}' },\n        { open: '{{{', close: '}}}' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n      ]\n    });\n  }\n\n  destroy() {\n    if (this.editor) {\n      this.editor.dispose();\n      this.editor = null;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TemplatePlaygroundModule.html":{"url":"modules/TemplatePlaygroundModule.html","title":"module - TemplatePlaygroundModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    TemplatePlaygroundModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TemplatePlaygroundModule\n\n\n\ncluster_TemplatePlaygroundModule_declarations\n\n\n\ncluster_TemplatePlaygroundModule_providers\n\n\n\ncluster_TemplatePlaygroundModule_bootstrap\n\n\n\n\nTemplatePlaygroundComponent\n\nTemplatePlaygroundComponent\n\n\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule -->\n\nTemplatePlaygroundComponent->TemplatePlaygroundModule\n\n\n\n\n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent  -->\n\nTemplatePlaygroundModule->TemplatePlaygroundComponent \n\n\n\n\n\nHbsRenderService\n\nHbsRenderService\n\nTemplatePlaygroundModule -->\n\nHbsRenderService->TemplatePlaygroundModule\n\n\n\n\n\nTemplateEditorService\n\nTemplateEditorService\n\nTemplatePlaygroundModule -->\n\nTemplateEditorService->TemplatePlaygroundModule\n\n\n\n\n\nZipExportService\n\nZipExportService\n\nTemplatePlaygroundModule -->\n\nZipExportService->TemplatePlaygroundModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            documentation/template-playground/template-playground.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            TemplatePlaygroundComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            HbsRenderService\n                        \n                        \n                            TemplateEditorService\n                        \n                        \n                            ZipExportService\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            TemplatePlaygroundComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TemplatePlaygroundComponent } from './template-playground.component';\nimport { TemplateEditorService } from './template-editor.service';\nimport { ZipExportService } from './zip-export.service';\nimport { HbsRenderService } from './hbs-render.service';\n\n@NgModule({\n  declarations: [\n    TemplatePlaygroundComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [\n    TemplateEditorService,\n    ZipExportService,\n    HbsRenderService\n  ],\n  bootstrap: [TemplatePlaygroundComponent]\n})\nexport class TemplatePlaygroundModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateActivityDto.html":{"url":"classes/UpdateActivityDto.html","title":"class - UpdateActivityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateActivityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activity/dto/update-activity.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateActivityDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateActivityDto } from './create-activity.dto';\n\nexport class UpdateActivityDto extends PartialType(CreateActivityDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDto.html":{"url":"classes/UpdateCommentDto.html","title":"class - UpdateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/update-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/update-comment.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateCommentDto {\n  content!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommitmentDto.html":{"url":"classes/UpdateCommitmentDto.html","title":"class - UpdateCommitmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommitmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commitment/dto/update-commitment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCommitmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                archived\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        archived\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/update-commitment.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommitmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(CommitmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commitment/dto/update-commitment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCommitmentDto } from './create-commitment.dto';\nimport { IsEnum, IsOptional, IsBoolean } from 'class-validator';\nimport { CommitmentStatus } from '../commitments.schema';\n\nexport class UpdateCommitmentDto extends PartialType(CreateCommitmentDto) {\n  @IsOptional() @IsEnum(CommitmentStatus)\n  status?: CommitmentStatus;\n\n  @IsOptional() @IsBoolean()\n  archived?: boolean;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSubtaskDto.html":{"url":"classes/UpdateSubtaskDto.html","title":"class - UpdateSubtaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSubtaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subtask/dto/update-subtask.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                isDone\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/subtask/dto/update-subtask.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subtask/dto/update-subtask.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateSubtaskDto {\n  title?: string;\n  isDone?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calendar/dto/update-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                assigneeId\n                            \n                            \n                                    Optional\n                                dueDate\n                            \n                            \n                                    Optional\n                                endDate\n                            \n                            \n                                    Optional\n                                startDate\n                            \n                            \n                                    Optional\n                                status\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assigneeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/update-task.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/update-task.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/update-task.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/update-task.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/update-task.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/calendar/dto/update-task.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateTaskDto {\n  title?: string;\n  assigneeId?: string;\n  dueDate?: Date;\n  startDate?: Date;\n  endDate?: Date;\n  status?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateUserDto {\n  readonly name?: string;\n  readonly email?: string;\n  readonly password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            user/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in user/user.schema.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { UserRole } from './user-role.enum';\n\nexport type UserDocument = User & Document;\n\n@Schema({ timestamps: true, collection: 'polaris' })\nexport class User extends Document {\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({\n    type: String,\n    enum: Object.values(UserRole),\n    default: UserRole.DEVELOPER,\n  })\n  role: UserRole;\n\n  @Prop({ default: true })\n  isActive: boolean;\n\n  // Instead of @OneToMany, we use arrays of ObjectIds for Mongo relations\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Task' }] })\n  tasks: Types.ObjectId[];\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }] })\n  comments: Types.ObjectId[];\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comments\n                            \n                            \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isEmailVerified\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                tasks\n                            \n                            \n                                updatedAt\n                            \n                            \n                                    \n                                verificationToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verificationToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n// ⚠️ Import HydratedDocument instead of Document for the final type\nimport { Document, Types, HydratedDocument } from 'mongoose';\nimport { Notification } from '.././notifications/schemas/notification.schema';\nimport { Task } from '.././tasks/schemas/task.schema';\nimport { Comment } from '.././comments/comment.schema';\n\n@Schema({ timestamps: true })\nexport class User { // 💡 User class should NOT extend Document\n  @Prop({ unique: true, required: true })\n  email: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ default: true })\n  isActive: boolean;\n\n  @Prop({ default: false })\n  isEmailVerified: boolean;\n\n  @Prop({ type: String, default: null })\n  verificationToken: string;\n\n  // MongoDB automatically handles createdAt/updatedAt with timestamps\n  // You don't need to explicitly define this if timestamps: true is used, \n  // but keeping it won't hurt, though the schema property type is usually enough.\n  createdAt: Date; \n  updatedAt: Date; // Added standard Mongoose timestamp field\n\n  // References (Relations)\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Notification' }] })\n  notifications: Notification[];\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }] })\n  comments: Comment[];\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Task' }] })\n  tasks: Task[];\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n// ✅ CORRECT FIX: Use HydratedDocument which merges the schema fields \n// with the Mongoose Document methods and properties (like _id) correctly.\nexport type UserDocument = HydratedDocument;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Post, Body, Param, Delete, Put } from '@nestjs/common';\nimport { UsersService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UsersService) {}\n\n  @Post()\n  async create(@Body() data: CreateUserDto): Promise {\n    return await this.userService.create(data);\n  }\n\n  @Get()\n  async findAll(): Promise {\n    return await this.userService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise {\n    return await this.userService.findById(id);\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() data: UpdateUserDto): Promise {\n    return await this.userService.update(id, data);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    return await this.userService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUserModule\n\nUserModule\n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\n// users/users.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './user.schema';\nimport { UsersService } from './user.service';\nimport { UserController } from './user.controller';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])],\n  controllers: [UserController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UserModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            user/users.controller.ts\n        \n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in user/users.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in user/users.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in user/users.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Post, Delete, Param, Body } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n  \n  @Get()\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Post()\n  async create(@Body() createUserDto: { name: string; email: string; password: string }) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            user/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { User, UserSchema } from './user.schema'; //\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            user/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in user/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in user/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in user/users.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in user/users.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './user.schema';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {}\n\n  // create user\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = new this.userModel(createUserDto);\n    const saved = await newUser.save();\n    // go through unknown first to avoid TS \"may be a mistake\" cast complaint\n    return saved as unknown as UserDocument;\n  }\n\n  // find all users\n  async findAll(): Promise {\n    const users = await this.userModel.find().exec();\n    return users as unknown as UserDocument[];\n  }\n\n  // remove user by id\n  async remove(id: string): Promise {\n    await this.userModel.findByIdAndDelete(id).exec();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService-1.html":{"url":"injectables/UsersService-1.html","title":"injectable - UsersService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                countAll\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        countAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    countAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string | Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Document, Types } from 'mongoose';\nimport { User } from './user.schema';\nimport { CreateUserDto } from './dto/create-user.dto';\n\ntype UserDocument = User & Document;\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  // Create a new user\n  async create(dto: CreateUserDto): Promise {\n    const created = new this.userModel(dto);\n    return await created.save();\n  }\n\n  // Get all users\n  async findAll(): Promise {\n    return await this.userModel.find().exec();\n  }\n\n  // Find user by id\n  async findById(id: string | Types.ObjectId): Promise {\n    return await this.userModel.findById(id).exec();\n  }\n\n  // Find user by email\n  async findByEmail(email: string): Promise {\n    return await this.userModel.findOne({ email }).exec();\n  }\n\n  // Update user\n  async update(id: string, data: Partial): Promise {\n    const updated = await this.userModel.findByIdAndUpdate(id, data, { new: true }).exec();\n    if (!updated) throw new NotFoundException('User not found');\n    return updated;\n  }\n\n  // Delete user\n  async delete(id: string): Promise {\n    const res = await this.userModel.findByIdAndDelete(id).exec();\n    if (!res) throw new NotFoundException('User not found');\n    return { deleted: true };\n  }\n\n  // Count all users\n  async countAll(): Promise {\n    return await this.userModel.countDocuments().exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Workspace.html":{"url":"classes/Workspace.html","title":"class - Workspace","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Workspace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/workspace.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/workspace.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/workspace.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/workspace.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Workspace extends Document {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  owner: Types.ObjectId;\n\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'User' }], default: [] })\n  members: Types.ObjectId[];\n}\n\nexport const WorkspaceSchema = SchemaFactory.createForClass(Workspace);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Workspace-1.html":{"url":"classes/Workspace-1.html","title":"class - Workspace-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Workspace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/schemas/workspace.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                columns\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColumnModule[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspace.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspace.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Member[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspace.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspace.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WorkspaceTask[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspace.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Member } from '../../teammember/entities/member.schema';\nimport { WorkspaceTask } from './workspacetask.schema';\nimport { ColumnModule } from 'columns/column.module';\n\n@Schema({ timestamps: { createdAt: 'createdAt' } })\nexport class Workspace {\n  @Prop({ required: true, unique: true })\n  name: string;\n\n  // Relation: One Workspace has many Members\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'Member' }], default: [] })\n  members: Member[];\n\n  // Relation: One Workspace has many Tasks\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'WorkspaceTask' }], default: [] })\n  tasks: WorkspaceTask[];\n\n  // Relation: One Workspace has many Columns\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'ColumnSchema' }], default: [] })\n  columns: ColumnModule[];\n\n  @Prop({ type: Date, default: Date.now })\n  createdAt: Date;\n}\n\nexport type WorkspaceDocument = Workspace & Document;\nexport const WorkspaceSchema = SchemaFactory.createForClass(Workspace);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WorkspaceController.html":{"url":"controllers/WorkspaceController.html","title":"controller - WorkspaceController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  WorkspaceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/workspace.controller.ts\n        \n            \n                Prefix\n            \n            \n                workspaces\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addMember\n                            \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(workspaceId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/members/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/workspace/workspace.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateWorkspaceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/workspace/workspace.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateWorkspaceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/workspace/workspace.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/workspace/workspace.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/workspace/workspace.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\nimport { WorkspaceService } from './workspace.service';\nimport { CreateWorkspaceDto } from './dto/create-workspace.dto';\n\n@Controller('workspaces')\nexport class WorkspaceController {\n  constructor(private readonly workspaceService: WorkspaceService) {}\n\n  @Post()\n  async create(@Body() data: CreateWorkspaceDto) {\n    return await this.workspaceService.create(data);\n  }\n\n  @Get()\n  async findAll() {\n    return await this.workspaceService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return await this.workspaceService.findById(id);\n  }\n\n  @Put(':id/members/:userId')\n  async addMember(@Param('id') workspaceId: string, @Param('userId') userId: string) {\n    return await this.workspaceService.addMember(workspaceId, userId);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return await this.workspaceService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkspaceGateway.html":{"url":"classes/WorkspaceGateway.html","title":"class - WorkspaceGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkspaceGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/workspace.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastWorkspaceupdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/workspace.gateway.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastWorkspaceupdate\n                        \n                    \n                \n            \n            \n                \nbroadcastWorkspaceupdate(event: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.gateway.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n@WebSocketGateway({ cors: true })\nexport class WorkspaceGateway {\n  @WebSocketServer()\n  server: Server;\n\n  broadcastWorkspaceupdate(event: string, payload: any) {\n    this.server.emit(event, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WorkspaceModule.html":{"url":"modules/WorkspaceModule.html","title":"module - WorkspaceModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    WorkspaceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WorkspaceModule\n\n\n\ncluster_WorkspaceModule_providers\n\n\n\ncluster_WorkspaceModule_exports\n\n\n\n\nWorkspaceService \n\nWorkspaceService \n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nWorkspaceService  -->\n\nWorkspaceModule->WorkspaceService \n\n\n\n\n\nWorkspaceService\n\nWorkspaceService\n\nWorkspaceModule -->\n\nWorkspaceService->WorkspaceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/workspace/workspace.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WorkspaceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WorkspaceController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WorkspaceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Workspace, WorkspaceSchema } from './workspace.schema';\nimport { WorkspaceService } from './workspace.service';\nimport { WorkspaceController } from './workspace.controller';\nimport { Column, ColumnSchema } from '../columns/schemas/column.schema';\nimport { Task, TaskSchema } from '../tasks/schemas/task.schema';\nimport { WorkspaceGateway } from './workspace.gateway';\nimport { WorkspaceTask, WorkspaceTaskSchema } from './schemas/workspacetask.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Workspace.name, schema: WorkspaceSchema },\n      { name: Column.name, schema: ColumnSchema },\n      { name: Task.name, schema: TaskSchema },\n      { name: WorkspaceTask.name, schema: WorkspaceTaskSchema },\n    ]),\n  ],\n  controllers: [WorkspaceController],\n  providers: [WorkspaceService, WorkspaceGateway],\n  exports: [WorkspaceService],\n})\nexport class WorkspaceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WorkspaceService.html":{"url":"injectables/WorkspaceService.html","title":"injectable - WorkspaceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  WorkspaceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/workspace.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                countActiveWorkspaces\n                            \n                            \n                                    Async\n                                countAllWorkspaces\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(workspaceModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/workspace/workspace.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        workspaceModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(workspaceId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workspaceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        countActiveWorkspaces\n                        \n                    \n                \n            \n            \n                \n                        \n                    countActiveWorkspaces()\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        countAllWorkspaces\n                        \n                    \n                \n            \n            \n                \n                        \n                    countAllWorkspaces()\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateWorkspaceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateWorkspaceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workspace/workspace.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { Workspace } from './workspace.schema';\nimport { CreateWorkspaceDto } from './dto/create-workspace.dto';\n\n@Injectable()\nexport class WorkspaceService {\n  constructor(@InjectModel(Workspace.name) private workspaceModel: Model) {}\n\n  async create(dto: CreateWorkspaceDto): Promise {\n  const members = dto.members\n    ? dto.members\n        .filter(Boolean)\n        .map((m) => (Types.ObjectId.isValid(String(m)) ? new Types.ObjectId(String(m)) : undefined))\n        .filter((m): m is Types.ObjectId => !!m)\n    : [];\n\n  const payload: Partial = {\n    name: dto.name,\n    ...(dto.description ? { description: dto.description } : {}),\n    ...(members.length ? { members } : {}),\n  };\n\n  const created = new this.workspaceModel(payload);\n  return await created.save();\n}\n  \n  async findAll() {\n    return this.workspaceModel.find().populate('owner members').exec();\n  }\n\n  async findById(id: string) {\n    return this.workspaceModel.findById(id).populate('owner members').exec();\n  }\n\n  async addMember(workspaceId: string, userId: string) {\n    return this.workspaceModel.findByIdAndUpdate(\n      workspaceId,\n      { $addToSet: { members: userId } },\n      { new: true },\n    );\n  }\n\n  async delete(id: string) {\n    return this.workspaceModel.findByIdAndDelete(id);\n  }\n\n  async countActiveWorkspaces(): Promise {\n    return this.workspaceModel.countDocuments({ isActive: true });\n  }\n\n  async countAllWorkspaces(): Promise {\n    return this.workspaceModel.countDocuments();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkspaceSubtask.html":{"url":"classes/WorkspaceSubtask.html","title":"class - WorkspaceSubtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkspaceSubtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/schemas/WorkspaceSubtask.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completed\n                            \n                            \n                                    \n                                task\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/WorkspaceSubtask.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        task\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkspaceTask\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'WorkspaceTask', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/WorkspaceSubtask.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/WorkspaceSubtask.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { WorkspaceTask } from './workspacetask.schema';\n\n@Schema({ timestamps: true })\nexport class WorkspaceSubtask extends Document {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ default: false })\n  completed: boolean;\n\n  @Prop({ type: Types.ObjectId, ref: 'WorkspaceTask', required: true })\n  task: WorkspaceTask;\n}\n\nexport const WorkspaceSubtaskSchema = SchemaFactory.createForClass(WorkspaceSubtask);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkspaceTask.html":{"url":"classes/WorkspaceTask.html","title":"class - WorkspaceTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkspaceTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workspace/schemas/workspacetask.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                subtasks\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                workspace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspacetask.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"todo\" | \"in-progress\" | \"done\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: 'todo'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspacetask.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WorkspaceSubtask[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspacetask.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspacetask.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workspace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Workspace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Workspace', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workspace/schemas/workspacetask.schema.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Workspace } from './workspace.schema';\nimport { WorkspaceSubtask } from './WorkspaceSubtask.schema';\n\n@Schema()\nexport class WorkspaceTask {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ \n    type: String, \n    enum: ['todo', 'in-progress', 'done'], \n    default: 'todo' \n  })\n  status: 'todo' | 'in-progress' | 'done';\n\n  // Relation: each task belongs to one workspace\n  @Prop({ type: Types.ObjectId, ref: 'Workspace', required: true })\n  workspace: Workspace;\n\n  // Relation: a task can have multiple subtasks\n  @Prop({ type: [{ type: Types.ObjectId, ref: 'WorkspaceSubtask' }], default: [] })\n  subtasks: WorkspaceSubtask[];\n}\n\nexport type WorkspaceTaskDocument = WorkspaceTask & Document;\nexport const WorkspaceTaskSchema = SchemaFactory.createForClass(WorkspaceTask);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ZipExportService.html":{"url":"injectables/ZipExportService.html","title":"injectable - ZipExportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ZipExportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            documentation/template-playground/zip-export.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                downloadBlob\n                            \n                            \n                                exportTemplates\n                            \n                            \n                                    Private\n                                generateReadme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        downloadBlob\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadBlob(blob: Blob, filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/zip-export.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportTemplates\n                        \n                    \n                \n            \n            \n                \nexportTemplates(files: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/zip-export.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateReadme\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateReadme()\n                \n            \n\n\n                    \n                        \n                            Defined in documentation/template-playground/zip-export.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\ndeclare const JSZip: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ZipExportService {\n\n  exportTemplates(files: any[]) {\n    const zip = new JSZip();\n\n    // Add all template files to the ZIP\n    files.forEach(file => {\n      zip.file(file.path, file.content);\n    });\n\n    // Add a README with instructions\n    const readme = this.generateReadme();\n    zip.file('README.md', readme);\n\n    // Generate and download the ZIP file\n    zip.generateAsync({ type: 'blob' })\n      .then((content: Blob) => {\n        this.downloadBlob(content, 'compodoc-templates.zip');\n      });\n  }\n\n  private generateReadme(): string {\n    return `# Compodoc Custom Templates\n\nThis ZIP file contains customized templates for Compodoc documentation generation.\n\n## Contents\n\n- **Templates** (\\`.hbs\\` files): Handlebars templates for generating documentation pages\n- **Styles** (\\`.css\\` files): Stylesheets for customizing the appearance\n- **Scripts** (\\`.js\\` files): JavaScript files for additional functionality\n\n## Usage\n\n1. Extract this ZIP file to a directory on your system\n2. Use the \\`--templates\\` flag when running Compodoc to specify the path to your custom templates:\n\n   \\`\\`\\`bash\n   compodoc -p tsconfig.json --templates ./path/to/custom/templates/\n   \\`\\`\\`\n\n## Template Structure\n\n- \\`page.hbs\\` - Main page template\n- \\`partials/\\` - Directory containing partial templates\n- \\`styles/\\` - Directory containing CSS files\n- \\`js/\\` - Directory containing JavaScript files\n\n## Customization Tips\n\n1. **Templates**: Use Handlebars syntax to customize the HTML structure\n2. **Styles**: Modify CSS to change colors, fonts, layout, etc.\n3. **Scripts**: Add custom JavaScript functionality\n\n## Backup\n\nAlways keep a backup of your original templates before making changes.\n\n## Documentation\n\nFor more information about customizing Compodoc templates, visit:\nhttps://compodoc.app/guides/template-customization.html\n\nGenerated by Compodoc Template Playground\n`;\n  }\n\n  private downloadBlob(blob: Blob, filename: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.style.display = 'none';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        columns/column.controller.ts\n            \n            controller\n            ColumnController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        columns/column.gateway.ts\n            \n            class\n            ColumnGateway\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        columns/column.service.ts\n            \n            injectable\n            ColumnService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        columns/entities/column.schema.ts\n            \n            class\n            Column\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        columns/entities/column.schema.ts\n            \n            variable\n            ColumnSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        columns/entities/column.schema.ts\n            \n            type alias\n            ColumnDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        columns/schemas/column.schema.ts\n            \n            class\n            Column\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        columns/schemas/column.schema.ts\n            \n            variable\n            ColumnSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        documentation/template-playground/hbs-render.service.ts\n            \n            injectable\n            HbsRenderService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        documentation/template-playground/hbs-render.service.ts\n            \n            variable\n            Handlebars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        documentation/template-playground/template-editor.service.ts\n            \n            injectable\n            TemplateEditorService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        documentation/template-playground/template-editor.service.ts\n            \n            variable\n            monaco\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        documentation/template-playground/template-playground.component.ts\n            \n            component\n            TemplatePlaygroundComponent\n            \n                0 %\n                (0/28)\n            \n        \n        \n            \n                \n                        documentation/template-playground/template-playground.component.ts\n            \n            interface\n            CompoDocConfig\n            \n                0 %\n                (0/25)\n            \n        \n        \n            \n                \n                        documentation/template-playground/template-playground.component.ts\n            \n            interface\n            Session\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        documentation/template-playground/template-playground.component.ts\n            \n            interface\n            Template\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        documentation/template-playground/zip-export.service.ts\n            \n            injectable\n            ZipExportService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        documentation/template-playground/zip-export.service.ts\n            \n            variable\n            JSZip\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/activity/activity.controller.ts\n            \n            controller\n            ActivityController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/activity/activity.service.ts\n            \n            injectable\n            ActivityService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/activity/dto/create-activity.dto.ts\n            \n            class\n            CreateActivityDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/activity/dto/update-activity.dto.ts\n            \n            class\n            UpdateActivityDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/activity/schemas/activity.schema.ts\n            \n            class\n            Activity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/activity/schemas/activity.schema.ts\n            \n            variable\n            ActivitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            interface\n            LocalAuthenticatedRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            ResendVerificationUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/auth/auth.service.ts\n            \n            type alias\n            JwtPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/dto/resend-verification.dto.ts\n            \n            class\n            ResendVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/calendar/calendar.controller.ts\n            \n            controller\n            CalendarController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/calendar/calendar.gateway.ts\n            \n            class\n            TaskGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/calendar/calendar.module.ts\n            \n            class\n            CalendarModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/calendar/calendar.service.ts\n            \n            injectable\n            CalendarService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/calendar/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/calendar/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/calendar/schemas/calendar-task.schema.ts\n            \n            class\n            CalendarTask\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/calendar/schemas/calendar-task.schema.ts\n            \n            variable\n            CalendarTaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/calendar/schemas/calendar-task.schema.ts\n            \n            type alias\n            CalendarTaskDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/columns/column.controller.ts\n            \n            controller\n            ColumnController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/columns/column.gateway.ts\n            \n            class\n            ColumnGateway\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/columns/column.service.ts\n            \n            injectable\n            ColumnService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/columns/schemas/column.schema.ts\n            \n            class\n            Column\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/columns/schemas/column.schema.ts\n            \n            variable\n            ColumnModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/columns/schemas/column.schema.ts\n            \n            variable\n            ColumnSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/comments/comment.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/comments/comment.gateway.ts\n            \n            class\n            CommentGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/comments/comment.schema.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/comments/comment.schema.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/comments/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/comments/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.controller.ts\n            \n            controller\n            CommitmentsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.controller.ts\n            \n            interface\n            CommitmentQuery\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.controller.ts\n            \n            type alias\n            SortType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.controller.ts\n            \n            type alias\n            TabType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.cron.ts\n            \n            injectable\n            CommitmentsCron\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.gateway.ts\n            \n            class\n            CommitmentsGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.schema.ts\n            \n            class\n            Commitment\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.schema.ts\n            \n            variable\n            CommitmentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commitment/commitments.service.ts\n            \n            injectable\n            CommitmentsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/commitment/dto/create-commitment.dto.ts\n            \n            class\n            CreateCommitmentDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/commitment/dto/update-commitment.dto.ts\n            \n            class\n            UpdateCommitmentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/commitment/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commitment/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commitment/roles.guard.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/commitment/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/guards/api-keys.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/dashboard/dashboard.controller.ts\n            \n            controller\n            DashboardController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/dashboard/dashboard.controller.ts\n            \n            interface\n            AuthenticatedRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/dashboard/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/dashboard/dto/create-meeting.dto.ts\n            \n            class\n            CreateMeetingDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/dashboard/dto/dashboard-metrics.dto.ts\n            \n            class\n            DashboardMetricsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/dashboard/dto/meeting-response.dto.ts\n            \n            class\n            MeetingResponseDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/dashboard/schemas/meeting.schema.ts\n            \n            class\n            Meeting\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/dashboard/schemas/meeting.schema.ts\n            \n            variable\n            MeetingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/dashboard/schemas/meeting.schema.ts\n            \n            type alias\n            MeetingDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/events/events.gateway.ts\n            \n            class\n            EventsGateway\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/notifications/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/notifications/dto/mark-read.dto.ts\n            \n            class\n            MarkReadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/notifications/notification.cleanup.ts\n            \n            injectable\n            NotificationCleanup\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/notifications/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/notifications/notification.controller.ts\n            \n            interface\n            NotificationResponse\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                        src/notifications/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/notifications/schemas/notification.schema.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/notifications/schemas/notification.schema.ts\n            \n            variable\n            NotificationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/notifications/schemas/notification.schema.ts\n            \n            type alias\n            NotificationDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/notifications/schemas/notification.schema.ts\n            \n            type alias\n            NotificationType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/project/project.controller.ts\n            \n            controller\n            ProjectController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/project/project.schema.ts\n            \n            class\n            Project\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/project/project.schema.ts\n            \n            variable\n            ProjectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/project/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/schemas/calendartask.schema.ts\n            \n            class\n            CalendarTask\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/schemas/calendartask.schema.ts\n            \n            variable\n            CalendarTaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/calendaruser.schema.ts\n            \n            class\n            CalendarUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/schemas/calendaruser.schema.ts\n            \n            variable\n            CalendarUserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/calendarworkspace.schema.ts\n            \n            class\n            CalendarWorkspace\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/schemas/calendarworkspace.schema.ts\n            \n            variable\n            CalendarWorkspaceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subtask/dto/create-subtask.dto.ts\n            \n            class\n            CreateSubtaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/subtask/dto/update-subtask.dto.ts\n            \n            class\n            UpdateSubtaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/subtask/schemas/subtask.schema.ts\n            \n            class\n            Subtask\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/subtask/schemas/subtask.schema.ts\n            \n            variable\n            SubtaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subtask/schemas/subtask.schema.ts\n            \n            type alias\n            SubtaskDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subtask/subtask.controller.ts\n            \n            controller\n            SubtaskController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/subtask/subtask.gateway.ts\n            \n            class\n            SubtaskGateway\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/subtask/subtask.service.ts\n            \n            injectable\n            SubtaskService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/tasks/schemas/task.schema.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/tasks/schemas/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tasks/schemas/task.schema.ts\n            \n            type alias\n            TaskDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tasks/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/tasks/task.gateway.ts\n            \n            class\n            TaskGateway\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/tasks/task.schema.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/tasks/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tasks/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/teammember/entities/member.schema.ts\n            \n            class\n            Member\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/teammember/entities/member.schema.ts\n            \n            variable\n            MemberSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/teams/schemas/team.schema.ts\n            \n            class\n            Team\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/teams/schemas/team.schema.ts\n            \n            variable\n            TeamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/teams/teams.controller.ts\n            \n            controller\n            TeamsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/teams/teams.service.ts\n            \n            injectable\n            TeamsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/user.schema.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/user.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/users/user.service.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/dto/add-member .dto.ts\n            \n            class\n            AddMemberDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/workspace/dto/add-member.dto.ts\n            \n            class\n            AddMemberDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/workspace/dto/create-workspace.dto.ts\n            \n            class\n            CreateWorkspaceDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/workspace/member.schema.ts\n            \n            class\n            Member\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/workspace/member.schema.ts\n            \n            variable\n            MemberSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/WorkspaceSubtask.schema.ts\n            \n            class\n            WorkspaceSubtask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/WorkspaceSubtask.schema.ts\n            \n            variable\n            WorkspaceSubtaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/workspace.schema.ts\n            \n            class\n            Workspace\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/workspace.schema.ts\n            \n            variable\n            WorkspaceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/workspace.schema.ts\n            \n            type alias\n            WorkspaceDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/workspacetask.schema.ts\n            \n            class\n            WorkspaceTask\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/workspacetask.schema.ts\n            \n            variable\n            WorkspaceTaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/schemas/workspacetask.schema.ts\n            \n            type alias\n            WorkspaceTaskDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/workspace.controller.ts\n            \n            controller\n            WorkspaceController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/workspace/workspace.gateway.ts\n            \n            class\n            WorkspaceGateway\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/workspace/workspace.schema.ts\n            \n            class\n            Workspace\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/workspace/workspace.schema.ts\n            \n            variable\n            WorkspaceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/workspace/workspace.service.ts\n            \n            injectable\n            WorkspaceService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        user/dto/create-user.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        user/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        user/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        user/user.schema.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        user/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        user/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @google/generative-ai : ^0.24.1\n        \n            @nestjs/axios : ^3.1.3\n        \n            @nestjs/cache-manager : ^2.2.2\n        \n            @nestjs/common : ^10.4.7\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.4.7\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/mongoose : ^10.0.6\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.4.7\n        \n            @nestjs/platform-socket.io : ^10.4.7\n        \n            @nestjs/schedule : ^4.0.1\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/throttler : ^5.0.1\n        \n            @nestjs/websockets : ^10.4.7\n        \n            @types/cache-manager : ^4.0.6\n        \n            bcryptjs : ^3.0.2\n        \n            cache-manager : ^5.4.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            date-fns : ^2.30.0\n        \n            dotenv : ^17.2.3\n        \n            helmet : ^7.1.0\n        \n            joi : ^17.11.0\n        \n            jsonwebtoken : ^9.0.2\n        \n            mongoose : ^8.0.3\n        \n            nodemailer : ^6.9.7\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pino-http : ^8.3.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.7.4\n        \n            swagger-ui-express : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Category   (src/.../task.schema.ts)\n                        \n                        \n                            ColumnName   (columns/.../column.schema.ts)\n                        \n                        \n                            ColumnName   (columns/.../column.schema.ts)\n                        \n                        \n                            ColumnName   (src/.../column.schema.ts)\n                        \n                        \n                            CommitmentStatus   (src/.../commitments.schema.ts)\n                        \n                        \n                            Priority   (src/.../task.schema.ts)\n                        \n                        \n                            TaskStatus   (src/.../task.schema.ts)\n                        \n                        \n                            UserRole   (user/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tasks/schemas/task.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        Category\n                    \n                \n                        \n                            \n                                 Calendar\n                            \n                        \n                        \n                            \n                                Value : Calendar\n                            \n                        \n                        \n                            \n                                 Workspace\n                            \n                        \n                        \n                            \n                                Value : Workspace\n                            \n                        \n                        \n                            \n                                 IMPROVEMENT\n                            \n                        \n                        \n                            \n                                Value : Improvement\n                            \n                        \n                        \n                            \n                                 Task\n                            \n                        \n                        \n                            \n                                Value : Task\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Priority\n                    \n                \n                        \n                            \n                                 LOW\n                            \n                        \n                        \n                            \n                                Value : Low\n                            \n                        \n                        \n                            \n                                 MEDIUM\n                            \n                        \n                        \n                            \n                                Value : Medium\n                            \n                        \n                        \n                            \n                                 HIGH\n                            \n                        \n                        \n                            \n                                Value : High\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : To Do\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : In Progress\n                            \n                        \n                        \n                            \n                                 QA\n                            \n                        \n                        \n                            \n                                Value : QA\n                            \n                        \n                        \n                            \n                                 BLOCKED\n                            \n                        \n                        \n                            \n                                Value : Blocked\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : Done\n                            \n                        \n            \n        \n\n    columns/entities/column.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnName\n                    \n                \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : To Do\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : In Progress\n                            \n                        \n                        \n                            \n                                 QA\n                            \n                        \n                        \n                            \n                                Value : QA\n                            \n                        \n                        \n                            \n                                 BLOCKED\n                            \n                        \n                        \n                            \n                                Value : Blocked\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : Done\n                            \n                        \n            \n        \n\n    columns/schemas/column.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnName\n                    \n                \n                        \n                            \n                                 TODO\n                            \n                        \n                        \n                            \n                                Value : TODO\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n    src/columns/schemas/column.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnName\n                    \n                \n                        \n                            \n                                 TO_DO\n                            \n                        \n                        \n                            \n                                Value : To Do\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : In Progress\n                            \n                        \n                        \n                            \n                                 QA\n                            \n                        \n                        \n                            \n                                Value : QA\n                            \n                        \n                        \n                            \n                                 BLOCKED\n                            \n                        \n                        \n                            \n                                Value : Blocked\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : Done\n                            \n                        \n            \n        \n\n    src/commitment/commitments.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        CommitmentStatus\n                    \n                \n                        \n                            \n                                 NOT_STARTED\n                            \n                        \n                        \n                            \n                                Value : Not Started\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : In Progress\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : Completed\n                            \n                        \n            \n        \n\n    user/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 DEVELOPER\n                            \n                        \n                        \n                            \n                                Value : developer\n                            \n                        \n                        \n                            \n                                 DESIGNER\n                            \n                        \n                        \n                            \n                                Value : designer\n                            \n                        \n                        \n                            \n                                 SCRUM_MASTER\n                            \n                        \n                        \n                            \n                                Value : scrum master\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ActivityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CalendarTaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ColumnModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ColumnModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommitmentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DashboardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProjectModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubtaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TeamsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TemplatePlaygroundModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WorkspaceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ActivityModule\n\n\n\ncluster_ActivityModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CalendarTaskModule\n\n\n\ncluster_CalendarTaskModule_exports\n\n\n\ncluster_CalendarTaskModule_providers\n\n\n\ncluster_ColumnModule\n\n\n\ncluster_ColumnModule_exports\n\n\n\ncluster_ColumnModule_providers\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_exports\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_CommitmentsModule\n\n\n\ncluster_CommitmentsModule_exports\n\n\n\ncluster_CommitmentsModule_providers\n\n\n\ncluster_DashboardModule\n\n\n\ncluster_DashboardModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_ProjectModule\n\n\n\ncluster_ProjectModule_exports\n\n\n\ncluster_ProjectModule_providers\n\n\n\ncluster_SubtaskModule\n\n\n\ncluster_SubtaskModule_exports\n\n\n\ncluster_SubtaskModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_exports\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_TeamsModule\n\n\n\ncluster_TeamsModule_providers\n\n\n\ncluster_TemplatePlaygroundModule\n\n\n\ncluster_TemplatePlaygroundModule_declarations\n\n\n\ncluster_TemplatePlaygroundModule_bootstrap\n\n\n\ncluster_TemplatePlaygroundModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_WorkspaceModule\n\n\n\ncluster_WorkspaceModule_exports\n\n\n\ncluster_WorkspaceModule_providers\n\n\n\n\nActivityService\n\nActivityService\n\n\n\nActivityModule\n\nActivityModule\n\nActivityModule -->\n\nActivityService->ActivityModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nCommentService \n\nCommentService \n\nCommentService  -->\n\nCommentModule->CommentService \n\n\n\n\n\nCommitmentsModule\n\nCommitmentsModule\n\nAppModule -->\n\nCommitmentsModule->AppModule\n\n\n\n\n\nCommitmentsService \n\nCommitmentsService \n\nCommitmentsService  -->\n\nCommitmentsModule->CommitmentsService \n\n\n\n\n\nDashboardModule\n\nDashboardModule\n\nAppModule -->\n\nDashboardModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nProjectModule\n\nProjectModule\n\nAppModule -->\n\nProjectModule->AppModule\n\n\n\n\n\nProjectService \n\nProjectService \n\nProjectService  -->\n\nProjectModule->ProjectService \n\n\n\n\n\nSubtaskModule\n\nSubtaskModule\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nSubtaskModule->TaskModule\n\n\n\nAppModule -->\n\nSubtaskModule->AppModule\n\n\n\n\n\nSubtaskService \n\nSubtaskService \n\nSubtaskService  -->\n\nSubtaskModule->SubtaskService \n\n\n\nDashboardModule -->\n\nTaskModule->DashboardModule\n\n\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nTaskService \n\nTaskService \n\nTaskService  -->\n\nTaskModule->TaskService \n\n\n\n\n\nTeamsModule\n\nTeamsModule\n\nAppModule -->\n\nTeamsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nDashboardModule -->\n\nUserModule->DashboardModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nWorkspaceModule\n\nWorkspaceModule\n\nDashboardModule -->\n\nWorkspaceModule->DashboardModule\n\n\n\nAppModule -->\n\nWorkspaceModule->AppModule\n\n\n\n\n\nWorkspaceService \n\nWorkspaceService \n\nWorkspaceService  -->\n\nWorkspaceModule->WorkspaceService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nAuthModule -->\n\nMailService->AuthModule\n\n\n\n\n\nCalendarService \n\nCalendarService \n\n\n\nCalendarTaskModule\n\nCalendarTaskModule\n\nCalendarService  -->\n\nCalendarTaskModule->CalendarService \n\n\n\n\n\nCalendarService\n\nCalendarService\n\nCalendarTaskModule -->\n\nCalendarService->CalendarTaskModule\n\n\n\n\n\nColumnService \n\nColumnService \n\n\n\nColumnModule\n\nColumnModule\n\nColumnService  -->\n\nColumnModule->ColumnService \n\n\n\nColumnService  -->\n\nColumnModule->ColumnService \n\n\n\n\n\nColumnService\n\nColumnService\n\nColumnModule -->\n\nColumnService->ColumnModule\n\n\n\nColumnModule -->\n\nColumnService->ColumnModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nCommitmentsCron\n\nCommitmentsCron\n\nCommitmentsModule -->\n\nCommitmentsCron->CommitmentsModule\n\n\n\n\n\nCommitmentsService\n\nCommitmentsService\n\nCommitmentsModule -->\n\nCommitmentsService->CommitmentsModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nDashboardModule -->\n\nDashboardService->DashboardModule\n\n\n\n\n\nNotificationCleanup\n\nNotificationCleanup\n\nNotificationModule -->\n\nNotificationCleanup->NotificationModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectModule -->\n\nProjectService->ProjectModule\n\n\n\n\n\nSubtaskService\n\nSubtaskService\n\nSubtaskModule -->\n\nSubtaskService->SubtaskModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nTeamsService\n\nTeamsService\n\nTeamsModule -->\n\nTeamsService->TeamsModule\n\n\n\n\n\nTemplatePlaygroundComponent\n\nTemplatePlaygroundComponent\n\n\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule\n\nTemplatePlaygroundModule -->\n\nTemplatePlaygroundComponent->TemplatePlaygroundModule\n\n\n\n\n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent \n\nTemplatePlaygroundComponent  -->\n\nTemplatePlaygroundModule->TemplatePlaygroundComponent \n\n\n\n\n\nHbsRenderService\n\nHbsRenderService\n\nTemplatePlaygroundModule -->\n\nHbsRenderService->TemplatePlaygroundModule\n\n\n\n\n\nTemplateEditorService\n\nTemplateEditorService\n\nTemplatePlaygroundModule -->\n\nTemplateEditorService->TemplatePlaygroundModule\n\n\n\n\n\nZipExportService\n\nZipExportService\n\nTemplatePlaygroundModule -->\n\nZipExportService->TemplatePlaygroundModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nWorkspaceService\n\nWorkspaceService\n\nWorkspaceModule -->\n\nWorkspaceService->WorkspaceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        19 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    17 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    26 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    61 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CalendarTaskDocument   (src/.../calendar-task.schema.ts)\n                        \n                        \n                            ColumnDocument   (columns/.../column.schema.ts)\n                        \n                        \n                            JwtPayload   (src/.../auth.service.ts)\n                        \n                        \n                            MeetingDocument   (src/.../meeting.schema.ts)\n                        \n                        \n                            NotificationDocument   (src/.../notification.schema.ts)\n                        \n                        \n                            NotificationType   (src/.../notification.schema.ts)\n                        \n                        \n                            ResendVerificationUser   (src/.../auth.controller.ts)\n                        \n                        \n                            SortType   (src/.../commitments.controller.ts)\n                        \n                        \n                            SubtaskDocument   (src/.../subtask.schema.ts)\n                        \n                        \n                            TabType   (src/.../commitments.controller.ts)\n                        \n                        \n                            TaskDocument   (src/.../task.schema.ts)\n                        \n                        \n                            UserDocument   (user/.../user.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.service.ts)\n                        \n                        \n                            WorkspaceDocument   (src/.../workspace.schema.ts)\n                        \n                        \n                            WorkspaceTaskDocument   (src/.../workspacetask.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/calendar/schemas/calendar-task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CalendarTaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    columns/entities/column.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ColumnDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/auth/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/dashboard/schemas/meeting.schema.ts\n    \n    \n        \n            \n                \n                    \n                    MeetingDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/notifications/schemas/notification.schema.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotificationType\n                \n            \n            \n                \n                        \"mention\" | \"assignment\" | \"due-soon\" | \"status-change\"\n\n                \n            \n        \n    \n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    ResendVerificationUser\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/commitment/commitments.controller.ts\n    \n    \n        \n            \n                \n                    \n                    SortType\n                \n            \n            \n                \n                        \"dueDate\" | \"assignee\" | \"updatedAt\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TabType\n                \n            \n            \n                \n                        \"All\" | \"Upcoming\" | \"Due Today\" | \"Completed\" | \"Archived\"\n\n                \n            \n        \n    \n    src/subtask/schemas/subtask.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SubtaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tasks/schemas/task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    user/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/users/user.service.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/workspace/schemas/workspace.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WorkspaceDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/workspace/schemas/workspacetask.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WorkspaceTaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActivitySchema   (src/.../activity.schema.ts)\n                        \n                        \n                            CalendarTaskSchema   (src/.../calendartask.schema.ts)\n                        \n                        \n                            CalendarTaskSchema   (src/.../calendar-task.schema.ts)\n                        \n                        \n                            CalendarUserSchema   (src/.../calendaruser.schema.ts)\n                        \n                        \n                            CalendarWorkspaceSchema   (src/.../calendarworkspace.schema.ts)\n                        \n                        \n                            ColumnModule   (src/.../column.schema.ts)\n                        \n                        \n                            ColumnSchema   (columns/.../column.schema.ts)\n                        \n                        \n                            ColumnSchema   (columns/.../column.schema.ts)\n                        \n                        \n                            ColumnSchema   (src/.../column.schema.ts)\n                        \n                        \n                            CommentSchema   (src/.../comment.schema.ts)\n                        \n                        \n                            CommitmentSchema   (src/.../commitments.schema.ts)\n                        \n                        \n                            Handlebars   (documentation/.../hbs-render.service.ts)\n                        \n                        \n                            JSZip   (documentation/.../zip-export.service.ts)\n                        \n                        \n                            MeetingSchema   (src/.../meeting.schema.ts)\n                        \n                        \n                            MemberSchema   (src/.../member.schema.ts)\n                        \n                        \n                            MemberSchema   (src/.../member.schema.ts)\n                        \n                        \n                            monaco   (documentation/.../template-editor.service.ts)\n                        \n                        \n                            NotificationSchema   (src/.../notification.schema.ts)\n                        \n                        \n                            ProjectSchema   (src/.../project.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SubtaskSchema   (src/.../subtask.schema.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            TeamSchema   (src/.../team.schema.ts)\n                        \n                        \n                            UserSchema   (user/.../user.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                        \n                            WorkspaceSchema   (src/.../workspace.schema.ts)\n                        \n                        \n                            WorkspaceSchema   (src/.../workspace.schema.ts)\n                        \n                        \n                            WorkspaceSubtaskSchema   (src/.../WorkspaceSubtask.schema.ts)\n                        \n                        \n                            WorkspaceTaskSchema   (src/.../workspacetask.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/activity/schemas/activity.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActivitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Activity)\n                    \n                \n\n\n        \n    \n\n    src/schemas/calendartask.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CalendarTaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(CalendarTask)\n                    \n                \n\n\n        \n    \n\n    src/calendar/schemas/calendar-task.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CalendarTaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(CalendarTask)\n                    \n                \n\n\n        \n    \n\n    src/schemas/calendaruser.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CalendarUserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(CalendarUser)\n                    \n                \n\n\n        \n    \n\n    src/schemas/calendarworkspace.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CalendarWorkspaceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(CalendarWorkspace)\n                    \n                \n\n\n        \n    \n\n    src/columns/schemas/column.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ColumnModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Column)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ColumnSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Column)\n                    \n                \n\n\n        \n    \n\n    columns/entities/column.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ColumnSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Column)\n                    \n                \n\n\n        \n    \n\n    columns/schemas/column.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ColumnSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Column)\n                    \n                \n\n\n        \n    \n\n    src/comments/comment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Comment)\n                    \n                \n\n\n        \n    \n\n    src/commitment/commitments.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommitmentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Commitment)\n                    \n                \n\n\n        \n    \n\n    documentation/template-playground/hbs-render.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Handlebars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    documentation/template-playground/zip-export.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JSZip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/dashboard/schemas/meeting.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MeetingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Meeting)\n                    \n                \n\n\n        \n    \n\n    src/workspace/member.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MemberSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Member)\n                    \n                \n\n\n        \n    \n\n    src/teammember/entities/member.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MemberSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Member)\n                    \n                \n\n\n        \n    \n\n    documentation/template-playground/template-editor.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        monaco\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/notifications/schemas/notification.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotificationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Notification)\n                    \n                \n\n\n        \n    \n\n    src/project/project.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProjectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Project)\n                    \n                \n\n\n        \n    \n\n    src/commitment/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/subtask/schemas/subtask.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SubtaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Subtask)\n                    \n                \n\n\n        \n    \n\n    src/tasks/task.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Task)\n                    \n                \n\n\n        \n    \n\n    src/tasks/schemas/task.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Task)\n                    \n                \n\n\n        \n    \n\n    src/teams/schemas/team.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Team)\n                    \n                \n\n\n        \n    \n\n    user/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    src/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    src/workspace/workspace.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WorkspaceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Workspace)\n                    \n                \n\n\n        \n    \n\n    src/workspace/schemas/workspace.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WorkspaceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Workspace)\n                    \n                \n\n\n        \n    \n\n    src/workspace/schemas/WorkspaceSubtask.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WorkspaceSubtaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WorkspaceSubtask)\n                    \n                \n\n\n        \n    \n\n    src/workspace/schemas/workspacetask.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WorkspaceTaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(WorkspaceTask)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
